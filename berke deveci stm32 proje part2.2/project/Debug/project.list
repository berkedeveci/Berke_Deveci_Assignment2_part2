
project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006dac  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08006f34  08006f34  00016f34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f8c  08006f8c  000200fc  2**0
                  CONTENTS
  4 .ARM          00000008  08006f8c  08006f8c  00016f8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006f94  08006f94  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f94  08006f94  00016f94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006f98  08006f98  00016f98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  08006f9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200fc  2**0
                  CONTENTS
 10 .bss          00001c44  200000fc  200000fc  000200fc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001d40  20001d40  000200fc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000de90  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000028a3  00000000  00000000  0002dfbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b38  00000000  00000000  00030860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000a00  00000000  00000000  00031398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022b93  00000000  00000000  00031d98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ed13  00000000  00000000  0005492b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c3dea  00000000  00000000  0006363e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00127428  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002c68  00000000  00000000  00127478  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000fc 	.word	0x200000fc
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006f1c 	.word	0x08006f1c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000100 	.word	0x20000100
 80001c4:	08006f1c 	.word	0x08006f1c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d2:	f000 f9c3 	bl	800085c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d6:	f000 f859 	bl	800058c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004da:	f000 f8bf 	bl	800065c <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80004de:	f005 ffef 	bl	80064c0 <MX_USB_DEVICE_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
      if(receivebuffer[0] != 0x00) {
 80004e2:	4b24      	ldr	r3, [pc, #144]	; (8000574 <main+0xa8>)
 80004e4:	781b      	ldrb	r3, [r3, #0]
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d0fb      	beq.n	80004e2 <main+0x16>
    	  Receive_Character=0;
 80004ea:	4b23      	ldr	r3, [pc, #140]	; (8000578 <main+0xac>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	701a      	strb	r2, [r3, #0]
    	  for(int i=0; i<8; i++) {
 80004f0:	2300      	movs	r3, #0
 80004f2:	607b      	str	r3, [r7, #4]
 80004f4:	e036      	b.n	8000564 <main+0x98>
    		  if((receivebuffer[0] & 1<<i) > 0) bit_state=1;
 80004f6:	4b1f      	ldr	r3, [pc, #124]	; (8000574 <main+0xa8>)
 80004f8:	781b      	ldrb	r3, [r3, #0]
 80004fa:	4619      	mov	r1, r3
 80004fc:	2201      	movs	r2, #1
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	fa02 f303 	lsl.w	r3, r2, r3
 8000504:	400b      	ands	r3, r1
 8000506:	2b00      	cmp	r3, #0
 8000508:	dd03      	ble.n	8000512 <main+0x46>
 800050a:	4b1c      	ldr	r3, [pc, #112]	; (800057c <main+0xb0>)
 800050c:	2201      	movs	r2, #1
 800050e:	701a      	strb	r2, [r3, #0]
 8000510:	e002      	b.n	8000518 <main+0x4c>
    		  else bit_state=0;
 8000512:	4b1a      	ldr	r3, [pc, #104]	; (800057c <main+0xb0>)
 8000514:	2200      	movs	r2, #0
 8000516:	701a      	strb	r2, [r3, #0]

    		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, bit_state);
 8000518:	4b18      	ldr	r3, [pc, #96]	; (800057c <main+0xb0>)
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	461a      	mov	r2, r3
 800051e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000522:	4817      	ldr	r0, [pc, #92]	; (8000580 <main+0xb4>)
 8000524:	f000 fcf6 	bl	8000f14 <HAL_GPIO_WritePin>
    		  pin_state=HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15);
 8000528:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800052c:	4815      	ldr	r0, [pc, #84]	; (8000584 <main+0xb8>)
 800052e:	f000 fcd9 	bl	8000ee4 <HAL_GPIO_ReadPin>
 8000532:	4603      	mov	r3, r0
 8000534:	461a      	mov	r2, r3
 8000536:	4b14      	ldr	r3, [pc, #80]	; (8000588 <main+0xbc>)
 8000538:	701a      	strb	r2, [r3, #0]
    		  Receive_Character = Receive_Character | pin_state << i;
 800053a:	4b13      	ldr	r3, [pc, #76]	; (8000588 <main+0xbc>)
 800053c:	781b      	ldrb	r3, [r3, #0]
 800053e:	461a      	mov	r2, r3
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	fa02 f303 	lsl.w	r3, r2, r3
 8000546:	b25a      	sxtb	r2, r3
 8000548:	4b0b      	ldr	r3, [pc, #44]	; (8000578 <main+0xac>)
 800054a:	781b      	ldrb	r3, [r3, #0]
 800054c:	b25b      	sxtb	r3, r3
 800054e:	4313      	orrs	r3, r2
 8000550:	b25b      	sxtb	r3, r3
 8000552:	b2da      	uxtb	r2, r3
 8000554:	4b08      	ldr	r3, [pc, #32]	; (8000578 <main+0xac>)
 8000556:	701a      	strb	r2, [r3, #0]
    		  HAL_Delay(250);
 8000558:	20fa      	movs	r0, #250	; 0xfa
 800055a:	f000 f9f1 	bl	8000940 <HAL_Delay>
    	  for(int i=0; i<8; i++) {
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	3301      	adds	r3, #1
 8000562:	607b      	str	r3, [r7, #4]
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	2b07      	cmp	r3, #7
 8000568:	ddc5      	ble.n	80004f6 <main+0x2a>
    	  }
    	  receivebuffer[0] = 0x00;
 800056a:	4b02      	ldr	r3, [pc, #8]	; (8000574 <main+0xa8>)
 800056c:	2200      	movs	r2, #0
 800056e:	701a      	strb	r2, [r3, #0]
      if(receivebuffer[0] != 0x00) {
 8000570:	e7b7      	b.n	80004e2 <main+0x16>
 8000572:	bf00      	nop
 8000574:	2000011c 	.word	0x2000011c
 8000578:	2000011a 	.word	0x2000011a
 800057c:	20000119 	.word	0x20000119
 8000580:	40020800 	.word	0x40020800
 8000584:	40020000 	.word	0x40020000
 8000588:	20000118 	.word	0x20000118

0800058c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b094      	sub	sp, #80	; 0x50
 8000590:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000592:	f107 0320 	add.w	r3, r7, #32
 8000596:	2230      	movs	r2, #48	; 0x30
 8000598:	2100      	movs	r1, #0
 800059a:	4618      	mov	r0, r3
 800059c:	f006 fcb6 	bl	8006f0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a0:	f107 030c 	add.w	r3, r7, #12
 80005a4:	2200      	movs	r2, #0
 80005a6:	601a      	str	r2, [r3, #0]
 80005a8:	605a      	str	r2, [r3, #4]
 80005aa:	609a      	str	r2, [r3, #8]
 80005ac:	60da      	str	r2, [r3, #12]
 80005ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005b0:	2300      	movs	r3, #0
 80005b2:	60bb      	str	r3, [r7, #8]
 80005b4:	4b27      	ldr	r3, [pc, #156]	; (8000654 <SystemClock_Config+0xc8>)
 80005b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b8:	4a26      	ldr	r2, [pc, #152]	; (8000654 <SystemClock_Config+0xc8>)
 80005ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005be:	6413      	str	r3, [r2, #64]	; 0x40
 80005c0:	4b24      	ldr	r3, [pc, #144]	; (8000654 <SystemClock_Config+0xc8>)
 80005c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005c8:	60bb      	str	r3, [r7, #8]
 80005ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005cc:	2300      	movs	r3, #0
 80005ce:	607b      	str	r3, [r7, #4]
 80005d0:	4b21      	ldr	r3, [pc, #132]	; (8000658 <SystemClock_Config+0xcc>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	4a20      	ldr	r2, [pc, #128]	; (8000658 <SystemClock_Config+0xcc>)
 80005d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005da:	6013      	str	r3, [r2, #0]
 80005dc:	4b1e      	ldr	r3, [pc, #120]	; (8000658 <SystemClock_Config+0xcc>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005e4:	607b      	str	r3, [r7, #4]
 80005e6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005e8:	2301      	movs	r3, #1
 80005ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005f0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005f2:	2302      	movs	r3, #2
 80005f4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005f6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005fc:	2304      	movs	r3, #4
 80005fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000600:	23a8      	movs	r3, #168	; 0xa8
 8000602:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000604:	2302      	movs	r3, #2
 8000606:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000608:	2307      	movs	r3, #7
 800060a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800060c:	f107 0320 	add.w	r3, r7, #32
 8000610:	4618      	mov	r0, r3
 8000612:	f001 ff15 	bl	8002440 <HAL_RCC_OscConfig>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800061c:	f000 f880 	bl	8000720 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000620:	230f      	movs	r3, #15
 8000622:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000624:	2302      	movs	r3, #2
 8000626:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000628:	2380      	movs	r3, #128	; 0x80
 800062a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800062c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000630:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000632:	2300      	movs	r3, #0
 8000634:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000636:	f107 030c 	add.w	r3, r7, #12
 800063a:	2102      	movs	r1, #2
 800063c:	4618      	mov	r0, r3
 800063e:	f002 f977 	bl	8002930 <HAL_RCC_ClockConfig>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000648:	f000 f86a 	bl	8000720 <Error_Handler>
  }
}
 800064c:	bf00      	nop
 800064e:	3750      	adds	r7, #80	; 0x50
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	40023800 	.word	0x40023800
 8000658:	40007000 	.word	0x40007000

0800065c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b088      	sub	sp, #32
 8000660:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000662:	f107 030c 	add.w	r3, r7, #12
 8000666:	2200      	movs	r2, #0
 8000668:	601a      	str	r2, [r3, #0]
 800066a:	605a      	str	r2, [r3, #4]
 800066c:	609a      	str	r2, [r3, #8]
 800066e:	60da      	str	r2, [r3, #12]
 8000670:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000672:	2300      	movs	r3, #0
 8000674:	60bb      	str	r3, [r7, #8]
 8000676:	4b27      	ldr	r3, [pc, #156]	; (8000714 <MX_GPIO_Init+0xb8>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067a:	4a26      	ldr	r2, [pc, #152]	; (8000714 <MX_GPIO_Init+0xb8>)
 800067c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000680:	6313      	str	r3, [r2, #48]	; 0x30
 8000682:	4b24      	ldr	r3, [pc, #144]	; (8000714 <MX_GPIO_Init+0xb8>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000686:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800068a:	60bb      	str	r3, [r7, #8]
 800068c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800068e:	2300      	movs	r3, #0
 8000690:	607b      	str	r3, [r7, #4]
 8000692:	4b20      	ldr	r3, [pc, #128]	; (8000714 <MX_GPIO_Init+0xb8>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000696:	4a1f      	ldr	r2, [pc, #124]	; (8000714 <MX_GPIO_Init+0xb8>)
 8000698:	f043 0301 	orr.w	r3, r3, #1
 800069c:	6313      	str	r3, [r2, #48]	; 0x30
 800069e:	4b1d      	ldr	r3, [pc, #116]	; (8000714 <MX_GPIO_Init+0xb8>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a2:	f003 0301 	and.w	r3, r3, #1
 80006a6:	607b      	str	r3, [r7, #4]
 80006a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006aa:	2300      	movs	r3, #0
 80006ac:	603b      	str	r3, [r7, #0]
 80006ae:	4b19      	ldr	r3, [pc, #100]	; (8000714 <MX_GPIO_Init+0xb8>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b2:	4a18      	ldr	r2, [pc, #96]	; (8000714 <MX_GPIO_Init+0xb8>)
 80006b4:	f043 0304 	orr.w	r3, r3, #4
 80006b8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ba:	4b16      	ldr	r3, [pc, #88]	; (8000714 <MX_GPIO_Init+0xb8>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006be:	f003 0304 	and.w	r3, r3, #4
 80006c2:	603b      	str	r3, [r7, #0]
 80006c4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 80006c6:	2200      	movs	r2, #0
 80006c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006cc:	4812      	ldr	r0, [pc, #72]	; (8000718 <MX_GPIO_Init+0xbc>)
 80006ce:	f000 fc21 	bl	8000f14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80006d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80006d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006d8:	2300      	movs	r3, #0
 80006da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006dc:	2300      	movs	r3, #0
 80006de:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006e0:	f107 030c 	add.w	r3, r7, #12
 80006e4:	4619      	mov	r1, r3
 80006e6:	480d      	ldr	r0, [pc, #52]	; (800071c <MX_GPIO_Init+0xc0>)
 80006e8:	f000 fa60 	bl	8000bac <HAL_GPIO_Init>

  /*Configure GPIO pin : PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80006ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f2:	2301      	movs	r3, #1
 80006f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f6:	2300      	movs	r3, #0
 80006f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006fa:	2300      	movs	r3, #0
 80006fc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006fe:	f107 030c 	add.w	r3, r7, #12
 8000702:	4619      	mov	r1, r3
 8000704:	4804      	ldr	r0, [pc, #16]	; (8000718 <MX_GPIO_Init+0xbc>)
 8000706:	f000 fa51 	bl	8000bac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800070a:	bf00      	nop
 800070c:	3720      	adds	r7, #32
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	40023800 	.word	0x40023800
 8000718:	40020800 	.word	0x40020800
 800071c:	40020000 	.word	0x40020000

08000720 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000724:	b672      	cpsid	i
}
 8000726:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000728:	e7fe      	b.n	8000728 <Error_Handler+0x8>
	...

0800072c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800072c:	b480      	push	{r7}
 800072e:	b083      	sub	sp, #12
 8000730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	607b      	str	r3, [r7, #4]
 8000736:	4b10      	ldr	r3, [pc, #64]	; (8000778 <HAL_MspInit+0x4c>)
 8000738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800073a:	4a0f      	ldr	r2, [pc, #60]	; (8000778 <HAL_MspInit+0x4c>)
 800073c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000740:	6453      	str	r3, [r2, #68]	; 0x44
 8000742:	4b0d      	ldr	r3, [pc, #52]	; (8000778 <HAL_MspInit+0x4c>)
 8000744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000746:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800074a:	607b      	str	r3, [r7, #4]
 800074c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800074e:	2300      	movs	r3, #0
 8000750:	603b      	str	r3, [r7, #0]
 8000752:	4b09      	ldr	r3, [pc, #36]	; (8000778 <HAL_MspInit+0x4c>)
 8000754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000756:	4a08      	ldr	r2, [pc, #32]	; (8000778 <HAL_MspInit+0x4c>)
 8000758:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800075c:	6413      	str	r3, [r2, #64]	; 0x40
 800075e:	4b06      	ldr	r3, [pc, #24]	; (8000778 <HAL_MspInit+0x4c>)
 8000760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000766:	603b      	str	r3, [r7, #0]
 8000768:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800076a:	bf00      	nop
 800076c:	370c      	adds	r7, #12
 800076e:	46bd      	mov	sp, r7
 8000770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000774:	4770      	bx	lr
 8000776:	bf00      	nop
 8000778:	40023800 	.word	0x40023800

0800077c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000780:	e7fe      	b.n	8000780 <NMI_Handler+0x4>

08000782 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000782:	b480      	push	{r7}
 8000784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000786:	e7fe      	b.n	8000786 <HardFault_Handler+0x4>

08000788 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800078c:	e7fe      	b.n	800078c <MemManage_Handler+0x4>

0800078e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800078e:	b480      	push	{r7}
 8000790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000792:	e7fe      	b.n	8000792 <BusFault_Handler+0x4>

08000794 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000798:	e7fe      	b.n	8000798 <UsageFault_Handler+0x4>

0800079a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800079a:	b480      	push	{r7}
 800079c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800079e:	bf00      	nop
 80007a0:	46bd      	mov	sp, r7
 80007a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a6:	4770      	bx	lr

080007a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007ac:	bf00      	nop
 80007ae:	46bd      	mov	sp, r7
 80007b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b4:	4770      	bx	lr

080007b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007b6:	b480      	push	{r7}
 80007b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007ba:	bf00      	nop
 80007bc:	46bd      	mov	sp, r7
 80007be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c2:	4770      	bx	lr

080007c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007c8:	f000 f89a 	bl	8000900 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007cc:	bf00      	nop
 80007ce:	bd80      	pop	{r7, pc}

080007d0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80007d4:	4802      	ldr	r0, [pc, #8]	; (80007e0 <OTG_FS_IRQHandler+0x10>)
 80007d6:	f000 fd06 	bl	80011e6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80007da:	bf00      	nop
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	20001614 	.word	0x20001614

080007e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007e8:	4b06      	ldr	r3, [pc, #24]	; (8000804 <SystemInit+0x20>)
 80007ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007ee:	4a05      	ldr	r2, [pc, #20]	; (8000804 <SystemInit+0x20>)
 80007f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007f8:	bf00      	nop
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	e000ed00 	.word	0xe000ed00

08000808 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000808:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000840 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800080c:	480d      	ldr	r0, [pc, #52]	; (8000844 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800080e:	490e      	ldr	r1, [pc, #56]	; (8000848 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000810:	4a0e      	ldr	r2, [pc, #56]	; (800084c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000812:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000814:	e002      	b.n	800081c <LoopCopyDataInit>

08000816 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000816:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000818:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800081a:	3304      	adds	r3, #4

0800081c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800081c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800081e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000820:	d3f9      	bcc.n	8000816 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000822:	4a0b      	ldr	r2, [pc, #44]	; (8000850 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000824:	4c0b      	ldr	r4, [pc, #44]	; (8000854 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000826:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000828:	e001      	b.n	800082e <LoopFillZerobss>

0800082a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800082a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800082c:	3204      	adds	r2, #4

0800082e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800082e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000830:	d3fb      	bcc.n	800082a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000832:	f7ff ffd7 	bl	80007e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000836:	f006 fb45 	bl	8006ec4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800083a:	f7ff fe47 	bl	80004cc <main>
  bx  lr    
 800083e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000840:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000844:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000848:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 800084c:	08006f9c 	.word	0x08006f9c
  ldr r2, =_sbss
 8000850:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8000854:	20001d40 	.word	0x20001d40

08000858 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000858:	e7fe      	b.n	8000858 <ADC_IRQHandler>
	...

0800085c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000860:	4b0e      	ldr	r3, [pc, #56]	; (800089c <HAL_Init+0x40>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4a0d      	ldr	r2, [pc, #52]	; (800089c <HAL_Init+0x40>)
 8000866:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800086a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800086c:	4b0b      	ldr	r3, [pc, #44]	; (800089c <HAL_Init+0x40>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a0a      	ldr	r2, [pc, #40]	; (800089c <HAL_Init+0x40>)
 8000872:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000876:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000878:	4b08      	ldr	r3, [pc, #32]	; (800089c <HAL_Init+0x40>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4a07      	ldr	r2, [pc, #28]	; (800089c <HAL_Init+0x40>)
 800087e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000882:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000884:	2003      	movs	r0, #3
 8000886:	f000 f94f 	bl	8000b28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800088a:	200f      	movs	r0, #15
 800088c:	f000 f808 	bl	80008a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000890:	f7ff ff4c 	bl	800072c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000894:	2300      	movs	r3, #0
}
 8000896:	4618      	mov	r0, r3
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	40023c00 	.word	0x40023c00

080008a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008a8:	4b12      	ldr	r3, [pc, #72]	; (80008f4 <HAL_InitTick+0x54>)
 80008aa:	681a      	ldr	r2, [r3, #0]
 80008ac:	4b12      	ldr	r3, [pc, #72]	; (80008f8 <HAL_InitTick+0x58>)
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	4619      	mov	r1, r3
 80008b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80008ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80008be:	4618      	mov	r0, r3
 80008c0:	f000 f967 	bl	8000b92 <HAL_SYSTICK_Config>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008ca:	2301      	movs	r3, #1
 80008cc:	e00e      	b.n	80008ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	2b0f      	cmp	r3, #15
 80008d2:	d80a      	bhi.n	80008ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008d4:	2200      	movs	r2, #0
 80008d6:	6879      	ldr	r1, [r7, #4]
 80008d8:	f04f 30ff 	mov.w	r0, #4294967295
 80008dc:	f000 f92f 	bl	8000b3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008e0:	4a06      	ldr	r2, [pc, #24]	; (80008fc <HAL_InitTick+0x5c>)
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008e6:	2300      	movs	r3, #0
 80008e8:	e000      	b.n	80008ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008ea:	2301      	movs	r3, #1
}
 80008ec:	4618      	mov	r0, r3
 80008ee:	3708      	adds	r7, #8
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	20000000 	.word	0x20000000
 80008f8:	20000008 	.word	0x20000008
 80008fc:	20000004 	.word	0x20000004

08000900 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000904:	4b06      	ldr	r3, [pc, #24]	; (8000920 <HAL_IncTick+0x20>)
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	461a      	mov	r2, r3
 800090a:	4b06      	ldr	r3, [pc, #24]	; (8000924 <HAL_IncTick+0x24>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	4413      	add	r3, r2
 8000910:	4a04      	ldr	r2, [pc, #16]	; (8000924 <HAL_IncTick+0x24>)
 8000912:	6013      	str	r3, [r2, #0]
}
 8000914:	bf00      	nop
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop
 8000920:	20000008 	.word	0x20000008
 8000924:	20000130 	.word	0x20000130

08000928 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  return uwTick;
 800092c:	4b03      	ldr	r3, [pc, #12]	; (800093c <HAL_GetTick+0x14>)
 800092e:	681b      	ldr	r3, [r3, #0]
}
 8000930:	4618      	mov	r0, r3
 8000932:	46bd      	mov	sp, r7
 8000934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop
 800093c:	20000130 	.word	0x20000130

08000940 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b084      	sub	sp, #16
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000948:	f7ff ffee 	bl	8000928 <HAL_GetTick>
 800094c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000958:	d005      	beq.n	8000966 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800095a:	4b0a      	ldr	r3, [pc, #40]	; (8000984 <HAL_Delay+0x44>)
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	461a      	mov	r2, r3
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	4413      	add	r3, r2
 8000964:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000966:	bf00      	nop
 8000968:	f7ff ffde 	bl	8000928 <HAL_GetTick>
 800096c:	4602      	mov	r2, r0
 800096e:	68bb      	ldr	r3, [r7, #8]
 8000970:	1ad3      	subs	r3, r2, r3
 8000972:	68fa      	ldr	r2, [r7, #12]
 8000974:	429a      	cmp	r2, r3
 8000976:	d8f7      	bhi.n	8000968 <HAL_Delay+0x28>
  {
  }
}
 8000978:	bf00      	nop
 800097a:	bf00      	nop
 800097c:	3710      	adds	r7, #16
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	20000008 	.word	0x20000008

08000988 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000988:	b480      	push	{r7}
 800098a:	b085      	sub	sp, #20
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	f003 0307 	and.w	r3, r3, #7
 8000996:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000998:	4b0c      	ldr	r3, [pc, #48]	; (80009cc <__NVIC_SetPriorityGrouping+0x44>)
 800099a:	68db      	ldr	r3, [r3, #12]
 800099c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800099e:	68ba      	ldr	r2, [r7, #8]
 80009a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009a4:	4013      	ands	r3, r2
 80009a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009ac:	68bb      	ldr	r3, [r7, #8]
 80009ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009ba:	4a04      	ldr	r2, [pc, #16]	; (80009cc <__NVIC_SetPriorityGrouping+0x44>)
 80009bc:	68bb      	ldr	r3, [r7, #8]
 80009be:	60d3      	str	r3, [r2, #12]
}
 80009c0:	bf00      	nop
 80009c2:	3714      	adds	r7, #20
 80009c4:	46bd      	mov	sp, r7
 80009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ca:	4770      	bx	lr
 80009cc:	e000ed00 	.word	0xe000ed00

080009d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009d4:	4b04      	ldr	r3, [pc, #16]	; (80009e8 <__NVIC_GetPriorityGrouping+0x18>)
 80009d6:	68db      	ldr	r3, [r3, #12]
 80009d8:	0a1b      	lsrs	r3, r3, #8
 80009da:	f003 0307 	and.w	r3, r3, #7
}
 80009de:	4618      	mov	r0, r3
 80009e0:	46bd      	mov	sp, r7
 80009e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e6:	4770      	bx	lr
 80009e8:	e000ed00 	.word	0xe000ed00

080009ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b083      	sub	sp, #12
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	4603      	mov	r3, r0
 80009f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	db0b      	blt.n	8000a16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009fe:	79fb      	ldrb	r3, [r7, #7]
 8000a00:	f003 021f 	and.w	r2, r3, #31
 8000a04:	4907      	ldr	r1, [pc, #28]	; (8000a24 <__NVIC_EnableIRQ+0x38>)
 8000a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a0a:	095b      	lsrs	r3, r3, #5
 8000a0c:	2001      	movs	r0, #1
 8000a0e:	fa00 f202 	lsl.w	r2, r0, r2
 8000a12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a16:	bf00      	nop
 8000a18:	370c      	adds	r7, #12
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop
 8000a24:	e000e100 	.word	0xe000e100

08000a28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b083      	sub	sp, #12
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	4603      	mov	r3, r0
 8000a30:	6039      	str	r1, [r7, #0]
 8000a32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	db0a      	blt.n	8000a52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	b2da      	uxtb	r2, r3
 8000a40:	490c      	ldr	r1, [pc, #48]	; (8000a74 <__NVIC_SetPriority+0x4c>)
 8000a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a46:	0112      	lsls	r2, r2, #4
 8000a48:	b2d2      	uxtb	r2, r2
 8000a4a:	440b      	add	r3, r1
 8000a4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a50:	e00a      	b.n	8000a68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	b2da      	uxtb	r2, r3
 8000a56:	4908      	ldr	r1, [pc, #32]	; (8000a78 <__NVIC_SetPriority+0x50>)
 8000a58:	79fb      	ldrb	r3, [r7, #7]
 8000a5a:	f003 030f 	and.w	r3, r3, #15
 8000a5e:	3b04      	subs	r3, #4
 8000a60:	0112      	lsls	r2, r2, #4
 8000a62:	b2d2      	uxtb	r2, r2
 8000a64:	440b      	add	r3, r1
 8000a66:	761a      	strb	r2, [r3, #24]
}
 8000a68:	bf00      	nop
 8000a6a:	370c      	adds	r7, #12
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a72:	4770      	bx	lr
 8000a74:	e000e100 	.word	0xe000e100
 8000a78:	e000ed00 	.word	0xe000ed00

08000a7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b089      	sub	sp, #36	; 0x24
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	60f8      	str	r0, [r7, #12]
 8000a84:	60b9      	str	r1, [r7, #8]
 8000a86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	f003 0307 	and.w	r3, r3, #7
 8000a8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a90:	69fb      	ldr	r3, [r7, #28]
 8000a92:	f1c3 0307 	rsb	r3, r3, #7
 8000a96:	2b04      	cmp	r3, #4
 8000a98:	bf28      	it	cs
 8000a9a:	2304      	movcs	r3, #4
 8000a9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a9e:	69fb      	ldr	r3, [r7, #28]
 8000aa0:	3304      	adds	r3, #4
 8000aa2:	2b06      	cmp	r3, #6
 8000aa4:	d902      	bls.n	8000aac <NVIC_EncodePriority+0x30>
 8000aa6:	69fb      	ldr	r3, [r7, #28]
 8000aa8:	3b03      	subs	r3, #3
 8000aaa:	e000      	b.n	8000aae <NVIC_EncodePriority+0x32>
 8000aac:	2300      	movs	r3, #0
 8000aae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ab0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ab4:	69bb      	ldr	r3, [r7, #24]
 8000ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aba:	43da      	mvns	r2, r3
 8000abc:	68bb      	ldr	r3, [r7, #8]
 8000abe:	401a      	ands	r2, r3
 8000ac0:	697b      	ldr	r3, [r7, #20]
 8000ac2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ac4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	fa01 f303 	lsl.w	r3, r1, r3
 8000ace:	43d9      	mvns	r1, r3
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ad4:	4313      	orrs	r3, r2
         );
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	3724      	adds	r7, #36	; 0x24
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr
	...

08000ae4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	3b01      	subs	r3, #1
 8000af0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000af4:	d301      	bcc.n	8000afa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000af6:	2301      	movs	r3, #1
 8000af8:	e00f      	b.n	8000b1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000afa:	4a0a      	ldr	r2, [pc, #40]	; (8000b24 <SysTick_Config+0x40>)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	3b01      	subs	r3, #1
 8000b00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b02:	210f      	movs	r1, #15
 8000b04:	f04f 30ff 	mov.w	r0, #4294967295
 8000b08:	f7ff ff8e 	bl	8000a28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b0c:	4b05      	ldr	r3, [pc, #20]	; (8000b24 <SysTick_Config+0x40>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b12:	4b04      	ldr	r3, [pc, #16]	; (8000b24 <SysTick_Config+0x40>)
 8000b14:	2207      	movs	r2, #7
 8000b16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b18:	2300      	movs	r3, #0
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	3708      	adds	r7, #8
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	e000e010 	.word	0xe000e010

08000b28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b30:	6878      	ldr	r0, [r7, #4]
 8000b32:	f7ff ff29 	bl	8000988 <__NVIC_SetPriorityGrouping>
}
 8000b36:	bf00      	nop
 8000b38:	3708      	adds	r7, #8
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}

08000b3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b3e:	b580      	push	{r7, lr}
 8000b40:	b086      	sub	sp, #24
 8000b42:	af00      	add	r7, sp, #0
 8000b44:	4603      	mov	r3, r0
 8000b46:	60b9      	str	r1, [r7, #8]
 8000b48:	607a      	str	r2, [r7, #4]
 8000b4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b50:	f7ff ff3e 	bl	80009d0 <__NVIC_GetPriorityGrouping>
 8000b54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b56:	687a      	ldr	r2, [r7, #4]
 8000b58:	68b9      	ldr	r1, [r7, #8]
 8000b5a:	6978      	ldr	r0, [r7, #20]
 8000b5c:	f7ff ff8e 	bl	8000a7c <NVIC_EncodePriority>
 8000b60:	4602      	mov	r2, r0
 8000b62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b66:	4611      	mov	r1, r2
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f7ff ff5d 	bl	8000a28 <__NVIC_SetPriority>
}
 8000b6e:	bf00      	nop
 8000b70:	3718      	adds	r7, #24
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}

08000b76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b76:	b580      	push	{r7, lr}
 8000b78:	b082      	sub	sp, #8
 8000b7a:	af00      	add	r7, sp, #0
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b84:	4618      	mov	r0, r3
 8000b86:	f7ff ff31 	bl	80009ec <__NVIC_EnableIRQ>
}
 8000b8a:	bf00      	nop
 8000b8c:	3708      	adds	r7, #8
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}

08000b92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b92:	b580      	push	{r7, lr}
 8000b94:	b082      	sub	sp, #8
 8000b96:	af00      	add	r7, sp, #0
 8000b98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b9a:	6878      	ldr	r0, [r7, #4]
 8000b9c:	f7ff ffa2 	bl	8000ae4 <SysTick_Config>
 8000ba0:	4603      	mov	r3, r0
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	3708      	adds	r7, #8
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
	...

08000bac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b089      	sub	sp, #36	; 0x24
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
 8000bb4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	61fb      	str	r3, [r7, #28]
 8000bc6:	e16b      	b.n	8000ea0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000bc8:	2201      	movs	r2, #1
 8000bca:	69fb      	ldr	r3, [r7, #28]
 8000bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	697a      	ldr	r2, [r7, #20]
 8000bd8:	4013      	ands	r3, r2
 8000bda:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000bdc:	693a      	ldr	r2, [r7, #16]
 8000bde:	697b      	ldr	r3, [r7, #20]
 8000be0:	429a      	cmp	r2, r3
 8000be2:	f040 815a 	bne.w	8000e9a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	685b      	ldr	r3, [r3, #4]
 8000bea:	f003 0303 	and.w	r3, r3, #3
 8000bee:	2b01      	cmp	r3, #1
 8000bf0:	d005      	beq.n	8000bfe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	685b      	ldr	r3, [r3, #4]
 8000bf6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000bfa:	2b02      	cmp	r3, #2
 8000bfc:	d130      	bne.n	8000c60 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	689b      	ldr	r3, [r3, #8]
 8000c02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c04:	69fb      	ldr	r3, [r7, #28]
 8000c06:	005b      	lsls	r3, r3, #1
 8000c08:	2203      	movs	r2, #3
 8000c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0e:	43db      	mvns	r3, r3
 8000c10:	69ba      	ldr	r2, [r7, #24]
 8000c12:	4013      	ands	r3, r2
 8000c14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	68da      	ldr	r2, [r3, #12]
 8000c1a:	69fb      	ldr	r3, [r7, #28]
 8000c1c:	005b      	lsls	r3, r3, #1
 8000c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c22:	69ba      	ldr	r2, [r7, #24]
 8000c24:	4313      	orrs	r3, r2
 8000c26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	69ba      	ldr	r2, [r7, #24]
 8000c2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	685b      	ldr	r3, [r3, #4]
 8000c32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c34:	2201      	movs	r2, #1
 8000c36:	69fb      	ldr	r3, [r7, #28]
 8000c38:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3c:	43db      	mvns	r3, r3
 8000c3e:	69ba      	ldr	r2, [r7, #24]
 8000c40:	4013      	ands	r3, r2
 8000c42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	685b      	ldr	r3, [r3, #4]
 8000c48:	091b      	lsrs	r3, r3, #4
 8000c4a:	f003 0201 	and.w	r2, r3, #1
 8000c4e:	69fb      	ldr	r3, [r7, #28]
 8000c50:	fa02 f303 	lsl.w	r3, r2, r3
 8000c54:	69ba      	ldr	r2, [r7, #24]
 8000c56:	4313      	orrs	r3, r2
 8000c58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	69ba      	ldr	r2, [r7, #24]
 8000c5e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	685b      	ldr	r3, [r3, #4]
 8000c64:	f003 0303 	and.w	r3, r3, #3
 8000c68:	2b03      	cmp	r3, #3
 8000c6a:	d017      	beq.n	8000c9c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	68db      	ldr	r3, [r3, #12]
 8000c70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c72:	69fb      	ldr	r3, [r7, #28]
 8000c74:	005b      	lsls	r3, r3, #1
 8000c76:	2203      	movs	r2, #3
 8000c78:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7c:	43db      	mvns	r3, r3
 8000c7e:	69ba      	ldr	r2, [r7, #24]
 8000c80:	4013      	ands	r3, r2
 8000c82:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	689a      	ldr	r2, [r3, #8]
 8000c88:	69fb      	ldr	r3, [r7, #28]
 8000c8a:	005b      	lsls	r3, r3, #1
 8000c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c90:	69ba      	ldr	r2, [r7, #24]
 8000c92:	4313      	orrs	r3, r2
 8000c94:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	69ba      	ldr	r2, [r7, #24]
 8000c9a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	f003 0303 	and.w	r3, r3, #3
 8000ca4:	2b02      	cmp	r3, #2
 8000ca6:	d123      	bne.n	8000cf0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ca8:	69fb      	ldr	r3, [r7, #28]
 8000caa:	08da      	lsrs	r2, r3, #3
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	3208      	adds	r2, #8
 8000cb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000cb6:	69fb      	ldr	r3, [r7, #28]
 8000cb8:	f003 0307 	and.w	r3, r3, #7
 8000cbc:	009b      	lsls	r3, r3, #2
 8000cbe:	220f      	movs	r2, #15
 8000cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc4:	43db      	mvns	r3, r3
 8000cc6:	69ba      	ldr	r2, [r7, #24]
 8000cc8:	4013      	ands	r3, r2
 8000cca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	691a      	ldr	r2, [r3, #16]
 8000cd0:	69fb      	ldr	r3, [r7, #28]
 8000cd2:	f003 0307 	and.w	r3, r3, #7
 8000cd6:	009b      	lsls	r3, r3, #2
 8000cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cdc:	69ba      	ldr	r2, [r7, #24]
 8000cde:	4313      	orrs	r3, r2
 8000ce0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ce2:	69fb      	ldr	r3, [r7, #28]
 8000ce4:	08da      	lsrs	r2, r3, #3
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	3208      	adds	r2, #8
 8000cea:	69b9      	ldr	r1, [r7, #24]
 8000cec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000cf6:	69fb      	ldr	r3, [r7, #28]
 8000cf8:	005b      	lsls	r3, r3, #1
 8000cfa:	2203      	movs	r2, #3
 8000cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000d00:	43db      	mvns	r3, r3
 8000d02:	69ba      	ldr	r2, [r7, #24]
 8000d04:	4013      	ands	r3, r2
 8000d06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	f003 0203 	and.w	r2, r3, #3
 8000d10:	69fb      	ldr	r3, [r7, #28]
 8000d12:	005b      	lsls	r3, r3, #1
 8000d14:	fa02 f303 	lsl.w	r3, r2, r3
 8000d18:	69ba      	ldr	r2, [r7, #24]
 8000d1a:	4313      	orrs	r3, r2
 8000d1c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	69ba      	ldr	r2, [r7, #24]
 8000d22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	f000 80b4 	beq.w	8000e9a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d32:	2300      	movs	r3, #0
 8000d34:	60fb      	str	r3, [r7, #12]
 8000d36:	4b60      	ldr	r3, [pc, #384]	; (8000eb8 <HAL_GPIO_Init+0x30c>)
 8000d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d3a:	4a5f      	ldr	r2, [pc, #380]	; (8000eb8 <HAL_GPIO_Init+0x30c>)
 8000d3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d40:	6453      	str	r3, [r2, #68]	; 0x44
 8000d42:	4b5d      	ldr	r3, [pc, #372]	; (8000eb8 <HAL_GPIO_Init+0x30c>)
 8000d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d4a:	60fb      	str	r3, [r7, #12]
 8000d4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d4e:	4a5b      	ldr	r2, [pc, #364]	; (8000ebc <HAL_GPIO_Init+0x310>)
 8000d50:	69fb      	ldr	r3, [r7, #28]
 8000d52:	089b      	lsrs	r3, r3, #2
 8000d54:	3302      	adds	r3, #2
 8000d56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d5c:	69fb      	ldr	r3, [r7, #28]
 8000d5e:	f003 0303 	and.w	r3, r3, #3
 8000d62:	009b      	lsls	r3, r3, #2
 8000d64:	220f      	movs	r2, #15
 8000d66:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6a:	43db      	mvns	r3, r3
 8000d6c:	69ba      	ldr	r2, [r7, #24]
 8000d6e:	4013      	ands	r3, r2
 8000d70:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	4a52      	ldr	r2, [pc, #328]	; (8000ec0 <HAL_GPIO_Init+0x314>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d02b      	beq.n	8000dd2 <HAL_GPIO_Init+0x226>
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	4a51      	ldr	r2, [pc, #324]	; (8000ec4 <HAL_GPIO_Init+0x318>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d025      	beq.n	8000dce <HAL_GPIO_Init+0x222>
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	4a50      	ldr	r2, [pc, #320]	; (8000ec8 <HAL_GPIO_Init+0x31c>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d01f      	beq.n	8000dca <HAL_GPIO_Init+0x21e>
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	4a4f      	ldr	r2, [pc, #316]	; (8000ecc <HAL_GPIO_Init+0x320>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d019      	beq.n	8000dc6 <HAL_GPIO_Init+0x21a>
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	4a4e      	ldr	r2, [pc, #312]	; (8000ed0 <HAL_GPIO_Init+0x324>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d013      	beq.n	8000dc2 <HAL_GPIO_Init+0x216>
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	4a4d      	ldr	r2, [pc, #308]	; (8000ed4 <HAL_GPIO_Init+0x328>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d00d      	beq.n	8000dbe <HAL_GPIO_Init+0x212>
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	4a4c      	ldr	r2, [pc, #304]	; (8000ed8 <HAL_GPIO_Init+0x32c>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d007      	beq.n	8000dba <HAL_GPIO_Init+0x20e>
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	4a4b      	ldr	r2, [pc, #300]	; (8000edc <HAL_GPIO_Init+0x330>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d101      	bne.n	8000db6 <HAL_GPIO_Init+0x20a>
 8000db2:	2307      	movs	r3, #7
 8000db4:	e00e      	b.n	8000dd4 <HAL_GPIO_Init+0x228>
 8000db6:	2308      	movs	r3, #8
 8000db8:	e00c      	b.n	8000dd4 <HAL_GPIO_Init+0x228>
 8000dba:	2306      	movs	r3, #6
 8000dbc:	e00a      	b.n	8000dd4 <HAL_GPIO_Init+0x228>
 8000dbe:	2305      	movs	r3, #5
 8000dc0:	e008      	b.n	8000dd4 <HAL_GPIO_Init+0x228>
 8000dc2:	2304      	movs	r3, #4
 8000dc4:	e006      	b.n	8000dd4 <HAL_GPIO_Init+0x228>
 8000dc6:	2303      	movs	r3, #3
 8000dc8:	e004      	b.n	8000dd4 <HAL_GPIO_Init+0x228>
 8000dca:	2302      	movs	r3, #2
 8000dcc:	e002      	b.n	8000dd4 <HAL_GPIO_Init+0x228>
 8000dce:	2301      	movs	r3, #1
 8000dd0:	e000      	b.n	8000dd4 <HAL_GPIO_Init+0x228>
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	69fa      	ldr	r2, [r7, #28]
 8000dd6:	f002 0203 	and.w	r2, r2, #3
 8000dda:	0092      	lsls	r2, r2, #2
 8000ddc:	4093      	lsls	r3, r2
 8000dde:	69ba      	ldr	r2, [r7, #24]
 8000de0:	4313      	orrs	r3, r2
 8000de2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000de4:	4935      	ldr	r1, [pc, #212]	; (8000ebc <HAL_GPIO_Init+0x310>)
 8000de6:	69fb      	ldr	r3, [r7, #28]
 8000de8:	089b      	lsrs	r3, r3, #2
 8000dea:	3302      	adds	r3, #2
 8000dec:	69ba      	ldr	r2, [r7, #24]
 8000dee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000df2:	4b3b      	ldr	r3, [pc, #236]	; (8000ee0 <HAL_GPIO_Init+0x334>)
 8000df4:	689b      	ldr	r3, [r3, #8]
 8000df6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000df8:	693b      	ldr	r3, [r7, #16]
 8000dfa:	43db      	mvns	r3, r3
 8000dfc:	69ba      	ldr	r2, [r7, #24]
 8000dfe:	4013      	ands	r3, r2
 8000e00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d003      	beq.n	8000e16 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000e0e:	69ba      	ldr	r2, [r7, #24]
 8000e10:	693b      	ldr	r3, [r7, #16]
 8000e12:	4313      	orrs	r3, r2
 8000e14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e16:	4a32      	ldr	r2, [pc, #200]	; (8000ee0 <HAL_GPIO_Init+0x334>)
 8000e18:	69bb      	ldr	r3, [r7, #24]
 8000e1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e1c:	4b30      	ldr	r3, [pc, #192]	; (8000ee0 <HAL_GPIO_Init+0x334>)
 8000e1e:	68db      	ldr	r3, [r3, #12]
 8000e20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e22:	693b      	ldr	r3, [r7, #16]
 8000e24:	43db      	mvns	r3, r3
 8000e26:	69ba      	ldr	r2, [r7, #24]
 8000e28:	4013      	ands	r3, r2
 8000e2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d003      	beq.n	8000e40 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000e38:	69ba      	ldr	r2, [r7, #24]
 8000e3a:	693b      	ldr	r3, [r7, #16]
 8000e3c:	4313      	orrs	r3, r2
 8000e3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e40:	4a27      	ldr	r2, [pc, #156]	; (8000ee0 <HAL_GPIO_Init+0x334>)
 8000e42:	69bb      	ldr	r3, [r7, #24]
 8000e44:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000e46:	4b26      	ldr	r3, [pc, #152]	; (8000ee0 <HAL_GPIO_Init+0x334>)
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e4c:	693b      	ldr	r3, [r7, #16]
 8000e4e:	43db      	mvns	r3, r3
 8000e50:	69ba      	ldr	r2, [r7, #24]
 8000e52:	4013      	ands	r3, r2
 8000e54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	685b      	ldr	r3, [r3, #4]
 8000e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d003      	beq.n	8000e6a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000e62:	69ba      	ldr	r2, [r7, #24]
 8000e64:	693b      	ldr	r3, [r7, #16]
 8000e66:	4313      	orrs	r3, r2
 8000e68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e6a:	4a1d      	ldr	r2, [pc, #116]	; (8000ee0 <HAL_GPIO_Init+0x334>)
 8000e6c:	69bb      	ldr	r3, [r7, #24]
 8000e6e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e70:	4b1b      	ldr	r3, [pc, #108]	; (8000ee0 <HAL_GPIO_Init+0x334>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e76:	693b      	ldr	r3, [r7, #16]
 8000e78:	43db      	mvns	r3, r3
 8000e7a:	69ba      	ldr	r2, [r7, #24]
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d003      	beq.n	8000e94 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000e8c:	69ba      	ldr	r2, [r7, #24]
 8000e8e:	693b      	ldr	r3, [r7, #16]
 8000e90:	4313      	orrs	r3, r2
 8000e92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e94:	4a12      	ldr	r2, [pc, #72]	; (8000ee0 <HAL_GPIO_Init+0x334>)
 8000e96:	69bb      	ldr	r3, [r7, #24]
 8000e98:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e9a:	69fb      	ldr	r3, [r7, #28]
 8000e9c:	3301      	adds	r3, #1
 8000e9e:	61fb      	str	r3, [r7, #28]
 8000ea0:	69fb      	ldr	r3, [r7, #28]
 8000ea2:	2b0f      	cmp	r3, #15
 8000ea4:	f67f ae90 	bls.w	8000bc8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000ea8:	bf00      	nop
 8000eaa:	bf00      	nop
 8000eac:	3724      	adds	r7, #36	; 0x24
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	40023800 	.word	0x40023800
 8000ebc:	40013800 	.word	0x40013800
 8000ec0:	40020000 	.word	0x40020000
 8000ec4:	40020400 	.word	0x40020400
 8000ec8:	40020800 	.word	0x40020800
 8000ecc:	40020c00 	.word	0x40020c00
 8000ed0:	40021000 	.word	0x40021000
 8000ed4:	40021400 	.word	0x40021400
 8000ed8:	40021800 	.word	0x40021800
 8000edc:	40021c00 	.word	0x40021c00
 8000ee0:	40013c00 	.word	0x40013c00

08000ee4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b085      	sub	sp, #20
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	460b      	mov	r3, r1
 8000eee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	691a      	ldr	r2, [r3, #16]
 8000ef4:	887b      	ldrh	r3, [r7, #2]
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d002      	beq.n	8000f02 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000efc:	2301      	movs	r3, #1
 8000efe:	73fb      	strb	r3, [r7, #15]
 8000f00:	e001      	b.n	8000f06 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000f02:	2300      	movs	r3, #0
 8000f04:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000f06:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	3714      	adds	r7, #20
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr

08000f14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
 8000f1c:	460b      	mov	r3, r1
 8000f1e:	807b      	strh	r3, [r7, #2]
 8000f20:	4613      	mov	r3, r2
 8000f22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f24:	787b      	ldrb	r3, [r7, #1]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d003      	beq.n	8000f32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f2a:	887a      	ldrh	r2, [r7, #2]
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000f30:	e003      	b.n	8000f3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000f32:	887b      	ldrh	r3, [r7, #2]
 8000f34:	041a      	lsls	r2, r3, #16
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	619a      	str	r2, [r3, #24]
}
 8000f3a:	bf00      	nop
 8000f3c:	370c      	adds	r7, #12
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr

08000f46 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000f46:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f48:	b08f      	sub	sp, #60	; 0x3c
 8000f4a:	af0a      	add	r7, sp, #40	; 0x28
 8000f4c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d101      	bne.n	8000f58 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000f54:	2301      	movs	r3, #1
 8000f56:	e10f      	b.n	8001178 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d106      	bne.n	8000f78 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000f72:	6878      	ldr	r0, [r7, #4]
 8000f74:	f005 fc92 	bl	800689c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2203      	movs	r2, #3
 8000f7c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000f80:	68bb      	ldr	r3, [r7, #8]
 8000f82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d102      	bne.n	8000f92 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2200      	movs	r2, #0
 8000f90:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4618      	mov	r0, r3
 8000f98:	f001 ffd7 	bl	8002f4a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	603b      	str	r3, [r7, #0]
 8000fa2:	687e      	ldr	r6, [r7, #4]
 8000fa4:	466d      	mov	r5, sp
 8000fa6:	f106 0410 	add.w	r4, r6, #16
 8000faa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fb0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fb2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000fb6:	e885 0003 	stmia.w	r5, {r0, r1}
 8000fba:	1d33      	adds	r3, r6, #4
 8000fbc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000fbe:	6838      	ldr	r0, [r7, #0]
 8000fc0:	f001 feae 	bl	8002d20 <USB_CoreInit>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d005      	beq.n	8000fd6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2202      	movs	r2, #2
 8000fce:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	e0d0      	b.n	8001178 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	2100      	movs	r1, #0
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f001 ffc5 	bl	8002f6c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	73fb      	strb	r3, [r7, #15]
 8000fe6:	e04a      	b.n	800107e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000fe8:	7bfa      	ldrb	r2, [r7, #15]
 8000fea:	6879      	ldr	r1, [r7, #4]
 8000fec:	4613      	mov	r3, r2
 8000fee:	00db      	lsls	r3, r3, #3
 8000ff0:	4413      	add	r3, r2
 8000ff2:	009b      	lsls	r3, r3, #2
 8000ff4:	440b      	add	r3, r1
 8000ff6:	333d      	adds	r3, #61	; 0x3d
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000ffc:	7bfa      	ldrb	r2, [r7, #15]
 8000ffe:	6879      	ldr	r1, [r7, #4]
 8001000:	4613      	mov	r3, r2
 8001002:	00db      	lsls	r3, r3, #3
 8001004:	4413      	add	r3, r2
 8001006:	009b      	lsls	r3, r3, #2
 8001008:	440b      	add	r3, r1
 800100a:	333c      	adds	r3, #60	; 0x3c
 800100c:	7bfa      	ldrb	r2, [r7, #15]
 800100e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001010:	7bfa      	ldrb	r2, [r7, #15]
 8001012:	7bfb      	ldrb	r3, [r7, #15]
 8001014:	b298      	uxth	r0, r3
 8001016:	6879      	ldr	r1, [r7, #4]
 8001018:	4613      	mov	r3, r2
 800101a:	00db      	lsls	r3, r3, #3
 800101c:	4413      	add	r3, r2
 800101e:	009b      	lsls	r3, r3, #2
 8001020:	440b      	add	r3, r1
 8001022:	3344      	adds	r3, #68	; 0x44
 8001024:	4602      	mov	r2, r0
 8001026:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001028:	7bfa      	ldrb	r2, [r7, #15]
 800102a:	6879      	ldr	r1, [r7, #4]
 800102c:	4613      	mov	r3, r2
 800102e:	00db      	lsls	r3, r3, #3
 8001030:	4413      	add	r3, r2
 8001032:	009b      	lsls	r3, r3, #2
 8001034:	440b      	add	r3, r1
 8001036:	3340      	adds	r3, #64	; 0x40
 8001038:	2200      	movs	r2, #0
 800103a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800103c:	7bfa      	ldrb	r2, [r7, #15]
 800103e:	6879      	ldr	r1, [r7, #4]
 8001040:	4613      	mov	r3, r2
 8001042:	00db      	lsls	r3, r3, #3
 8001044:	4413      	add	r3, r2
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	440b      	add	r3, r1
 800104a:	3348      	adds	r3, #72	; 0x48
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001050:	7bfa      	ldrb	r2, [r7, #15]
 8001052:	6879      	ldr	r1, [r7, #4]
 8001054:	4613      	mov	r3, r2
 8001056:	00db      	lsls	r3, r3, #3
 8001058:	4413      	add	r3, r2
 800105a:	009b      	lsls	r3, r3, #2
 800105c:	440b      	add	r3, r1
 800105e:	334c      	adds	r3, #76	; 0x4c
 8001060:	2200      	movs	r2, #0
 8001062:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001064:	7bfa      	ldrb	r2, [r7, #15]
 8001066:	6879      	ldr	r1, [r7, #4]
 8001068:	4613      	mov	r3, r2
 800106a:	00db      	lsls	r3, r3, #3
 800106c:	4413      	add	r3, r2
 800106e:	009b      	lsls	r3, r3, #2
 8001070:	440b      	add	r3, r1
 8001072:	3354      	adds	r3, #84	; 0x54
 8001074:	2200      	movs	r2, #0
 8001076:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001078:	7bfb      	ldrb	r3, [r7, #15]
 800107a:	3301      	adds	r3, #1
 800107c:	73fb      	strb	r3, [r7, #15]
 800107e:	7bfa      	ldrb	r2, [r7, #15]
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	429a      	cmp	r2, r3
 8001086:	d3af      	bcc.n	8000fe8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001088:	2300      	movs	r3, #0
 800108a:	73fb      	strb	r3, [r7, #15]
 800108c:	e044      	b.n	8001118 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800108e:	7bfa      	ldrb	r2, [r7, #15]
 8001090:	6879      	ldr	r1, [r7, #4]
 8001092:	4613      	mov	r3, r2
 8001094:	00db      	lsls	r3, r3, #3
 8001096:	4413      	add	r3, r2
 8001098:	009b      	lsls	r3, r3, #2
 800109a:	440b      	add	r3, r1
 800109c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80010a0:	2200      	movs	r2, #0
 80010a2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80010a4:	7bfa      	ldrb	r2, [r7, #15]
 80010a6:	6879      	ldr	r1, [r7, #4]
 80010a8:	4613      	mov	r3, r2
 80010aa:	00db      	lsls	r3, r3, #3
 80010ac:	4413      	add	r3, r2
 80010ae:	009b      	lsls	r3, r3, #2
 80010b0:	440b      	add	r3, r1
 80010b2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80010b6:	7bfa      	ldrb	r2, [r7, #15]
 80010b8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80010ba:	7bfa      	ldrb	r2, [r7, #15]
 80010bc:	6879      	ldr	r1, [r7, #4]
 80010be:	4613      	mov	r3, r2
 80010c0:	00db      	lsls	r3, r3, #3
 80010c2:	4413      	add	r3, r2
 80010c4:	009b      	lsls	r3, r3, #2
 80010c6:	440b      	add	r3, r1
 80010c8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80010cc:	2200      	movs	r2, #0
 80010ce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80010d0:	7bfa      	ldrb	r2, [r7, #15]
 80010d2:	6879      	ldr	r1, [r7, #4]
 80010d4:	4613      	mov	r3, r2
 80010d6:	00db      	lsls	r3, r3, #3
 80010d8:	4413      	add	r3, r2
 80010da:	009b      	lsls	r3, r3, #2
 80010dc:	440b      	add	r3, r1
 80010de:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80010e2:	2200      	movs	r2, #0
 80010e4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80010e6:	7bfa      	ldrb	r2, [r7, #15]
 80010e8:	6879      	ldr	r1, [r7, #4]
 80010ea:	4613      	mov	r3, r2
 80010ec:	00db      	lsls	r3, r3, #3
 80010ee:	4413      	add	r3, r2
 80010f0:	009b      	lsls	r3, r3, #2
 80010f2:	440b      	add	r3, r1
 80010f4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80010fc:	7bfa      	ldrb	r2, [r7, #15]
 80010fe:	6879      	ldr	r1, [r7, #4]
 8001100:	4613      	mov	r3, r2
 8001102:	00db      	lsls	r3, r3, #3
 8001104:	4413      	add	r3, r2
 8001106:	009b      	lsls	r3, r3, #2
 8001108:	440b      	add	r3, r1
 800110a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800110e:	2200      	movs	r2, #0
 8001110:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001112:	7bfb      	ldrb	r3, [r7, #15]
 8001114:	3301      	adds	r3, #1
 8001116:	73fb      	strb	r3, [r7, #15]
 8001118:	7bfa      	ldrb	r2, [r7, #15]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	429a      	cmp	r2, r3
 8001120:	d3b5      	bcc.n	800108e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	603b      	str	r3, [r7, #0]
 8001128:	687e      	ldr	r6, [r7, #4]
 800112a:	466d      	mov	r5, sp
 800112c:	f106 0410 	add.w	r4, r6, #16
 8001130:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001132:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001134:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001136:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001138:	e894 0003 	ldmia.w	r4, {r0, r1}
 800113c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001140:	1d33      	adds	r3, r6, #4
 8001142:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001144:	6838      	ldr	r0, [r7, #0]
 8001146:	f001 ff5d 	bl	8003004 <USB_DevInit>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d005      	beq.n	800115c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2202      	movs	r2, #2
 8001154:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001158:	2301      	movs	r3, #1
 800115a:	e00d      	b.n	8001178 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2200      	movs	r2, #0
 8001160:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2201      	movs	r2, #1
 8001168:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4618      	mov	r0, r3
 8001172:	f003 f8ac 	bl	80042ce <USB_DevDisconnect>

  return HAL_OK;
 8001176:	2300      	movs	r3, #0
}
 8001178:	4618      	mov	r0, r3
 800117a:	3714      	adds	r7, #20
 800117c:	46bd      	mov	sp, r7
 800117e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001180 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001194:	2b01      	cmp	r3, #1
 8001196:	d101      	bne.n	800119c <HAL_PCD_Start+0x1c>
 8001198:	2302      	movs	r3, #2
 800119a:	e020      	b.n	80011de <HAL_PCD_Start+0x5e>
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2201      	movs	r2, #1
 80011a0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011a8:	2b01      	cmp	r3, #1
 80011aa:	d109      	bne.n	80011c0 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80011b0:	2b01      	cmp	r3, #1
 80011b2:	d005      	beq.n	80011c0 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011b8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4618      	mov	r0, r3
 80011c6:	f001 feaf 	bl	8002f28 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4618      	mov	r0, r3
 80011d0:	f003 f85c 	bl	800428c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2200      	movs	r2, #0
 80011d8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80011dc:	2300      	movs	r3, #0
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3710      	adds	r7, #16
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}

080011e6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80011e6:	b590      	push	{r4, r7, lr}
 80011e8:	b08d      	sub	sp, #52	; 0x34
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80011f4:	6a3b      	ldr	r3, [r7, #32]
 80011f6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4618      	mov	r0, r3
 80011fe:	f003 f91a 	bl	8004436 <USB_GetMode>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	f040 848a 	bne.w	8001b1e <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4618      	mov	r0, r3
 8001210:	f003 f87e 	bl	8004310 <USB_ReadInterrupts>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	f000 8480 	beq.w	8001b1c <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001222:	689b      	ldr	r3, [r3, #8]
 8001224:	0a1b      	lsrs	r3, r3, #8
 8001226:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4618      	mov	r0, r3
 8001236:	f003 f86b 	bl	8004310 <USB_ReadInterrupts>
 800123a:	4603      	mov	r3, r0
 800123c:	f003 0302 	and.w	r3, r3, #2
 8001240:	2b02      	cmp	r3, #2
 8001242:	d107      	bne.n	8001254 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	695a      	ldr	r2, [r3, #20]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f002 0202 	and.w	r2, r2, #2
 8001252:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4618      	mov	r0, r3
 800125a:	f003 f859 	bl	8004310 <USB_ReadInterrupts>
 800125e:	4603      	mov	r3, r0
 8001260:	f003 0310 	and.w	r3, r3, #16
 8001264:	2b10      	cmp	r3, #16
 8001266:	d161      	bne.n	800132c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	699a      	ldr	r2, [r3, #24]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f022 0210 	bic.w	r2, r2, #16
 8001276:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001278:	6a3b      	ldr	r3, [r7, #32]
 800127a:	6a1b      	ldr	r3, [r3, #32]
 800127c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800127e:	69bb      	ldr	r3, [r7, #24]
 8001280:	f003 020f 	and.w	r2, r3, #15
 8001284:	4613      	mov	r3, r2
 8001286:	00db      	lsls	r3, r3, #3
 8001288:	4413      	add	r3, r2
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001290:	687a      	ldr	r2, [r7, #4]
 8001292:	4413      	add	r3, r2
 8001294:	3304      	adds	r3, #4
 8001296:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001298:	69bb      	ldr	r3, [r7, #24]
 800129a:	0c5b      	lsrs	r3, r3, #17
 800129c:	f003 030f 	and.w	r3, r3, #15
 80012a0:	2b02      	cmp	r3, #2
 80012a2:	d124      	bne.n	80012ee <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80012a4:	69ba      	ldr	r2, [r7, #24]
 80012a6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80012aa:	4013      	ands	r3, r2
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d035      	beq.n	800131c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80012b4:	69bb      	ldr	r3, [r7, #24]
 80012b6:	091b      	lsrs	r3, r3, #4
 80012b8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80012ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012be:	b29b      	uxth	r3, r3
 80012c0:	461a      	mov	r2, r3
 80012c2:	6a38      	ldr	r0, [r7, #32]
 80012c4:	f002 fe90 	bl	8003fe8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	691a      	ldr	r2, [r3, #16]
 80012cc:	69bb      	ldr	r3, [r7, #24]
 80012ce:	091b      	lsrs	r3, r3, #4
 80012d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012d4:	441a      	add	r2, r3
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	6a1a      	ldr	r2, [r3, #32]
 80012de:	69bb      	ldr	r3, [r7, #24]
 80012e0:	091b      	lsrs	r3, r3, #4
 80012e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012e6:	441a      	add	r2, r3
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	621a      	str	r2, [r3, #32]
 80012ec:	e016      	b.n	800131c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80012ee:	69bb      	ldr	r3, [r7, #24]
 80012f0:	0c5b      	lsrs	r3, r3, #17
 80012f2:	f003 030f 	and.w	r3, r3, #15
 80012f6:	2b06      	cmp	r3, #6
 80012f8:	d110      	bne.n	800131c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001300:	2208      	movs	r2, #8
 8001302:	4619      	mov	r1, r3
 8001304:	6a38      	ldr	r0, [r7, #32]
 8001306:	f002 fe6f 	bl	8003fe8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	6a1a      	ldr	r2, [r3, #32]
 800130e:	69bb      	ldr	r3, [r7, #24]
 8001310:	091b      	lsrs	r3, r3, #4
 8001312:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001316:	441a      	add	r2, r3
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	699a      	ldr	r2, [r3, #24]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f042 0210 	orr.w	r2, r2, #16
 800132a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4618      	mov	r0, r3
 8001332:	f002 ffed 	bl	8004310 <USB_ReadInterrupts>
 8001336:	4603      	mov	r3, r0
 8001338:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800133c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001340:	f040 80a7 	bne.w	8001492 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001344:	2300      	movs	r3, #0
 8001346:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4618      	mov	r0, r3
 800134e:	f002 fff2 	bl	8004336 <USB_ReadDevAllOutEpInterrupt>
 8001352:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001354:	e099      	b.n	800148a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001358:	f003 0301 	and.w	r3, r3, #1
 800135c:	2b00      	cmp	r3, #0
 800135e:	f000 808e 	beq.w	800147e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001368:	b2d2      	uxtb	r2, r2
 800136a:	4611      	mov	r1, r2
 800136c:	4618      	mov	r0, r3
 800136e:	f003 f816 	bl	800439e <USB_ReadDevOutEPInterrupt>
 8001372:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	f003 0301 	and.w	r3, r3, #1
 800137a:	2b00      	cmp	r3, #0
 800137c:	d00c      	beq.n	8001398 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800137e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001380:	015a      	lsls	r2, r3, #5
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	4413      	add	r3, r2
 8001386:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800138a:	461a      	mov	r2, r3
 800138c:	2301      	movs	r3, #1
 800138e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001390:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	f000 fec2 	bl	800211c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	f003 0308 	and.w	r3, r3, #8
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d00c      	beq.n	80013bc <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80013a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a4:	015a      	lsls	r2, r3, #5
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	4413      	add	r3, r2
 80013aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80013ae:	461a      	mov	r2, r3
 80013b0:	2308      	movs	r3, #8
 80013b2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80013b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80013b6:	6878      	ldr	r0, [r7, #4]
 80013b8:	f000 ff98 	bl	80022ec <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	f003 0310 	and.w	r3, r3, #16
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d008      	beq.n	80013d8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80013c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c8:	015a      	lsls	r2, r3, #5
 80013ca:	69fb      	ldr	r3, [r7, #28]
 80013cc:	4413      	add	r3, r2
 80013ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80013d2:	461a      	mov	r2, r3
 80013d4:	2310      	movs	r3, #16
 80013d6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	f003 0302 	and.w	r3, r3, #2
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d030      	beq.n	8001444 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80013e2:	6a3b      	ldr	r3, [r7, #32]
 80013e4:	695b      	ldr	r3, [r3, #20]
 80013e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013ea:	2b80      	cmp	r3, #128	; 0x80
 80013ec:	d109      	bne.n	8001402 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	69fa      	ldr	r2, [r7, #28]
 80013f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80013fc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001400:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001402:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001404:	4613      	mov	r3, r2
 8001406:	00db      	lsls	r3, r3, #3
 8001408:	4413      	add	r3, r2
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001410:	687a      	ldr	r2, [r7, #4]
 8001412:	4413      	add	r3, r2
 8001414:	3304      	adds	r3, #4
 8001416:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	78db      	ldrb	r3, [r3, #3]
 800141c:	2b01      	cmp	r3, #1
 800141e:	d108      	bne.n	8001432 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	2200      	movs	r2, #0
 8001424:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001428:	b2db      	uxtb	r3, r3
 800142a:	4619      	mov	r1, r3
 800142c:	6878      	ldr	r0, [r7, #4]
 800142e:	f005 fb3b 	bl	8006aa8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001434:	015a      	lsls	r2, r3, #5
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	4413      	add	r3, r2
 800143a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800143e:	461a      	mov	r2, r3
 8001440:	2302      	movs	r3, #2
 8001442:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	f003 0320 	and.w	r3, r3, #32
 800144a:	2b00      	cmp	r3, #0
 800144c:	d008      	beq.n	8001460 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800144e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001450:	015a      	lsls	r2, r3, #5
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	4413      	add	r3, r2
 8001456:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800145a:	461a      	mov	r2, r3
 800145c:	2320      	movs	r3, #32
 800145e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001466:	2b00      	cmp	r3, #0
 8001468:	d009      	beq.n	800147e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800146a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800146c:	015a      	lsls	r2, r3, #5
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	4413      	add	r3, r2
 8001472:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001476:	461a      	mov	r2, r3
 8001478:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800147c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800147e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001480:	3301      	adds	r3, #1
 8001482:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001486:	085b      	lsrs	r3, r3, #1
 8001488:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800148a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800148c:	2b00      	cmp	r3, #0
 800148e:	f47f af62 	bne.w	8001356 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4618      	mov	r0, r3
 8001498:	f002 ff3a 	bl	8004310 <USB_ReadInterrupts>
 800149c:	4603      	mov	r3, r0
 800149e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014a2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80014a6:	f040 80db 	bne.w	8001660 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4618      	mov	r0, r3
 80014b0:	f002 ff5b 	bl	800436a <USB_ReadDevAllInEpInterrupt>
 80014b4:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80014b6:	2300      	movs	r3, #0
 80014b8:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80014ba:	e0cd      	b.n	8001658 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80014bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014be:	f003 0301 	and.w	r3, r3, #1
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	f000 80c2 	beq.w	800164c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014ce:	b2d2      	uxtb	r2, r2
 80014d0:	4611      	mov	r1, r2
 80014d2:	4618      	mov	r0, r3
 80014d4:	f002 ff81 	bl	80043da <USB_ReadDevInEPInterrupt>
 80014d8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	f003 0301 	and.w	r3, r3, #1
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d057      	beq.n	8001594 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80014e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e6:	f003 030f 	and.w	r3, r3, #15
 80014ea:	2201      	movs	r2, #1
 80014ec:	fa02 f303 	lsl.w	r3, r2, r3
 80014f0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80014f2:	69fb      	ldr	r3, [r7, #28]
 80014f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80014f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	43db      	mvns	r3, r3
 80014fe:	69f9      	ldr	r1, [r7, #28]
 8001500:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001504:	4013      	ands	r3, r2
 8001506:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800150a:	015a      	lsls	r2, r3, #5
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	4413      	add	r3, r2
 8001510:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001514:	461a      	mov	r2, r3
 8001516:	2301      	movs	r3, #1
 8001518:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	691b      	ldr	r3, [r3, #16]
 800151e:	2b01      	cmp	r3, #1
 8001520:	d132      	bne.n	8001588 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001522:	6879      	ldr	r1, [r7, #4]
 8001524:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001526:	4613      	mov	r3, r2
 8001528:	00db      	lsls	r3, r3, #3
 800152a:	4413      	add	r3, r2
 800152c:	009b      	lsls	r3, r3, #2
 800152e:	440b      	add	r3, r1
 8001530:	334c      	adds	r3, #76	; 0x4c
 8001532:	6819      	ldr	r1, [r3, #0]
 8001534:	6878      	ldr	r0, [r7, #4]
 8001536:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001538:	4613      	mov	r3, r2
 800153a:	00db      	lsls	r3, r3, #3
 800153c:	4413      	add	r3, r2
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	4403      	add	r3, r0
 8001542:	3348      	adds	r3, #72	; 0x48
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4419      	add	r1, r3
 8001548:	6878      	ldr	r0, [r7, #4]
 800154a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800154c:	4613      	mov	r3, r2
 800154e:	00db      	lsls	r3, r3, #3
 8001550:	4413      	add	r3, r2
 8001552:	009b      	lsls	r3, r3, #2
 8001554:	4403      	add	r3, r0
 8001556:	334c      	adds	r3, #76	; 0x4c
 8001558:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800155a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800155c:	2b00      	cmp	r3, #0
 800155e:	d113      	bne.n	8001588 <HAL_PCD_IRQHandler+0x3a2>
 8001560:	6879      	ldr	r1, [r7, #4]
 8001562:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001564:	4613      	mov	r3, r2
 8001566:	00db      	lsls	r3, r3, #3
 8001568:	4413      	add	r3, r2
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	440b      	add	r3, r1
 800156e:	3354      	adds	r3, #84	; 0x54
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d108      	bne.n	8001588 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6818      	ldr	r0, [r3, #0]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001580:	461a      	mov	r2, r3
 8001582:	2101      	movs	r1, #1
 8001584:	f002 ff88 	bl	8004498 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800158a:	b2db      	uxtb	r3, r3
 800158c:	4619      	mov	r1, r3
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	f005 fa05 	bl	800699e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	f003 0308 	and.w	r3, r3, #8
 800159a:	2b00      	cmp	r3, #0
 800159c:	d008      	beq.n	80015b0 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800159e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a0:	015a      	lsls	r2, r3, #5
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	4413      	add	r3, r2
 80015a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015aa:	461a      	mov	r2, r3
 80015ac:	2308      	movs	r3, #8
 80015ae:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	f003 0310 	and.w	r3, r3, #16
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d008      	beq.n	80015cc <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80015ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015bc:	015a      	lsls	r2, r3, #5
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	4413      	add	r3, r2
 80015c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015c6:	461a      	mov	r2, r3
 80015c8:	2310      	movs	r3, #16
 80015ca:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d008      	beq.n	80015e8 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80015d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d8:	015a      	lsls	r2, r3, #5
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	4413      	add	r3, r2
 80015de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015e2:	461a      	mov	r2, r3
 80015e4:	2340      	movs	r3, #64	; 0x40
 80015e6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	f003 0302 	and.w	r3, r3, #2
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d023      	beq.n	800163a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80015f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80015f4:	6a38      	ldr	r0, [r7, #32]
 80015f6:	f001 fe69 	bl	80032cc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80015fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015fc:	4613      	mov	r3, r2
 80015fe:	00db      	lsls	r3, r3, #3
 8001600:	4413      	add	r3, r2
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	3338      	adds	r3, #56	; 0x38
 8001606:	687a      	ldr	r2, [r7, #4]
 8001608:	4413      	add	r3, r2
 800160a:	3304      	adds	r3, #4
 800160c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	78db      	ldrb	r3, [r3, #3]
 8001612:	2b01      	cmp	r3, #1
 8001614:	d108      	bne.n	8001628 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	2200      	movs	r2, #0
 800161a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800161c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800161e:	b2db      	uxtb	r3, r3
 8001620:	4619      	mov	r1, r3
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	f005 fa52 	bl	8006acc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800162a:	015a      	lsls	r2, r3, #5
 800162c:	69fb      	ldr	r3, [r7, #28]
 800162e:	4413      	add	r3, r2
 8001630:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001634:	461a      	mov	r2, r3
 8001636:	2302      	movs	r3, #2
 8001638:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001640:	2b00      	cmp	r3, #0
 8001642:	d003      	beq.n	800164c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001644:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001646:	6878      	ldr	r0, [r7, #4]
 8001648:	f000 fcdb 	bl	8002002 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800164c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800164e:	3301      	adds	r3, #1
 8001650:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001654:	085b      	lsrs	r3, r3, #1
 8001656:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800165a:	2b00      	cmp	r3, #0
 800165c:	f47f af2e 	bne.w	80014bc <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4618      	mov	r0, r3
 8001666:	f002 fe53 	bl	8004310 <USB_ReadInterrupts>
 800166a:	4603      	mov	r3, r0
 800166c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001670:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001674:	d122      	bne.n	80016bc <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	69fa      	ldr	r2, [r7, #28]
 8001680:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001684:	f023 0301 	bic.w	r3, r3, #1
 8001688:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001690:	2b01      	cmp	r3, #1
 8001692:	d108      	bne.n	80016a6 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2200      	movs	r2, #0
 8001698:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800169c:	2100      	movs	r1, #0
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	f000 fec2 	bl	8002428 <HAL_PCDEx_LPM_Callback>
 80016a4:	e002      	b.n	80016ac <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80016a6:	6878      	ldr	r0, [r7, #4]
 80016a8:	f005 f9f0 	bl	8006a8c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	695a      	ldr	r2, [r3, #20]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80016ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4618      	mov	r0, r3
 80016c2:	f002 fe25 	bl	8004310 <USB_ReadInterrupts>
 80016c6:	4603      	mov	r3, r0
 80016c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80016d0:	d112      	bne.n	80016f8 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	f003 0301 	and.w	r3, r3, #1
 80016de:	2b01      	cmp	r3, #1
 80016e0:	d102      	bne.n	80016e8 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	f005 f9ac 	bl	8006a40 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	695a      	ldr	r2, [r3, #20]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80016f6:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4618      	mov	r0, r3
 80016fe:	f002 fe07 	bl	8004310 <USB_ReadInterrupts>
 8001702:	4603      	mov	r3, r0
 8001704:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001708:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800170c:	f040 80b7 	bne.w	800187e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001710:	69fb      	ldr	r3, [r7, #28]
 8001712:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	69fa      	ldr	r2, [r7, #28]
 800171a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800171e:	f023 0301 	bic.w	r3, r3, #1
 8001722:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	2110      	movs	r1, #16
 800172a:	4618      	mov	r0, r3
 800172c:	f001 fdce 	bl	80032cc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001730:	2300      	movs	r3, #0
 8001732:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001734:	e046      	b.n	80017c4 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001738:	015a      	lsls	r2, r3, #5
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	4413      	add	r3, r2
 800173e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001742:	461a      	mov	r2, r3
 8001744:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001748:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800174a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800174c:	015a      	lsls	r2, r3, #5
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	4413      	add	r3, r2
 8001752:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800175a:	0151      	lsls	r1, r2, #5
 800175c:	69fa      	ldr	r2, [r7, #28]
 800175e:	440a      	add	r2, r1
 8001760:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001764:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001768:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800176a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800176c:	015a      	lsls	r2, r3, #5
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	4413      	add	r3, r2
 8001772:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001776:	461a      	mov	r2, r3
 8001778:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800177c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800177e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001780:	015a      	lsls	r2, r3, #5
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	4413      	add	r3, r2
 8001786:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800178e:	0151      	lsls	r1, r2, #5
 8001790:	69fa      	ldr	r2, [r7, #28]
 8001792:	440a      	add	r2, r1
 8001794:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001798:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800179c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800179e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017a0:	015a      	lsls	r2, r3, #5
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	4413      	add	r3, r2
 80017a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017ae:	0151      	lsls	r1, r2, #5
 80017b0:	69fa      	ldr	r2, [r7, #28]
 80017b2:	440a      	add	r2, r1
 80017b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80017b8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80017bc:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017c0:	3301      	adds	r3, #1
 80017c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017ca:	429a      	cmp	r2, r3
 80017cc:	d3b3      	bcc.n	8001736 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017d4:	69db      	ldr	r3, [r3, #28]
 80017d6:	69fa      	ldr	r2, [r7, #28]
 80017d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017dc:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80017e0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d016      	beq.n	8001818 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80017f4:	69fa      	ldr	r2, [r7, #28]
 80017f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017fa:	f043 030b 	orr.w	r3, r3, #11
 80017fe:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800180a:	69fa      	ldr	r2, [r7, #28]
 800180c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001810:	f043 030b 	orr.w	r3, r3, #11
 8001814:	6453      	str	r3, [r2, #68]	; 0x44
 8001816:	e015      	b.n	8001844 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001818:	69fb      	ldr	r3, [r7, #28]
 800181a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800181e:	695b      	ldr	r3, [r3, #20]
 8001820:	69fa      	ldr	r2, [r7, #28]
 8001822:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001826:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800182a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800182e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001836:	691b      	ldr	r3, [r3, #16]
 8001838:	69fa      	ldr	r2, [r7, #28]
 800183a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800183e:	f043 030b 	orr.w	r3, r3, #11
 8001842:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001844:	69fb      	ldr	r3, [r7, #28]
 8001846:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	69fa      	ldr	r2, [r7, #28]
 800184e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001852:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001856:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6818      	ldr	r0, [r3, #0]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	691b      	ldr	r3, [r3, #16]
 8001860:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001868:	461a      	mov	r2, r3
 800186a:	f002 fe15 	bl	8004498 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	695a      	ldr	r2, [r3, #20]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800187c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4618      	mov	r0, r3
 8001884:	f002 fd44 	bl	8004310 <USB_ReadInterrupts>
 8001888:	4603      	mov	r3, r0
 800188a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800188e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001892:	d124      	bne.n	80018de <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4618      	mov	r0, r3
 800189a:	f002 fdda 	bl	8004452 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4618      	mov	r0, r3
 80018a4:	f001 fd8f 	bl	80033c6 <USB_GetDevSpeed>
 80018a8:	4603      	mov	r3, r0
 80018aa:	461a      	mov	r2, r3
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681c      	ldr	r4, [r3, #0]
 80018b4:	f001 fa28 	bl	8002d08 <HAL_RCC_GetHCLKFreq>
 80018b8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80018be:	b2db      	uxtb	r3, r3
 80018c0:	461a      	mov	r2, r3
 80018c2:	4620      	mov	r0, r4
 80018c4:	f001 fa8e 	bl	8002de4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80018c8:	6878      	ldr	r0, [r7, #4]
 80018ca:	f005 f890 	bl	80069ee <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	695a      	ldr	r2, [r3, #20]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80018dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4618      	mov	r0, r3
 80018e4:	f002 fd14 	bl	8004310 <USB_ReadInterrupts>
 80018e8:	4603      	mov	r3, r0
 80018ea:	f003 0308 	and.w	r3, r3, #8
 80018ee:	2b08      	cmp	r3, #8
 80018f0:	d10a      	bne.n	8001908 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	f005 f86d 	bl	80069d2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	695a      	ldr	r2, [r3, #20]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f002 0208 	and.w	r2, r2, #8
 8001906:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4618      	mov	r0, r3
 800190e:	f002 fcff 	bl	8004310 <USB_ReadInterrupts>
 8001912:	4603      	mov	r3, r0
 8001914:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001918:	2b80      	cmp	r3, #128	; 0x80
 800191a:	d122      	bne.n	8001962 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800191c:	6a3b      	ldr	r3, [r7, #32]
 800191e:	699b      	ldr	r3, [r3, #24]
 8001920:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001924:	6a3b      	ldr	r3, [r7, #32]
 8001926:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001928:	2301      	movs	r3, #1
 800192a:	627b      	str	r3, [r7, #36]	; 0x24
 800192c:	e014      	b.n	8001958 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800192e:	6879      	ldr	r1, [r7, #4]
 8001930:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001932:	4613      	mov	r3, r2
 8001934:	00db      	lsls	r3, r3, #3
 8001936:	4413      	add	r3, r2
 8001938:	009b      	lsls	r3, r3, #2
 800193a:	440b      	add	r3, r1
 800193c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	2b01      	cmp	r3, #1
 8001944:	d105      	bne.n	8001952 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001948:	b2db      	uxtb	r3, r3
 800194a:	4619      	mov	r1, r3
 800194c:	6878      	ldr	r0, [r7, #4]
 800194e:	f000 fb27 	bl	8001fa0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001954:	3301      	adds	r3, #1
 8001956:	627b      	str	r3, [r7, #36]	; 0x24
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800195e:	429a      	cmp	r2, r3
 8001960:	d3e5      	bcc.n	800192e <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4618      	mov	r0, r3
 8001968:	f002 fcd2 	bl	8004310 <USB_ReadInterrupts>
 800196c:	4603      	mov	r3, r0
 800196e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001972:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001976:	d13b      	bne.n	80019f0 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001978:	2301      	movs	r3, #1
 800197a:	627b      	str	r3, [r7, #36]	; 0x24
 800197c:	e02b      	b.n	80019d6 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800197e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001980:	015a      	lsls	r2, r3, #5
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	4413      	add	r3, r2
 8001986:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800198e:	6879      	ldr	r1, [r7, #4]
 8001990:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001992:	4613      	mov	r3, r2
 8001994:	00db      	lsls	r3, r3, #3
 8001996:	4413      	add	r3, r2
 8001998:	009b      	lsls	r3, r3, #2
 800199a:	440b      	add	r3, r1
 800199c:	3340      	adds	r3, #64	; 0x40
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d115      	bne.n	80019d0 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80019a4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	da12      	bge.n	80019d0 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80019aa:	6879      	ldr	r1, [r7, #4]
 80019ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019ae:	4613      	mov	r3, r2
 80019b0:	00db      	lsls	r3, r3, #3
 80019b2:	4413      	add	r3, r2
 80019b4:	009b      	lsls	r3, r3, #2
 80019b6:	440b      	add	r3, r1
 80019b8:	333f      	adds	r3, #63	; 0x3f
 80019ba:	2201      	movs	r2, #1
 80019bc:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80019be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80019c6:	b2db      	uxtb	r3, r3
 80019c8:	4619      	mov	r1, r3
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f000 fae8 	bl	8001fa0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80019d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d2:	3301      	adds	r3, #1
 80019d4:	627b      	str	r3, [r7, #36]	; 0x24
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019dc:	429a      	cmp	r2, r3
 80019de:	d3ce      	bcc.n	800197e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	695a      	ldr	r2, [r3, #20]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80019ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4618      	mov	r0, r3
 80019f6:	f002 fc8b 	bl	8004310 <USB_ReadInterrupts>
 80019fa:	4603      	mov	r3, r0
 80019fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a00:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001a04:	d155      	bne.n	8001ab2 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a06:	2301      	movs	r3, #1
 8001a08:	627b      	str	r3, [r7, #36]	; 0x24
 8001a0a:	e045      	b.n	8001a98 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a0e:	015a      	lsls	r2, r3, #5
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	4413      	add	r3, r2
 8001a14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a1c:	6879      	ldr	r1, [r7, #4]
 8001a1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a20:	4613      	mov	r3, r2
 8001a22:	00db      	lsls	r3, r3, #3
 8001a24:	4413      	add	r3, r2
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	440b      	add	r3, r1
 8001a2a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d12e      	bne.n	8001a92 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001a34:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	da2b      	bge.n	8001a92 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001a3a:	69bb      	ldr	r3, [r7, #24]
 8001a3c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001a46:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	d121      	bne.n	8001a92 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001a4e:	6879      	ldr	r1, [r7, #4]
 8001a50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a52:	4613      	mov	r3, r2
 8001a54:	00db      	lsls	r3, r3, #3
 8001a56:	4413      	add	r3, r2
 8001a58:	009b      	lsls	r3, r3, #2
 8001a5a:	440b      	add	r3, r1
 8001a5c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001a60:	2201      	movs	r2, #1
 8001a62:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001a64:	6a3b      	ldr	r3, [r7, #32]
 8001a66:	699b      	ldr	r3, [r3, #24]
 8001a68:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001a6c:	6a3b      	ldr	r3, [r7, #32]
 8001a6e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001a70:	6a3b      	ldr	r3, [r7, #32]
 8001a72:	695b      	ldr	r3, [r3, #20]
 8001a74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d10a      	bne.n	8001a92 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001a7c:	69fb      	ldr	r3, [r7, #28]
 8001a7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	69fa      	ldr	r2, [r7, #28]
 8001a86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a8e:	6053      	str	r3, [r2, #4]
            break;
 8001a90:	e007      	b.n	8001aa2 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a94:	3301      	adds	r3, #1
 8001a96:	627b      	str	r3, [r7, #36]	; 0x24
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a9e:	429a      	cmp	r2, r3
 8001aa0:	d3b4      	bcc.n	8001a0c <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	695a      	ldr	r2, [r3, #20]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001ab0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f002 fc2a 	bl	8004310 <USB_ReadInterrupts>
 8001abc:	4603      	mov	r3, r0
 8001abe:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001ac2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ac6:	d10a      	bne.n	8001ade <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f005 f811 	bl	8006af0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	695a      	ldr	r2, [r3, #20]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001adc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f002 fc14 	bl	8004310 <USB_ReadInterrupts>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	f003 0304 	and.w	r3, r3, #4
 8001aee:	2b04      	cmp	r3, #4
 8001af0:	d115      	bne.n	8001b1e <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001afa:	69bb      	ldr	r3, [r7, #24]
 8001afc:	f003 0304 	and.w	r3, r3, #4
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d002      	beq.n	8001b0a <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	f005 f801 	bl	8006b0c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	6859      	ldr	r1, [r3, #4]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	69ba      	ldr	r2, [r7, #24]
 8001b16:	430a      	orrs	r2, r1
 8001b18:	605a      	str	r2, [r3, #4]
 8001b1a:	e000      	b.n	8001b1e <HAL_PCD_IRQHandler+0x938>
      return;
 8001b1c:	bf00      	nop
    }
  }
}
 8001b1e:	3734      	adds	r7, #52	; 0x34
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd90      	pop	{r4, r7, pc}

08001b24 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
 8001b2c:	460b      	mov	r3, r1
 8001b2e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d101      	bne.n	8001b3e <HAL_PCD_SetAddress+0x1a>
 8001b3a:	2302      	movs	r3, #2
 8001b3c:	e013      	b.n	8001b66 <HAL_PCD_SetAddress+0x42>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2201      	movs	r2, #1
 8001b42:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	78fa      	ldrb	r2, [r7, #3]
 8001b4a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	78fa      	ldrb	r2, [r7, #3]
 8001b54:	4611      	mov	r1, r2
 8001b56:	4618      	mov	r0, r3
 8001b58:	f002 fb72 	bl	8004240 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001b64:	2300      	movs	r3, #0
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3708      	adds	r7, #8
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}

08001b6e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001b6e:	b580      	push	{r7, lr}
 8001b70:	b084      	sub	sp, #16
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	6078      	str	r0, [r7, #4]
 8001b76:	4608      	mov	r0, r1
 8001b78:	4611      	mov	r1, r2
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	70fb      	strb	r3, [r7, #3]
 8001b80:	460b      	mov	r3, r1
 8001b82:	803b      	strh	r3, [r7, #0]
 8001b84:	4613      	mov	r3, r2
 8001b86:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001b8c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	da0f      	bge.n	8001bb4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b94:	78fb      	ldrb	r3, [r7, #3]
 8001b96:	f003 020f 	and.w	r2, r3, #15
 8001b9a:	4613      	mov	r3, r2
 8001b9c:	00db      	lsls	r3, r3, #3
 8001b9e:	4413      	add	r3, r2
 8001ba0:	009b      	lsls	r3, r3, #2
 8001ba2:	3338      	adds	r3, #56	; 0x38
 8001ba4:	687a      	ldr	r2, [r7, #4]
 8001ba6:	4413      	add	r3, r2
 8001ba8:	3304      	adds	r3, #4
 8001baa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	2201      	movs	r2, #1
 8001bb0:	705a      	strb	r2, [r3, #1]
 8001bb2:	e00f      	b.n	8001bd4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001bb4:	78fb      	ldrb	r3, [r7, #3]
 8001bb6:	f003 020f 	and.w	r2, r3, #15
 8001bba:	4613      	mov	r3, r2
 8001bbc:	00db      	lsls	r3, r3, #3
 8001bbe:	4413      	add	r3, r2
 8001bc0:	009b      	lsls	r3, r3, #2
 8001bc2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001bc6:	687a      	ldr	r2, [r7, #4]
 8001bc8:	4413      	add	r3, r2
 8001bca:	3304      	adds	r3, #4
 8001bcc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001bd4:	78fb      	ldrb	r3, [r7, #3]
 8001bd6:	f003 030f 	and.w	r3, r3, #15
 8001bda:	b2da      	uxtb	r2, r3
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001be0:	883a      	ldrh	r2, [r7, #0]
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	78ba      	ldrb	r2, [r7, #2]
 8001bea:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	785b      	ldrb	r3, [r3, #1]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d004      	beq.n	8001bfe <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	b29a      	uxth	r2, r3
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001bfe:	78bb      	ldrb	r3, [r7, #2]
 8001c00:	2b02      	cmp	r3, #2
 8001c02:	d102      	bne.n	8001c0a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	2200      	movs	r2, #0
 8001c08:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d101      	bne.n	8001c18 <HAL_PCD_EP_Open+0xaa>
 8001c14:	2302      	movs	r3, #2
 8001c16:	e00e      	b.n	8001c36 <HAL_PCD_EP_Open+0xc8>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	68f9      	ldr	r1, [r7, #12]
 8001c26:	4618      	mov	r0, r3
 8001c28:	f001 fbf2 	bl	8003410 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8001c34:	7afb      	ldrb	r3, [r7, #11]
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3710      	adds	r7, #16
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}

08001c3e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c3e:	b580      	push	{r7, lr}
 8001c40:	b084      	sub	sp, #16
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	6078      	str	r0, [r7, #4]
 8001c46:	460b      	mov	r3, r1
 8001c48:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001c4a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	da0f      	bge.n	8001c72 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c52:	78fb      	ldrb	r3, [r7, #3]
 8001c54:	f003 020f 	and.w	r2, r3, #15
 8001c58:	4613      	mov	r3, r2
 8001c5a:	00db      	lsls	r3, r3, #3
 8001c5c:	4413      	add	r3, r2
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	3338      	adds	r3, #56	; 0x38
 8001c62:	687a      	ldr	r2, [r7, #4]
 8001c64:	4413      	add	r3, r2
 8001c66:	3304      	adds	r3, #4
 8001c68:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	705a      	strb	r2, [r3, #1]
 8001c70:	e00f      	b.n	8001c92 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c72:	78fb      	ldrb	r3, [r7, #3]
 8001c74:	f003 020f 	and.w	r2, r3, #15
 8001c78:	4613      	mov	r3, r2
 8001c7a:	00db      	lsls	r3, r3, #3
 8001c7c:	4413      	add	r3, r2
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001c84:	687a      	ldr	r2, [r7, #4]
 8001c86:	4413      	add	r3, r2
 8001c88:	3304      	adds	r3, #4
 8001c8a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001c92:	78fb      	ldrb	r3, [r7, #3]
 8001c94:	f003 030f 	and.w	r3, r3, #15
 8001c98:	b2da      	uxtb	r2, r3
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d101      	bne.n	8001cac <HAL_PCD_EP_Close+0x6e>
 8001ca8:	2302      	movs	r3, #2
 8001caa:	e00e      	b.n	8001cca <HAL_PCD_EP_Close+0x8c>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2201      	movs	r2, #1
 8001cb0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	68f9      	ldr	r1, [r7, #12]
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f001 fc30 	bl	8003520 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8001cc8:	2300      	movs	r3, #0
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3710      	adds	r7, #16
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}

08001cd2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001cd2:	b580      	push	{r7, lr}
 8001cd4:	b086      	sub	sp, #24
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	60f8      	str	r0, [r7, #12]
 8001cda:	607a      	str	r2, [r7, #4]
 8001cdc:	603b      	str	r3, [r7, #0]
 8001cde:	460b      	mov	r3, r1
 8001ce0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ce2:	7afb      	ldrb	r3, [r7, #11]
 8001ce4:	f003 020f 	and.w	r2, r3, #15
 8001ce8:	4613      	mov	r3, r2
 8001cea:	00db      	lsls	r3, r3, #3
 8001cec:	4413      	add	r3, r2
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001cf4:	68fa      	ldr	r2, [r7, #12]
 8001cf6:	4413      	add	r3, r2
 8001cf8:	3304      	adds	r3, #4
 8001cfa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	687a      	ldr	r2, [r7, #4]
 8001d00:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	683a      	ldr	r2, [r7, #0]
 8001d06:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	2200      	movs	r2, #0
 8001d12:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d14:	7afb      	ldrb	r3, [r7, #11]
 8001d16:	f003 030f 	and.w	r3, r3, #15
 8001d1a:	b2da      	uxtb	r2, r3
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	691b      	ldr	r3, [r3, #16]
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d102      	bne.n	8001d2e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001d28:	687a      	ldr	r2, [r7, #4]
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001d2e:	7afb      	ldrb	r3, [r7, #11]
 8001d30:	f003 030f 	and.w	r3, r3, #15
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d109      	bne.n	8001d4c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	6818      	ldr	r0, [r3, #0]
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	691b      	ldr	r3, [r3, #16]
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	461a      	mov	r2, r3
 8001d44:	6979      	ldr	r1, [r7, #20]
 8001d46:	f001 ff0f 	bl	8003b68 <USB_EP0StartXfer>
 8001d4a:	e008      	b.n	8001d5e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	6818      	ldr	r0, [r3, #0]
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	691b      	ldr	r3, [r3, #16]
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	461a      	mov	r2, r3
 8001d58:	6979      	ldr	r1, [r7, #20]
 8001d5a:	f001 fcbd 	bl	80036d8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001d5e:	2300      	movs	r3, #0
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3718      	adds	r7, #24
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}

08001d68 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	460b      	mov	r3, r1
 8001d72:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001d74:	78fb      	ldrb	r3, [r7, #3]
 8001d76:	f003 020f 	and.w	r2, r3, #15
 8001d7a:	6879      	ldr	r1, [r7, #4]
 8001d7c:	4613      	mov	r3, r2
 8001d7e:	00db      	lsls	r3, r3, #3
 8001d80:	4413      	add	r3, r2
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	440b      	add	r3, r1
 8001d86:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8001d8a:	681b      	ldr	r3, [r3, #0]
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	370c      	adds	r7, #12
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr

08001d98 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b086      	sub	sp, #24
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	60f8      	str	r0, [r7, #12]
 8001da0:	607a      	str	r2, [r7, #4]
 8001da2:	603b      	str	r3, [r7, #0]
 8001da4:	460b      	mov	r3, r1
 8001da6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001da8:	7afb      	ldrb	r3, [r7, #11]
 8001daa:	f003 020f 	and.w	r2, r3, #15
 8001dae:	4613      	mov	r3, r2
 8001db0:	00db      	lsls	r3, r3, #3
 8001db2:	4413      	add	r3, r2
 8001db4:	009b      	lsls	r3, r3, #2
 8001db6:	3338      	adds	r3, #56	; 0x38
 8001db8:	68fa      	ldr	r2, [r7, #12]
 8001dba:	4413      	add	r3, r2
 8001dbc:	3304      	adds	r3, #4
 8001dbe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	687a      	ldr	r2, [r7, #4]
 8001dc4:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	683a      	ldr	r2, [r7, #0]
 8001dca:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001dd8:	7afb      	ldrb	r3, [r7, #11]
 8001dda:	f003 030f 	and.w	r3, r3, #15
 8001dde:	b2da      	uxtb	r2, r3
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	691b      	ldr	r3, [r3, #16]
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d102      	bne.n	8001df2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001dec:	687a      	ldr	r2, [r7, #4]
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001df2:	7afb      	ldrb	r3, [r7, #11]
 8001df4:	f003 030f 	and.w	r3, r3, #15
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d109      	bne.n	8001e10 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	6818      	ldr	r0, [r3, #0]
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	691b      	ldr	r3, [r3, #16]
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	461a      	mov	r2, r3
 8001e08:	6979      	ldr	r1, [r7, #20]
 8001e0a:	f001 fead 	bl	8003b68 <USB_EP0StartXfer>
 8001e0e:	e008      	b.n	8001e22 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	6818      	ldr	r0, [r3, #0]
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	691b      	ldr	r3, [r3, #16]
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	6979      	ldr	r1, [r7, #20]
 8001e1e:	f001 fc5b 	bl	80036d8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001e22:	2300      	movs	r3, #0
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3718      	adds	r7, #24
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}

08001e2c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b084      	sub	sp, #16
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	460b      	mov	r3, r1
 8001e36:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001e38:	78fb      	ldrb	r3, [r7, #3]
 8001e3a:	f003 020f 	and.w	r2, r3, #15
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	429a      	cmp	r2, r3
 8001e44:	d901      	bls.n	8001e4a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e050      	b.n	8001eec <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001e4a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	da0f      	bge.n	8001e72 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e52:	78fb      	ldrb	r3, [r7, #3]
 8001e54:	f003 020f 	and.w	r2, r3, #15
 8001e58:	4613      	mov	r3, r2
 8001e5a:	00db      	lsls	r3, r3, #3
 8001e5c:	4413      	add	r3, r2
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	3338      	adds	r3, #56	; 0x38
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	4413      	add	r3, r2
 8001e66:	3304      	adds	r3, #4
 8001e68:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	705a      	strb	r2, [r3, #1]
 8001e70:	e00d      	b.n	8001e8e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001e72:	78fa      	ldrb	r2, [r7, #3]
 8001e74:	4613      	mov	r3, r2
 8001e76:	00db      	lsls	r3, r3, #3
 8001e78:	4413      	add	r3, r2
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001e80:	687a      	ldr	r2, [r7, #4]
 8001e82:	4413      	add	r3, r2
 8001e84:	3304      	adds	r3, #4
 8001e86:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	2201      	movs	r2, #1
 8001e92:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e94:	78fb      	ldrb	r3, [r7, #3]
 8001e96:	f003 030f 	and.w	r3, r3, #15
 8001e9a:	b2da      	uxtb	r2, r3
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d101      	bne.n	8001eae <HAL_PCD_EP_SetStall+0x82>
 8001eaa:	2302      	movs	r3, #2
 8001eac:	e01e      	b.n	8001eec <HAL_PCD_EP_SetStall+0xc0>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	68f9      	ldr	r1, [r7, #12]
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f002 f8eb 	bl	8004098 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001ec2:	78fb      	ldrb	r3, [r7, #3]
 8001ec4:	f003 030f 	and.w	r3, r3, #15
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d10a      	bne.n	8001ee2 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6818      	ldr	r0, [r3, #0]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	691b      	ldr	r3, [r3, #16]
 8001ed4:	b2d9      	uxtb	r1, r3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001edc:	461a      	mov	r2, r3
 8001ede:	f002 fadb 	bl	8004498 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001eea:	2300      	movs	r3, #0
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	3710      	adds	r7, #16
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}

08001ef4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b084      	sub	sp, #16
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	460b      	mov	r3, r1
 8001efe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001f00:	78fb      	ldrb	r3, [r7, #3]
 8001f02:	f003 020f 	and.w	r2, r3, #15
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	d901      	bls.n	8001f12 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e042      	b.n	8001f98 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001f12:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	da0f      	bge.n	8001f3a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f1a:	78fb      	ldrb	r3, [r7, #3]
 8001f1c:	f003 020f 	and.w	r2, r3, #15
 8001f20:	4613      	mov	r3, r2
 8001f22:	00db      	lsls	r3, r3, #3
 8001f24:	4413      	add	r3, r2
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	3338      	adds	r3, #56	; 0x38
 8001f2a:	687a      	ldr	r2, [r7, #4]
 8001f2c:	4413      	add	r3, r2
 8001f2e:	3304      	adds	r3, #4
 8001f30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	2201      	movs	r2, #1
 8001f36:	705a      	strb	r2, [r3, #1]
 8001f38:	e00f      	b.n	8001f5a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f3a:	78fb      	ldrb	r3, [r7, #3]
 8001f3c:	f003 020f 	and.w	r2, r3, #15
 8001f40:	4613      	mov	r3, r2
 8001f42:	00db      	lsls	r3, r3, #3
 8001f44:	4413      	add	r3, r2
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001f4c:	687a      	ldr	r2, [r7, #4]
 8001f4e:	4413      	add	r3, r2
 8001f50:	3304      	adds	r3, #4
 8001f52:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	2200      	movs	r2, #0
 8001f58:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f60:	78fb      	ldrb	r3, [r7, #3]
 8001f62:	f003 030f 	and.w	r3, r3, #15
 8001f66:	b2da      	uxtb	r2, r3
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d101      	bne.n	8001f7a <HAL_PCD_EP_ClrStall+0x86>
 8001f76:	2302      	movs	r3, #2
 8001f78:	e00e      	b.n	8001f98 <HAL_PCD_EP_ClrStall+0xa4>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	68f9      	ldr	r1, [r7, #12]
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f002 f8f3 	bl	8004174 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2200      	movs	r2, #0
 8001f92:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001f96:	2300      	movs	r3, #0
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3710      	adds	r7, #16
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}

08001fa0 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b084      	sub	sp, #16
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	460b      	mov	r3, r1
 8001faa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8001fac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	da0c      	bge.n	8001fce <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fb4:	78fb      	ldrb	r3, [r7, #3]
 8001fb6:	f003 020f 	and.w	r2, r3, #15
 8001fba:	4613      	mov	r3, r2
 8001fbc:	00db      	lsls	r3, r3, #3
 8001fbe:	4413      	add	r3, r2
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	3338      	adds	r3, #56	; 0x38
 8001fc4:	687a      	ldr	r2, [r7, #4]
 8001fc6:	4413      	add	r3, r2
 8001fc8:	3304      	adds	r3, #4
 8001fca:	60fb      	str	r3, [r7, #12]
 8001fcc:	e00c      	b.n	8001fe8 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001fce:	78fb      	ldrb	r3, [r7, #3]
 8001fd0:	f003 020f 	and.w	r2, r3, #15
 8001fd4:	4613      	mov	r3, r2
 8001fd6:	00db      	lsls	r3, r3, #3
 8001fd8:	4413      	add	r3, r2
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001fe0:	687a      	ldr	r2, [r7, #4]
 8001fe2:	4413      	add	r3, r2
 8001fe4:	3304      	adds	r3, #4
 8001fe6:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	68f9      	ldr	r1, [r7, #12]
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f001 ff12 	bl	8003e18 <USB_EPStopXfer>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	72fb      	strb	r3, [r7, #11]

  return ret;
 8001ff8:	7afb      	ldrb	r3, [r7, #11]
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3710      	adds	r7, #16
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}

08002002 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002002:	b580      	push	{r7, lr}
 8002004:	b08a      	sub	sp, #40	; 0x28
 8002006:	af02      	add	r7, sp, #8
 8002008:	6078      	str	r0, [r7, #4]
 800200a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002016:	683a      	ldr	r2, [r7, #0]
 8002018:	4613      	mov	r3, r2
 800201a:	00db      	lsls	r3, r3, #3
 800201c:	4413      	add	r3, r2
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	3338      	adds	r3, #56	; 0x38
 8002022:	687a      	ldr	r2, [r7, #4]
 8002024:	4413      	add	r3, r2
 8002026:	3304      	adds	r3, #4
 8002028:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	6a1a      	ldr	r2, [r3, #32]
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	699b      	ldr	r3, [r3, #24]
 8002032:	429a      	cmp	r2, r3
 8002034:	d901      	bls.n	800203a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e06c      	b.n	8002114 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	699a      	ldr	r2, [r3, #24]
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	6a1b      	ldr	r3, [r3, #32]
 8002042:	1ad3      	subs	r3, r2, r3
 8002044:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	68db      	ldr	r3, [r3, #12]
 800204a:	69fa      	ldr	r2, [r7, #28]
 800204c:	429a      	cmp	r2, r3
 800204e:	d902      	bls.n	8002056 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	3303      	adds	r3, #3
 800205a:	089b      	lsrs	r3, r3, #2
 800205c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800205e:	e02b      	b.n	80020b8 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	699a      	ldr	r2, [r3, #24]
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	6a1b      	ldr	r3, [r3, #32]
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	69fa      	ldr	r2, [r7, #28]
 8002072:	429a      	cmp	r2, r3
 8002074:	d902      	bls.n	800207c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	68db      	ldr	r3, [r3, #12]
 800207a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800207c:	69fb      	ldr	r3, [r7, #28]
 800207e:	3303      	adds	r3, #3
 8002080:	089b      	lsrs	r3, r3, #2
 8002082:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	6919      	ldr	r1, [r3, #16]
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	b2da      	uxtb	r2, r3
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002094:	b2db      	uxtb	r3, r3
 8002096:	9300      	str	r3, [sp, #0]
 8002098:	4603      	mov	r3, r0
 800209a:	6978      	ldr	r0, [r7, #20]
 800209c:	f001 ff66 	bl	8003f6c <USB_WritePacket>

    ep->xfer_buff  += len;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	691a      	ldr	r2, [r3, #16]
 80020a4:	69fb      	ldr	r3, [r7, #28]
 80020a6:	441a      	add	r2, r3
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	6a1a      	ldr	r2, [r3, #32]
 80020b0:	69fb      	ldr	r3, [r7, #28]
 80020b2:	441a      	add	r2, r3
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	015a      	lsls	r2, r3, #5
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	4413      	add	r3, r2
 80020c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80020c4:	699b      	ldr	r3, [r3, #24]
 80020c6:	b29b      	uxth	r3, r3
 80020c8:	69ba      	ldr	r2, [r7, #24]
 80020ca:	429a      	cmp	r2, r3
 80020cc:	d809      	bhi.n	80020e2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	6a1a      	ldr	r2, [r3, #32]
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d203      	bcs.n	80020e2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	699b      	ldr	r3, [r3, #24]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d1be      	bne.n	8002060 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	699a      	ldr	r2, [r3, #24]
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	6a1b      	ldr	r3, [r3, #32]
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d811      	bhi.n	8002112 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	f003 030f 	and.w	r3, r3, #15
 80020f4:	2201      	movs	r2, #1
 80020f6:	fa02 f303 	lsl.w	r3, r2, r3
 80020fa:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002102:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	43db      	mvns	r3, r3
 8002108:	6939      	ldr	r1, [r7, #16]
 800210a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800210e:	4013      	ands	r3, r2
 8002110:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002112:	2300      	movs	r3, #0
}
 8002114:	4618      	mov	r0, r3
 8002116:	3720      	adds	r7, #32
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}

0800211c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b088      	sub	sp, #32
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	333c      	adds	r3, #60	; 0x3c
 8002134:	3304      	adds	r3, #4
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	015a      	lsls	r2, r3, #5
 800213e:	69bb      	ldr	r3, [r7, #24]
 8002140:	4413      	add	r3, r2
 8002142:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	691b      	ldr	r3, [r3, #16]
 800214e:	2b01      	cmp	r3, #1
 8002150:	d17b      	bne.n	800224a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	f003 0308 	and.w	r3, r3, #8
 8002158:	2b00      	cmp	r3, #0
 800215a:	d015      	beq.n	8002188 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	4a61      	ldr	r2, [pc, #388]	; (80022e4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002160:	4293      	cmp	r3, r2
 8002162:	f240 80b9 	bls.w	80022d8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800216c:	2b00      	cmp	r3, #0
 800216e:	f000 80b3 	beq.w	80022d8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	015a      	lsls	r2, r3, #5
 8002176:	69bb      	ldr	r3, [r7, #24]
 8002178:	4413      	add	r3, r2
 800217a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800217e:	461a      	mov	r2, r3
 8002180:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002184:	6093      	str	r3, [r2, #8]
 8002186:	e0a7      	b.n	80022d8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	f003 0320 	and.w	r3, r3, #32
 800218e:	2b00      	cmp	r3, #0
 8002190:	d009      	beq.n	80021a6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	015a      	lsls	r2, r3, #5
 8002196:	69bb      	ldr	r3, [r7, #24]
 8002198:	4413      	add	r3, r2
 800219a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800219e:	461a      	mov	r2, r3
 80021a0:	2320      	movs	r3, #32
 80021a2:	6093      	str	r3, [r2, #8]
 80021a4:	e098      	b.n	80022d8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	f040 8093 	bne.w	80022d8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	4a4b      	ldr	r2, [pc, #300]	; (80022e4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d90f      	bls.n	80021da <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d00a      	beq.n	80021da <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	015a      	lsls	r2, r3, #5
 80021c8:	69bb      	ldr	r3, [r7, #24]
 80021ca:	4413      	add	r3, r2
 80021cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021d0:	461a      	mov	r2, r3
 80021d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80021d6:	6093      	str	r3, [r2, #8]
 80021d8:	e07e      	b.n	80022d8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80021da:	683a      	ldr	r2, [r7, #0]
 80021dc:	4613      	mov	r3, r2
 80021de:	00db      	lsls	r3, r3, #3
 80021e0:	4413      	add	r3, r2
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80021e8:	687a      	ldr	r2, [r7, #4]
 80021ea:	4413      	add	r3, r2
 80021ec:	3304      	adds	r3, #4
 80021ee:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	69da      	ldr	r2, [r3, #28]
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	0159      	lsls	r1, r3, #5
 80021f8:	69bb      	ldr	r3, [r7, #24]
 80021fa:	440b      	add	r3, r1
 80021fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002200:	691b      	ldr	r3, [r3, #16]
 8002202:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002206:	1ad2      	subs	r2, r2, r3
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d114      	bne.n	800223c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	699b      	ldr	r3, [r3, #24]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d109      	bne.n	800222e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6818      	ldr	r0, [r3, #0]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002224:	461a      	mov	r2, r3
 8002226:	2101      	movs	r1, #1
 8002228:	f002 f936 	bl	8004498 <USB_EP0_OutStart>
 800222c:	e006      	b.n	800223c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	691a      	ldr	r2, [r3, #16]
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	6a1b      	ldr	r3, [r3, #32]
 8002236:	441a      	add	r2, r3
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	b2db      	uxtb	r3, r3
 8002240:	4619      	mov	r1, r3
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f004 fb90 	bl	8006968 <HAL_PCD_DataOutStageCallback>
 8002248:	e046      	b.n	80022d8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	4a26      	ldr	r2, [pc, #152]	; (80022e8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d124      	bne.n	800229c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002258:	2b00      	cmp	r3, #0
 800225a:	d00a      	beq.n	8002272 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	015a      	lsls	r2, r3, #5
 8002260:	69bb      	ldr	r3, [r7, #24]
 8002262:	4413      	add	r3, r2
 8002264:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002268:	461a      	mov	r2, r3
 800226a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800226e:	6093      	str	r3, [r2, #8]
 8002270:	e032      	b.n	80022d8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	f003 0320 	and.w	r3, r3, #32
 8002278:	2b00      	cmp	r3, #0
 800227a:	d008      	beq.n	800228e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	015a      	lsls	r2, r3, #5
 8002280:	69bb      	ldr	r3, [r7, #24]
 8002282:	4413      	add	r3, r2
 8002284:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002288:	461a      	mov	r2, r3
 800228a:	2320      	movs	r3, #32
 800228c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	b2db      	uxtb	r3, r3
 8002292:	4619      	mov	r1, r3
 8002294:	6878      	ldr	r0, [r7, #4]
 8002296:	f004 fb67 	bl	8006968 <HAL_PCD_DataOutStageCallback>
 800229a:	e01d      	b.n	80022d8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d114      	bne.n	80022cc <PCD_EP_OutXfrComplete_int+0x1b0>
 80022a2:	6879      	ldr	r1, [r7, #4]
 80022a4:	683a      	ldr	r2, [r7, #0]
 80022a6:	4613      	mov	r3, r2
 80022a8:	00db      	lsls	r3, r3, #3
 80022aa:	4413      	add	r3, r2
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	440b      	add	r3, r1
 80022b0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d108      	bne.n	80022cc <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6818      	ldr	r0, [r3, #0]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80022c4:	461a      	mov	r2, r3
 80022c6:	2100      	movs	r1, #0
 80022c8:	f002 f8e6 	bl	8004498 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	4619      	mov	r1, r3
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f004 fb48 	bl	8006968 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80022d8:	2300      	movs	r3, #0
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3720      	adds	r7, #32
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	4f54300a 	.word	0x4f54300a
 80022e8:	4f54310a 	.word	0x4f54310a

080022ec <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b086      	sub	sp, #24
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	333c      	adds	r3, #60	; 0x3c
 8002304:	3304      	adds	r3, #4
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	015a      	lsls	r2, r3, #5
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	4413      	add	r3, r2
 8002312:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	4a15      	ldr	r2, [pc, #84]	; (8002374 <PCD_EP_OutSetupPacket_int+0x88>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d90e      	bls.n	8002340 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002328:	2b00      	cmp	r3, #0
 800232a:	d009      	beq.n	8002340 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	015a      	lsls	r2, r3, #5
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	4413      	add	r3, r2
 8002334:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002338:	461a      	mov	r2, r3
 800233a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800233e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	f004 faff 	bl	8006944 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	4a0a      	ldr	r2, [pc, #40]	; (8002374 <PCD_EP_OutSetupPacket_int+0x88>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d90c      	bls.n	8002368 <PCD_EP_OutSetupPacket_int+0x7c>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	691b      	ldr	r3, [r3, #16]
 8002352:	2b01      	cmp	r3, #1
 8002354:	d108      	bne.n	8002368 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6818      	ldr	r0, [r3, #0]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002360:	461a      	mov	r2, r3
 8002362:	2101      	movs	r1, #1
 8002364:	f002 f898 	bl	8004498 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002368:	2300      	movs	r3, #0
}
 800236a:	4618      	mov	r0, r3
 800236c:	3718      	adds	r7, #24
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	4f54300a 	.word	0x4f54300a

08002378 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002378:	b480      	push	{r7}
 800237a:	b085      	sub	sp, #20
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
 8002380:	460b      	mov	r3, r1
 8002382:	70fb      	strb	r3, [r7, #3]
 8002384:	4613      	mov	r3, r2
 8002386:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800238e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002390:	78fb      	ldrb	r3, [r7, #3]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d107      	bne.n	80023a6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002396:	883b      	ldrh	r3, [r7, #0]
 8002398:	0419      	lsls	r1, r3, #16
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	68ba      	ldr	r2, [r7, #8]
 80023a0:	430a      	orrs	r2, r1
 80023a2:	629a      	str	r2, [r3, #40]	; 0x28
 80023a4:	e028      	b.n	80023f8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ac:	0c1b      	lsrs	r3, r3, #16
 80023ae:	68ba      	ldr	r2, [r7, #8]
 80023b0:	4413      	add	r3, r2
 80023b2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80023b4:	2300      	movs	r3, #0
 80023b6:	73fb      	strb	r3, [r7, #15]
 80023b8:	e00d      	b.n	80023d6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	7bfb      	ldrb	r3, [r7, #15]
 80023c0:	3340      	adds	r3, #64	; 0x40
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	4413      	add	r3, r2
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	0c1b      	lsrs	r3, r3, #16
 80023ca:	68ba      	ldr	r2, [r7, #8]
 80023cc:	4413      	add	r3, r2
 80023ce:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80023d0:	7bfb      	ldrb	r3, [r7, #15]
 80023d2:	3301      	adds	r3, #1
 80023d4:	73fb      	strb	r3, [r7, #15]
 80023d6:	7bfa      	ldrb	r2, [r7, #15]
 80023d8:	78fb      	ldrb	r3, [r7, #3]
 80023da:	3b01      	subs	r3, #1
 80023dc:	429a      	cmp	r2, r3
 80023de:	d3ec      	bcc.n	80023ba <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80023e0:	883b      	ldrh	r3, [r7, #0]
 80023e2:	0418      	lsls	r0, r3, #16
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6819      	ldr	r1, [r3, #0]
 80023e8:	78fb      	ldrb	r3, [r7, #3]
 80023ea:	3b01      	subs	r3, #1
 80023ec:	68ba      	ldr	r2, [r7, #8]
 80023ee:	4302      	orrs	r2, r0
 80023f0:	3340      	adds	r3, #64	; 0x40
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	440b      	add	r3, r1
 80023f6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80023f8:	2300      	movs	r3, #0
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3714      	adds	r7, #20
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr

08002406 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002406:	b480      	push	{r7}
 8002408:	b083      	sub	sp, #12
 800240a:	af00      	add	r7, sp, #0
 800240c:	6078      	str	r0, [r7, #4]
 800240e:	460b      	mov	r3, r1
 8002410:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	887a      	ldrh	r2, [r7, #2]
 8002418:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800241a:	2300      	movs	r3, #0
}
 800241c:	4618      	mov	r0, r3
 800241e:	370c      	adds	r7, #12
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr

08002428 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	460b      	mov	r3, r1
 8002432:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002434:	bf00      	nop
 8002436:	370c      	adds	r7, #12
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr

08002440 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b086      	sub	sp, #24
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d101      	bne.n	8002452 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e267      	b.n	8002922 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 0301 	and.w	r3, r3, #1
 800245a:	2b00      	cmp	r3, #0
 800245c:	d075      	beq.n	800254a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800245e:	4b88      	ldr	r3, [pc, #544]	; (8002680 <HAL_RCC_OscConfig+0x240>)
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	f003 030c 	and.w	r3, r3, #12
 8002466:	2b04      	cmp	r3, #4
 8002468:	d00c      	beq.n	8002484 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800246a:	4b85      	ldr	r3, [pc, #532]	; (8002680 <HAL_RCC_OscConfig+0x240>)
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002472:	2b08      	cmp	r3, #8
 8002474:	d112      	bne.n	800249c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002476:	4b82      	ldr	r3, [pc, #520]	; (8002680 <HAL_RCC_OscConfig+0x240>)
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800247e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002482:	d10b      	bne.n	800249c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002484:	4b7e      	ldr	r3, [pc, #504]	; (8002680 <HAL_RCC_OscConfig+0x240>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800248c:	2b00      	cmp	r3, #0
 800248e:	d05b      	beq.n	8002548 <HAL_RCC_OscConfig+0x108>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d157      	bne.n	8002548 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	e242      	b.n	8002922 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024a4:	d106      	bne.n	80024b4 <HAL_RCC_OscConfig+0x74>
 80024a6:	4b76      	ldr	r3, [pc, #472]	; (8002680 <HAL_RCC_OscConfig+0x240>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a75      	ldr	r2, [pc, #468]	; (8002680 <HAL_RCC_OscConfig+0x240>)
 80024ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024b0:	6013      	str	r3, [r2, #0]
 80024b2:	e01d      	b.n	80024f0 <HAL_RCC_OscConfig+0xb0>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024bc:	d10c      	bne.n	80024d8 <HAL_RCC_OscConfig+0x98>
 80024be:	4b70      	ldr	r3, [pc, #448]	; (8002680 <HAL_RCC_OscConfig+0x240>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a6f      	ldr	r2, [pc, #444]	; (8002680 <HAL_RCC_OscConfig+0x240>)
 80024c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024c8:	6013      	str	r3, [r2, #0]
 80024ca:	4b6d      	ldr	r3, [pc, #436]	; (8002680 <HAL_RCC_OscConfig+0x240>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a6c      	ldr	r2, [pc, #432]	; (8002680 <HAL_RCC_OscConfig+0x240>)
 80024d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024d4:	6013      	str	r3, [r2, #0]
 80024d6:	e00b      	b.n	80024f0 <HAL_RCC_OscConfig+0xb0>
 80024d8:	4b69      	ldr	r3, [pc, #420]	; (8002680 <HAL_RCC_OscConfig+0x240>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a68      	ldr	r2, [pc, #416]	; (8002680 <HAL_RCC_OscConfig+0x240>)
 80024de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024e2:	6013      	str	r3, [r2, #0]
 80024e4:	4b66      	ldr	r3, [pc, #408]	; (8002680 <HAL_RCC_OscConfig+0x240>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a65      	ldr	r2, [pc, #404]	; (8002680 <HAL_RCC_OscConfig+0x240>)
 80024ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d013      	beq.n	8002520 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024f8:	f7fe fa16 	bl	8000928 <HAL_GetTick>
 80024fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024fe:	e008      	b.n	8002512 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002500:	f7fe fa12 	bl	8000928 <HAL_GetTick>
 8002504:	4602      	mov	r2, r0
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	2b64      	cmp	r3, #100	; 0x64
 800250c:	d901      	bls.n	8002512 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	e207      	b.n	8002922 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002512:	4b5b      	ldr	r3, [pc, #364]	; (8002680 <HAL_RCC_OscConfig+0x240>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d0f0      	beq.n	8002500 <HAL_RCC_OscConfig+0xc0>
 800251e:	e014      	b.n	800254a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002520:	f7fe fa02 	bl	8000928 <HAL_GetTick>
 8002524:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002526:	e008      	b.n	800253a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002528:	f7fe f9fe 	bl	8000928 <HAL_GetTick>
 800252c:	4602      	mov	r2, r0
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	2b64      	cmp	r3, #100	; 0x64
 8002534:	d901      	bls.n	800253a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	e1f3      	b.n	8002922 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800253a:	4b51      	ldr	r3, [pc, #324]	; (8002680 <HAL_RCC_OscConfig+0x240>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d1f0      	bne.n	8002528 <HAL_RCC_OscConfig+0xe8>
 8002546:	e000      	b.n	800254a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002548:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 0302 	and.w	r3, r3, #2
 8002552:	2b00      	cmp	r3, #0
 8002554:	d063      	beq.n	800261e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002556:	4b4a      	ldr	r3, [pc, #296]	; (8002680 <HAL_RCC_OscConfig+0x240>)
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	f003 030c 	and.w	r3, r3, #12
 800255e:	2b00      	cmp	r3, #0
 8002560:	d00b      	beq.n	800257a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002562:	4b47      	ldr	r3, [pc, #284]	; (8002680 <HAL_RCC_OscConfig+0x240>)
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800256a:	2b08      	cmp	r3, #8
 800256c:	d11c      	bne.n	80025a8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800256e:	4b44      	ldr	r3, [pc, #272]	; (8002680 <HAL_RCC_OscConfig+0x240>)
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d116      	bne.n	80025a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800257a:	4b41      	ldr	r3, [pc, #260]	; (8002680 <HAL_RCC_OscConfig+0x240>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 0302 	and.w	r3, r3, #2
 8002582:	2b00      	cmp	r3, #0
 8002584:	d005      	beq.n	8002592 <HAL_RCC_OscConfig+0x152>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	68db      	ldr	r3, [r3, #12]
 800258a:	2b01      	cmp	r3, #1
 800258c:	d001      	beq.n	8002592 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e1c7      	b.n	8002922 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002592:	4b3b      	ldr	r3, [pc, #236]	; (8002680 <HAL_RCC_OscConfig+0x240>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	691b      	ldr	r3, [r3, #16]
 800259e:	00db      	lsls	r3, r3, #3
 80025a0:	4937      	ldr	r1, [pc, #220]	; (8002680 <HAL_RCC_OscConfig+0x240>)
 80025a2:	4313      	orrs	r3, r2
 80025a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025a6:	e03a      	b.n	800261e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d020      	beq.n	80025f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025b0:	4b34      	ldr	r3, [pc, #208]	; (8002684 <HAL_RCC_OscConfig+0x244>)
 80025b2:	2201      	movs	r2, #1
 80025b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025b6:	f7fe f9b7 	bl	8000928 <HAL_GetTick>
 80025ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025bc:	e008      	b.n	80025d0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025be:	f7fe f9b3 	bl	8000928 <HAL_GetTick>
 80025c2:	4602      	mov	r2, r0
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	1ad3      	subs	r3, r2, r3
 80025c8:	2b02      	cmp	r3, #2
 80025ca:	d901      	bls.n	80025d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80025cc:	2303      	movs	r3, #3
 80025ce:	e1a8      	b.n	8002922 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025d0:	4b2b      	ldr	r3, [pc, #172]	; (8002680 <HAL_RCC_OscConfig+0x240>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 0302 	and.w	r3, r3, #2
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d0f0      	beq.n	80025be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025dc:	4b28      	ldr	r3, [pc, #160]	; (8002680 <HAL_RCC_OscConfig+0x240>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	691b      	ldr	r3, [r3, #16]
 80025e8:	00db      	lsls	r3, r3, #3
 80025ea:	4925      	ldr	r1, [pc, #148]	; (8002680 <HAL_RCC_OscConfig+0x240>)
 80025ec:	4313      	orrs	r3, r2
 80025ee:	600b      	str	r3, [r1, #0]
 80025f0:	e015      	b.n	800261e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025f2:	4b24      	ldr	r3, [pc, #144]	; (8002684 <HAL_RCC_OscConfig+0x244>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025f8:	f7fe f996 	bl	8000928 <HAL_GetTick>
 80025fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025fe:	e008      	b.n	8002612 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002600:	f7fe f992 	bl	8000928 <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	2b02      	cmp	r3, #2
 800260c:	d901      	bls.n	8002612 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800260e:	2303      	movs	r3, #3
 8002610:	e187      	b.n	8002922 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002612:	4b1b      	ldr	r3, [pc, #108]	; (8002680 <HAL_RCC_OscConfig+0x240>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0302 	and.w	r3, r3, #2
 800261a:	2b00      	cmp	r3, #0
 800261c:	d1f0      	bne.n	8002600 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 0308 	and.w	r3, r3, #8
 8002626:	2b00      	cmp	r3, #0
 8002628:	d036      	beq.n	8002698 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	695b      	ldr	r3, [r3, #20]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d016      	beq.n	8002660 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002632:	4b15      	ldr	r3, [pc, #84]	; (8002688 <HAL_RCC_OscConfig+0x248>)
 8002634:	2201      	movs	r2, #1
 8002636:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002638:	f7fe f976 	bl	8000928 <HAL_GetTick>
 800263c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800263e:	e008      	b.n	8002652 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002640:	f7fe f972 	bl	8000928 <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	2b02      	cmp	r3, #2
 800264c:	d901      	bls.n	8002652 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800264e:	2303      	movs	r3, #3
 8002650:	e167      	b.n	8002922 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002652:	4b0b      	ldr	r3, [pc, #44]	; (8002680 <HAL_RCC_OscConfig+0x240>)
 8002654:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002656:	f003 0302 	and.w	r3, r3, #2
 800265a:	2b00      	cmp	r3, #0
 800265c:	d0f0      	beq.n	8002640 <HAL_RCC_OscConfig+0x200>
 800265e:	e01b      	b.n	8002698 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002660:	4b09      	ldr	r3, [pc, #36]	; (8002688 <HAL_RCC_OscConfig+0x248>)
 8002662:	2200      	movs	r2, #0
 8002664:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002666:	f7fe f95f 	bl	8000928 <HAL_GetTick>
 800266a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800266c:	e00e      	b.n	800268c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800266e:	f7fe f95b 	bl	8000928 <HAL_GetTick>
 8002672:	4602      	mov	r2, r0
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	1ad3      	subs	r3, r2, r3
 8002678:	2b02      	cmp	r3, #2
 800267a:	d907      	bls.n	800268c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800267c:	2303      	movs	r3, #3
 800267e:	e150      	b.n	8002922 <HAL_RCC_OscConfig+0x4e2>
 8002680:	40023800 	.word	0x40023800
 8002684:	42470000 	.word	0x42470000
 8002688:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800268c:	4b88      	ldr	r3, [pc, #544]	; (80028b0 <HAL_RCC_OscConfig+0x470>)
 800268e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002690:	f003 0302 	and.w	r3, r3, #2
 8002694:	2b00      	cmp	r3, #0
 8002696:	d1ea      	bne.n	800266e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 0304 	and.w	r3, r3, #4
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	f000 8097 	beq.w	80027d4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026a6:	2300      	movs	r3, #0
 80026a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026aa:	4b81      	ldr	r3, [pc, #516]	; (80028b0 <HAL_RCC_OscConfig+0x470>)
 80026ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d10f      	bne.n	80026d6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026b6:	2300      	movs	r3, #0
 80026b8:	60bb      	str	r3, [r7, #8]
 80026ba:	4b7d      	ldr	r3, [pc, #500]	; (80028b0 <HAL_RCC_OscConfig+0x470>)
 80026bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026be:	4a7c      	ldr	r2, [pc, #496]	; (80028b0 <HAL_RCC_OscConfig+0x470>)
 80026c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026c4:	6413      	str	r3, [r2, #64]	; 0x40
 80026c6:	4b7a      	ldr	r3, [pc, #488]	; (80028b0 <HAL_RCC_OscConfig+0x470>)
 80026c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ce:	60bb      	str	r3, [r7, #8]
 80026d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026d2:	2301      	movs	r3, #1
 80026d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026d6:	4b77      	ldr	r3, [pc, #476]	; (80028b4 <HAL_RCC_OscConfig+0x474>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d118      	bne.n	8002714 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026e2:	4b74      	ldr	r3, [pc, #464]	; (80028b4 <HAL_RCC_OscConfig+0x474>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a73      	ldr	r2, [pc, #460]	; (80028b4 <HAL_RCC_OscConfig+0x474>)
 80026e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026ee:	f7fe f91b 	bl	8000928 <HAL_GetTick>
 80026f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026f4:	e008      	b.n	8002708 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026f6:	f7fe f917 	bl	8000928 <HAL_GetTick>
 80026fa:	4602      	mov	r2, r0
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	2b02      	cmp	r3, #2
 8002702:	d901      	bls.n	8002708 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002704:	2303      	movs	r3, #3
 8002706:	e10c      	b.n	8002922 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002708:	4b6a      	ldr	r3, [pc, #424]	; (80028b4 <HAL_RCC_OscConfig+0x474>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002710:	2b00      	cmp	r3, #0
 8002712:	d0f0      	beq.n	80026f6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	2b01      	cmp	r3, #1
 800271a:	d106      	bne.n	800272a <HAL_RCC_OscConfig+0x2ea>
 800271c:	4b64      	ldr	r3, [pc, #400]	; (80028b0 <HAL_RCC_OscConfig+0x470>)
 800271e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002720:	4a63      	ldr	r2, [pc, #396]	; (80028b0 <HAL_RCC_OscConfig+0x470>)
 8002722:	f043 0301 	orr.w	r3, r3, #1
 8002726:	6713      	str	r3, [r2, #112]	; 0x70
 8002728:	e01c      	b.n	8002764 <HAL_RCC_OscConfig+0x324>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	2b05      	cmp	r3, #5
 8002730:	d10c      	bne.n	800274c <HAL_RCC_OscConfig+0x30c>
 8002732:	4b5f      	ldr	r3, [pc, #380]	; (80028b0 <HAL_RCC_OscConfig+0x470>)
 8002734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002736:	4a5e      	ldr	r2, [pc, #376]	; (80028b0 <HAL_RCC_OscConfig+0x470>)
 8002738:	f043 0304 	orr.w	r3, r3, #4
 800273c:	6713      	str	r3, [r2, #112]	; 0x70
 800273e:	4b5c      	ldr	r3, [pc, #368]	; (80028b0 <HAL_RCC_OscConfig+0x470>)
 8002740:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002742:	4a5b      	ldr	r2, [pc, #364]	; (80028b0 <HAL_RCC_OscConfig+0x470>)
 8002744:	f043 0301 	orr.w	r3, r3, #1
 8002748:	6713      	str	r3, [r2, #112]	; 0x70
 800274a:	e00b      	b.n	8002764 <HAL_RCC_OscConfig+0x324>
 800274c:	4b58      	ldr	r3, [pc, #352]	; (80028b0 <HAL_RCC_OscConfig+0x470>)
 800274e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002750:	4a57      	ldr	r2, [pc, #348]	; (80028b0 <HAL_RCC_OscConfig+0x470>)
 8002752:	f023 0301 	bic.w	r3, r3, #1
 8002756:	6713      	str	r3, [r2, #112]	; 0x70
 8002758:	4b55      	ldr	r3, [pc, #340]	; (80028b0 <HAL_RCC_OscConfig+0x470>)
 800275a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800275c:	4a54      	ldr	r2, [pc, #336]	; (80028b0 <HAL_RCC_OscConfig+0x470>)
 800275e:	f023 0304 	bic.w	r3, r3, #4
 8002762:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d015      	beq.n	8002798 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800276c:	f7fe f8dc 	bl	8000928 <HAL_GetTick>
 8002770:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002772:	e00a      	b.n	800278a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002774:	f7fe f8d8 	bl	8000928 <HAL_GetTick>
 8002778:	4602      	mov	r2, r0
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002782:	4293      	cmp	r3, r2
 8002784:	d901      	bls.n	800278a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002786:	2303      	movs	r3, #3
 8002788:	e0cb      	b.n	8002922 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800278a:	4b49      	ldr	r3, [pc, #292]	; (80028b0 <HAL_RCC_OscConfig+0x470>)
 800278c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800278e:	f003 0302 	and.w	r3, r3, #2
 8002792:	2b00      	cmp	r3, #0
 8002794:	d0ee      	beq.n	8002774 <HAL_RCC_OscConfig+0x334>
 8002796:	e014      	b.n	80027c2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002798:	f7fe f8c6 	bl	8000928 <HAL_GetTick>
 800279c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800279e:	e00a      	b.n	80027b6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027a0:	f7fe f8c2 	bl	8000928 <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d901      	bls.n	80027b6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	e0b5      	b.n	8002922 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027b6:	4b3e      	ldr	r3, [pc, #248]	; (80028b0 <HAL_RCC_OscConfig+0x470>)
 80027b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ba:	f003 0302 	and.w	r3, r3, #2
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d1ee      	bne.n	80027a0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027c2:	7dfb      	ldrb	r3, [r7, #23]
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d105      	bne.n	80027d4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027c8:	4b39      	ldr	r3, [pc, #228]	; (80028b0 <HAL_RCC_OscConfig+0x470>)
 80027ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027cc:	4a38      	ldr	r2, [pc, #224]	; (80028b0 <HAL_RCC_OscConfig+0x470>)
 80027ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027d2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	699b      	ldr	r3, [r3, #24]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	f000 80a1 	beq.w	8002920 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80027de:	4b34      	ldr	r3, [pc, #208]	; (80028b0 <HAL_RCC_OscConfig+0x470>)
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	f003 030c 	and.w	r3, r3, #12
 80027e6:	2b08      	cmp	r3, #8
 80027e8:	d05c      	beq.n	80028a4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	699b      	ldr	r3, [r3, #24]
 80027ee:	2b02      	cmp	r3, #2
 80027f0:	d141      	bne.n	8002876 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027f2:	4b31      	ldr	r3, [pc, #196]	; (80028b8 <HAL_RCC_OscConfig+0x478>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027f8:	f7fe f896 	bl	8000928 <HAL_GetTick>
 80027fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027fe:	e008      	b.n	8002812 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002800:	f7fe f892 	bl	8000928 <HAL_GetTick>
 8002804:	4602      	mov	r2, r0
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	2b02      	cmp	r3, #2
 800280c:	d901      	bls.n	8002812 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e087      	b.n	8002922 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002812:	4b27      	ldr	r3, [pc, #156]	; (80028b0 <HAL_RCC_OscConfig+0x470>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d1f0      	bne.n	8002800 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	69da      	ldr	r2, [r3, #28]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6a1b      	ldr	r3, [r3, #32]
 8002826:	431a      	orrs	r2, r3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800282c:	019b      	lsls	r3, r3, #6
 800282e:	431a      	orrs	r2, r3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002834:	085b      	lsrs	r3, r3, #1
 8002836:	3b01      	subs	r3, #1
 8002838:	041b      	lsls	r3, r3, #16
 800283a:	431a      	orrs	r2, r3
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002840:	061b      	lsls	r3, r3, #24
 8002842:	491b      	ldr	r1, [pc, #108]	; (80028b0 <HAL_RCC_OscConfig+0x470>)
 8002844:	4313      	orrs	r3, r2
 8002846:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002848:	4b1b      	ldr	r3, [pc, #108]	; (80028b8 <HAL_RCC_OscConfig+0x478>)
 800284a:	2201      	movs	r2, #1
 800284c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800284e:	f7fe f86b 	bl	8000928 <HAL_GetTick>
 8002852:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002854:	e008      	b.n	8002868 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002856:	f7fe f867 	bl	8000928 <HAL_GetTick>
 800285a:	4602      	mov	r2, r0
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	1ad3      	subs	r3, r2, r3
 8002860:	2b02      	cmp	r3, #2
 8002862:	d901      	bls.n	8002868 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002864:	2303      	movs	r3, #3
 8002866:	e05c      	b.n	8002922 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002868:	4b11      	ldr	r3, [pc, #68]	; (80028b0 <HAL_RCC_OscConfig+0x470>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002870:	2b00      	cmp	r3, #0
 8002872:	d0f0      	beq.n	8002856 <HAL_RCC_OscConfig+0x416>
 8002874:	e054      	b.n	8002920 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002876:	4b10      	ldr	r3, [pc, #64]	; (80028b8 <HAL_RCC_OscConfig+0x478>)
 8002878:	2200      	movs	r2, #0
 800287a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800287c:	f7fe f854 	bl	8000928 <HAL_GetTick>
 8002880:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002882:	e008      	b.n	8002896 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002884:	f7fe f850 	bl	8000928 <HAL_GetTick>
 8002888:	4602      	mov	r2, r0
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	2b02      	cmp	r3, #2
 8002890:	d901      	bls.n	8002896 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002892:	2303      	movs	r3, #3
 8002894:	e045      	b.n	8002922 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002896:	4b06      	ldr	r3, [pc, #24]	; (80028b0 <HAL_RCC_OscConfig+0x470>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d1f0      	bne.n	8002884 <HAL_RCC_OscConfig+0x444>
 80028a2:	e03d      	b.n	8002920 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	699b      	ldr	r3, [r3, #24]
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d107      	bne.n	80028bc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	e038      	b.n	8002922 <HAL_RCC_OscConfig+0x4e2>
 80028b0:	40023800 	.word	0x40023800
 80028b4:	40007000 	.word	0x40007000
 80028b8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80028bc:	4b1b      	ldr	r3, [pc, #108]	; (800292c <HAL_RCC_OscConfig+0x4ec>)
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	699b      	ldr	r3, [r3, #24]
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d028      	beq.n	800291c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d121      	bne.n	800291c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028e2:	429a      	cmp	r2, r3
 80028e4:	d11a      	bne.n	800291c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028e6:	68fa      	ldr	r2, [r7, #12]
 80028e8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80028ec:	4013      	ands	r3, r2
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80028f2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d111      	bne.n	800291c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002902:	085b      	lsrs	r3, r3, #1
 8002904:	3b01      	subs	r3, #1
 8002906:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002908:	429a      	cmp	r2, r3
 800290a:	d107      	bne.n	800291c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002916:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002918:	429a      	cmp	r2, r3
 800291a:	d001      	beq.n	8002920 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	e000      	b.n	8002922 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002920:	2300      	movs	r3, #0
}
 8002922:	4618      	mov	r0, r3
 8002924:	3718      	adds	r7, #24
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	40023800 	.word	0x40023800

08002930 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b084      	sub	sp, #16
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
 8002938:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d101      	bne.n	8002944 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e0cc      	b.n	8002ade <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002944:	4b68      	ldr	r3, [pc, #416]	; (8002ae8 <HAL_RCC_ClockConfig+0x1b8>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 0307 	and.w	r3, r3, #7
 800294c:	683a      	ldr	r2, [r7, #0]
 800294e:	429a      	cmp	r2, r3
 8002950:	d90c      	bls.n	800296c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002952:	4b65      	ldr	r3, [pc, #404]	; (8002ae8 <HAL_RCC_ClockConfig+0x1b8>)
 8002954:	683a      	ldr	r2, [r7, #0]
 8002956:	b2d2      	uxtb	r2, r2
 8002958:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800295a:	4b63      	ldr	r3, [pc, #396]	; (8002ae8 <HAL_RCC_ClockConfig+0x1b8>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 0307 	and.w	r3, r3, #7
 8002962:	683a      	ldr	r2, [r7, #0]
 8002964:	429a      	cmp	r2, r3
 8002966:	d001      	beq.n	800296c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e0b8      	b.n	8002ade <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0302 	and.w	r3, r3, #2
 8002974:	2b00      	cmp	r3, #0
 8002976:	d020      	beq.n	80029ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 0304 	and.w	r3, r3, #4
 8002980:	2b00      	cmp	r3, #0
 8002982:	d005      	beq.n	8002990 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002984:	4b59      	ldr	r3, [pc, #356]	; (8002aec <HAL_RCC_ClockConfig+0x1bc>)
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	4a58      	ldr	r2, [pc, #352]	; (8002aec <HAL_RCC_ClockConfig+0x1bc>)
 800298a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800298e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 0308 	and.w	r3, r3, #8
 8002998:	2b00      	cmp	r3, #0
 800299a:	d005      	beq.n	80029a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800299c:	4b53      	ldr	r3, [pc, #332]	; (8002aec <HAL_RCC_ClockConfig+0x1bc>)
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	4a52      	ldr	r2, [pc, #328]	; (8002aec <HAL_RCC_ClockConfig+0x1bc>)
 80029a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80029a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029a8:	4b50      	ldr	r3, [pc, #320]	; (8002aec <HAL_RCC_ClockConfig+0x1bc>)
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	494d      	ldr	r1, [pc, #308]	; (8002aec <HAL_RCC_ClockConfig+0x1bc>)
 80029b6:	4313      	orrs	r3, r2
 80029b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 0301 	and.w	r3, r3, #1
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d044      	beq.n	8002a50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d107      	bne.n	80029de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029ce:	4b47      	ldr	r3, [pc, #284]	; (8002aec <HAL_RCC_ClockConfig+0x1bc>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d119      	bne.n	8002a0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e07f      	b.n	8002ade <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d003      	beq.n	80029ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029ea:	2b03      	cmp	r3, #3
 80029ec:	d107      	bne.n	80029fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029ee:	4b3f      	ldr	r3, [pc, #252]	; (8002aec <HAL_RCC_ClockConfig+0x1bc>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d109      	bne.n	8002a0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e06f      	b.n	8002ade <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029fe:	4b3b      	ldr	r3, [pc, #236]	; (8002aec <HAL_RCC_ClockConfig+0x1bc>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 0302 	and.w	r3, r3, #2
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d101      	bne.n	8002a0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e067      	b.n	8002ade <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a0e:	4b37      	ldr	r3, [pc, #220]	; (8002aec <HAL_RCC_ClockConfig+0x1bc>)
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	f023 0203 	bic.w	r2, r3, #3
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	4934      	ldr	r1, [pc, #208]	; (8002aec <HAL_RCC_ClockConfig+0x1bc>)
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a20:	f7fd ff82 	bl	8000928 <HAL_GetTick>
 8002a24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a26:	e00a      	b.n	8002a3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a28:	f7fd ff7e 	bl	8000928 <HAL_GetTick>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d901      	bls.n	8002a3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	e04f      	b.n	8002ade <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a3e:	4b2b      	ldr	r3, [pc, #172]	; (8002aec <HAL_RCC_ClockConfig+0x1bc>)
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	f003 020c 	and.w	r2, r3, #12
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d1eb      	bne.n	8002a28 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a50:	4b25      	ldr	r3, [pc, #148]	; (8002ae8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 0307 	and.w	r3, r3, #7
 8002a58:	683a      	ldr	r2, [r7, #0]
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	d20c      	bcs.n	8002a78 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a5e:	4b22      	ldr	r3, [pc, #136]	; (8002ae8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a60:	683a      	ldr	r2, [r7, #0]
 8002a62:	b2d2      	uxtb	r2, r2
 8002a64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a66:	4b20      	ldr	r3, [pc, #128]	; (8002ae8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 0307 	and.w	r3, r3, #7
 8002a6e:	683a      	ldr	r2, [r7, #0]
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d001      	beq.n	8002a78 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	e032      	b.n	8002ade <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0304 	and.w	r3, r3, #4
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d008      	beq.n	8002a96 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a84:	4b19      	ldr	r3, [pc, #100]	; (8002aec <HAL_RCC_ClockConfig+0x1bc>)
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	4916      	ldr	r1, [pc, #88]	; (8002aec <HAL_RCC_ClockConfig+0x1bc>)
 8002a92:	4313      	orrs	r3, r2
 8002a94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0308 	and.w	r3, r3, #8
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d009      	beq.n	8002ab6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002aa2:	4b12      	ldr	r3, [pc, #72]	; (8002aec <HAL_RCC_ClockConfig+0x1bc>)
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	691b      	ldr	r3, [r3, #16]
 8002aae:	00db      	lsls	r3, r3, #3
 8002ab0:	490e      	ldr	r1, [pc, #56]	; (8002aec <HAL_RCC_ClockConfig+0x1bc>)
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002ab6:	f000 f821 	bl	8002afc <HAL_RCC_GetSysClockFreq>
 8002aba:	4602      	mov	r2, r0
 8002abc:	4b0b      	ldr	r3, [pc, #44]	; (8002aec <HAL_RCC_ClockConfig+0x1bc>)
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	091b      	lsrs	r3, r3, #4
 8002ac2:	f003 030f 	and.w	r3, r3, #15
 8002ac6:	490a      	ldr	r1, [pc, #40]	; (8002af0 <HAL_RCC_ClockConfig+0x1c0>)
 8002ac8:	5ccb      	ldrb	r3, [r1, r3]
 8002aca:	fa22 f303 	lsr.w	r3, r2, r3
 8002ace:	4a09      	ldr	r2, [pc, #36]	; (8002af4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ad0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002ad2:	4b09      	ldr	r3, [pc, #36]	; (8002af8 <HAL_RCC_ClockConfig+0x1c8>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f7fd fee2 	bl	80008a0 <HAL_InitTick>

  return HAL_OK;
 8002adc:	2300      	movs	r3, #0
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3710      	adds	r7, #16
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	40023c00 	.word	0x40023c00
 8002aec:	40023800 	.word	0x40023800
 8002af0:	08006f7c 	.word	0x08006f7c
 8002af4:	20000000 	.word	0x20000000
 8002af8:	20000004 	.word	0x20000004

08002afc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002afc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b00:	b094      	sub	sp, #80	; 0x50
 8002b02:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002b04:	2300      	movs	r3, #0
 8002b06:	647b      	str	r3, [r7, #68]	; 0x44
 8002b08:	2300      	movs	r3, #0
 8002b0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002b10:	2300      	movs	r3, #0
 8002b12:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b14:	4b79      	ldr	r3, [pc, #484]	; (8002cfc <HAL_RCC_GetSysClockFreq+0x200>)
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	f003 030c 	and.w	r3, r3, #12
 8002b1c:	2b08      	cmp	r3, #8
 8002b1e:	d00d      	beq.n	8002b3c <HAL_RCC_GetSysClockFreq+0x40>
 8002b20:	2b08      	cmp	r3, #8
 8002b22:	f200 80e1 	bhi.w	8002ce8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d002      	beq.n	8002b30 <HAL_RCC_GetSysClockFreq+0x34>
 8002b2a:	2b04      	cmp	r3, #4
 8002b2c:	d003      	beq.n	8002b36 <HAL_RCC_GetSysClockFreq+0x3a>
 8002b2e:	e0db      	b.n	8002ce8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b30:	4b73      	ldr	r3, [pc, #460]	; (8002d00 <HAL_RCC_GetSysClockFreq+0x204>)
 8002b32:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002b34:	e0db      	b.n	8002cee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b36:	4b73      	ldr	r3, [pc, #460]	; (8002d04 <HAL_RCC_GetSysClockFreq+0x208>)
 8002b38:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002b3a:	e0d8      	b.n	8002cee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b3c:	4b6f      	ldr	r3, [pc, #444]	; (8002cfc <HAL_RCC_GetSysClockFreq+0x200>)
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b44:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b46:	4b6d      	ldr	r3, [pc, #436]	; (8002cfc <HAL_RCC_GetSysClockFreq+0x200>)
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d063      	beq.n	8002c1a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b52:	4b6a      	ldr	r3, [pc, #424]	; (8002cfc <HAL_RCC_GetSysClockFreq+0x200>)
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	099b      	lsrs	r3, r3, #6
 8002b58:	2200      	movs	r2, #0
 8002b5a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b5c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b64:	633b      	str	r3, [r7, #48]	; 0x30
 8002b66:	2300      	movs	r3, #0
 8002b68:	637b      	str	r3, [r7, #52]	; 0x34
 8002b6a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002b6e:	4622      	mov	r2, r4
 8002b70:	462b      	mov	r3, r5
 8002b72:	f04f 0000 	mov.w	r0, #0
 8002b76:	f04f 0100 	mov.w	r1, #0
 8002b7a:	0159      	lsls	r1, r3, #5
 8002b7c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b80:	0150      	lsls	r0, r2, #5
 8002b82:	4602      	mov	r2, r0
 8002b84:	460b      	mov	r3, r1
 8002b86:	4621      	mov	r1, r4
 8002b88:	1a51      	subs	r1, r2, r1
 8002b8a:	6139      	str	r1, [r7, #16]
 8002b8c:	4629      	mov	r1, r5
 8002b8e:	eb63 0301 	sbc.w	r3, r3, r1
 8002b92:	617b      	str	r3, [r7, #20]
 8002b94:	f04f 0200 	mov.w	r2, #0
 8002b98:	f04f 0300 	mov.w	r3, #0
 8002b9c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ba0:	4659      	mov	r1, fp
 8002ba2:	018b      	lsls	r3, r1, #6
 8002ba4:	4651      	mov	r1, sl
 8002ba6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002baa:	4651      	mov	r1, sl
 8002bac:	018a      	lsls	r2, r1, #6
 8002bae:	4651      	mov	r1, sl
 8002bb0:	ebb2 0801 	subs.w	r8, r2, r1
 8002bb4:	4659      	mov	r1, fp
 8002bb6:	eb63 0901 	sbc.w	r9, r3, r1
 8002bba:	f04f 0200 	mov.w	r2, #0
 8002bbe:	f04f 0300 	mov.w	r3, #0
 8002bc2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002bc6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002bca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002bce:	4690      	mov	r8, r2
 8002bd0:	4699      	mov	r9, r3
 8002bd2:	4623      	mov	r3, r4
 8002bd4:	eb18 0303 	adds.w	r3, r8, r3
 8002bd8:	60bb      	str	r3, [r7, #8]
 8002bda:	462b      	mov	r3, r5
 8002bdc:	eb49 0303 	adc.w	r3, r9, r3
 8002be0:	60fb      	str	r3, [r7, #12]
 8002be2:	f04f 0200 	mov.w	r2, #0
 8002be6:	f04f 0300 	mov.w	r3, #0
 8002bea:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002bee:	4629      	mov	r1, r5
 8002bf0:	024b      	lsls	r3, r1, #9
 8002bf2:	4621      	mov	r1, r4
 8002bf4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002bf8:	4621      	mov	r1, r4
 8002bfa:	024a      	lsls	r2, r1, #9
 8002bfc:	4610      	mov	r0, r2
 8002bfe:	4619      	mov	r1, r3
 8002c00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c02:	2200      	movs	r2, #0
 8002c04:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c06:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002c08:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002c0c:	f7fd fadc 	bl	80001c8 <__aeabi_uldivmod>
 8002c10:	4602      	mov	r2, r0
 8002c12:	460b      	mov	r3, r1
 8002c14:	4613      	mov	r3, r2
 8002c16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c18:	e058      	b.n	8002ccc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c1a:	4b38      	ldr	r3, [pc, #224]	; (8002cfc <HAL_RCC_GetSysClockFreq+0x200>)
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	099b      	lsrs	r3, r3, #6
 8002c20:	2200      	movs	r2, #0
 8002c22:	4618      	mov	r0, r3
 8002c24:	4611      	mov	r1, r2
 8002c26:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002c2a:	623b      	str	r3, [r7, #32]
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	627b      	str	r3, [r7, #36]	; 0x24
 8002c30:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002c34:	4642      	mov	r2, r8
 8002c36:	464b      	mov	r3, r9
 8002c38:	f04f 0000 	mov.w	r0, #0
 8002c3c:	f04f 0100 	mov.w	r1, #0
 8002c40:	0159      	lsls	r1, r3, #5
 8002c42:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c46:	0150      	lsls	r0, r2, #5
 8002c48:	4602      	mov	r2, r0
 8002c4a:	460b      	mov	r3, r1
 8002c4c:	4641      	mov	r1, r8
 8002c4e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002c52:	4649      	mov	r1, r9
 8002c54:	eb63 0b01 	sbc.w	fp, r3, r1
 8002c58:	f04f 0200 	mov.w	r2, #0
 8002c5c:	f04f 0300 	mov.w	r3, #0
 8002c60:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002c64:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002c68:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002c6c:	ebb2 040a 	subs.w	r4, r2, sl
 8002c70:	eb63 050b 	sbc.w	r5, r3, fp
 8002c74:	f04f 0200 	mov.w	r2, #0
 8002c78:	f04f 0300 	mov.w	r3, #0
 8002c7c:	00eb      	lsls	r3, r5, #3
 8002c7e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c82:	00e2      	lsls	r2, r4, #3
 8002c84:	4614      	mov	r4, r2
 8002c86:	461d      	mov	r5, r3
 8002c88:	4643      	mov	r3, r8
 8002c8a:	18e3      	adds	r3, r4, r3
 8002c8c:	603b      	str	r3, [r7, #0]
 8002c8e:	464b      	mov	r3, r9
 8002c90:	eb45 0303 	adc.w	r3, r5, r3
 8002c94:	607b      	str	r3, [r7, #4]
 8002c96:	f04f 0200 	mov.w	r2, #0
 8002c9a:	f04f 0300 	mov.w	r3, #0
 8002c9e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002ca2:	4629      	mov	r1, r5
 8002ca4:	028b      	lsls	r3, r1, #10
 8002ca6:	4621      	mov	r1, r4
 8002ca8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002cac:	4621      	mov	r1, r4
 8002cae:	028a      	lsls	r2, r1, #10
 8002cb0:	4610      	mov	r0, r2
 8002cb2:	4619      	mov	r1, r3
 8002cb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	61bb      	str	r3, [r7, #24]
 8002cba:	61fa      	str	r2, [r7, #28]
 8002cbc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002cc0:	f7fd fa82 	bl	80001c8 <__aeabi_uldivmod>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	460b      	mov	r3, r1
 8002cc8:	4613      	mov	r3, r2
 8002cca:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ccc:	4b0b      	ldr	r3, [pc, #44]	; (8002cfc <HAL_RCC_GetSysClockFreq+0x200>)
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	0c1b      	lsrs	r3, r3, #16
 8002cd2:	f003 0303 	and.w	r3, r3, #3
 8002cd6:	3301      	adds	r3, #1
 8002cd8:	005b      	lsls	r3, r3, #1
 8002cda:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002cdc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002cde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ce0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ce4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ce6:	e002      	b.n	8002cee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ce8:	4b05      	ldr	r3, [pc, #20]	; (8002d00 <HAL_RCC_GetSysClockFreq+0x204>)
 8002cea:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002cec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3750      	adds	r7, #80	; 0x50
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002cfa:	bf00      	nop
 8002cfc:	40023800 	.word	0x40023800
 8002d00:	00f42400 	.word	0x00f42400
 8002d04:	007a1200 	.word	0x007a1200

08002d08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d0c:	4b03      	ldr	r3, [pc, #12]	; (8002d1c <HAL_RCC_GetHCLKFreq+0x14>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr
 8002d1a:	bf00      	nop
 8002d1c:	20000000 	.word	0x20000000

08002d20 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002d20:	b084      	sub	sp, #16
 8002d22:	b580      	push	{r7, lr}
 8002d24:	b084      	sub	sp, #16
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	6078      	str	r0, [r7, #4]
 8002d2a:	f107 001c 	add.w	r0, r7, #28
 8002d2e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d122      	bne.n	8002d7e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d3c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002d4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d50:	687a      	ldr	r2, [r7, #4]
 8002d52:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002d60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d105      	bne.n	8002d72 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	68db      	ldr	r3, [r3, #12]
 8002d6a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f001 fbee 	bl	8004554 <USB_CoreReset>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	73fb      	strb	r3, [r7, #15]
 8002d7c:	e01a      	b.n	8002db4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	68db      	ldr	r3, [r3, #12]
 8002d82:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f001 fbe2 	bl	8004554 <USB_CoreReset>
 8002d90:	4603      	mov	r3, r0
 8002d92:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002d94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d106      	bne.n	8002da8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d9e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	639a      	str	r2, [r3, #56]	; 0x38
 8002da6:	e005      	b.n	8002db4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d10b      	bne.n	8002dd2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	f043 0206 	orr.w	r2, r3, #6
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	f043 0220 	orr.w	r2, r3, #32
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002dd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	3710      	adds	r7, #16
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002dde:	b004      	add	sp, #16
 8002de0:	4770      	bx	lr
	...

08002de4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b087      	sub	sp, #28
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	60f8      	str	r0, [r7, #12]
 8002dec:	60b9      	str	r1, [r7, #8]
 8002dee:	4613      	mov	r3, r2
 8002df0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8002df2:	79fb      	ldrb	r3, [r7, #7]
 8002df4:	2b02      	cmp	r3, #2
 8002df6:	d165      	bne.n	8002ec4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	4a41      	ldr	r2, [pc, #260]	; (8002f00 <USB_SetTurnaroundTime+0x11c>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d906      	bls.n	8002e0e <USB_SetTurnaroundTime+0x2a>
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	4a40      	ldr	r2, [pc, #256]	; (8002f04 <USB_SetTurnaroundTime+0x120>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d202      	bcs.n	8002e0e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8002e08:	230f      	movs	r3, #15
 8002e0a:	617b      	str	r3, [r7, #20]
 8002e0c:	e062      	b.n	8002ed4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	4a3c      	ldr	r2, [pc, #240]	; (8002f04 <USB_SetTurnaroundTime+0x120>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d306      	bcc.n	8002e24 <USB_SetTurnaroundTime+0x40>
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	4a3b      	ldr	r2, [pc, #236]	; (8002f08 <USB_SetTurnaroundTime+0x124>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d202      	bcs.n	8002e24 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8002e1e:	230e      	movs	r3, #14
 8002e20:	617b      	str	r3, [r7, #20]
 8002e22:	e057      	b.n	8002ed4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	4a38      	ldr	r2, [pc, #224]	; (8002f08 <USB_SetTurnaroundTime+0x124>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d306      	bcc.n	8002e3a <USB_SetTurnaroundTime+0x56>
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	4a37      	ldr	r2, [pc, #220]	; (8002f0c <USB_SetTurnaroundTime+0x128>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d202      	bcs.n	8002e3a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8002e34:	230d      	movs	r3, #13
 8002e36:	617b      	str	r3, [r7, #20]
 8002e38:	e04c      	b.n	8002ed4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	4a33      	ldr	r2, [pc, #204]	; (8002f0c <USB_SetTurnaroundTime+0x128>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d306      	bcc.n	8002e50 <USB_SetTurnaroundTime+0x6c>
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	4a32      	ldr	r2, [pc, #200]	; (8002f10 <USB_SetTurnaroundTime+0x12c>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d802      	bhi.n	8002e50 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8002e4a:	230c      	movs	r3, #12
 8002e4c:	617b      	str	r3, [r7, #20]
 8002e4e:	e041      	b.n	8002ed4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	4a2f      	ldr	r2, [pc, #188]	; (8002f10 <USB_SetTurnaroundTime+0x12c>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d906      	bls.n	8002e66 <USB_SetTurnaroundTime+0x82>
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	4a2e      	ldr	r2, [pc, #184]	; (8002f14 <USB_SetTurnaroundTime+0x130>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d802      	bhi.n	8002e66 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8002e60:	230b      	movs	r3, #11
 8002e62:	617b      	str	r3, [r7, #20]
 8002e64:	e036      	b.n	8002ed4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	4a2a      	ldr	r2, [pc, #168]	; (8002f14 <USB_SetTurnaroundTime+0x130>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d906      	bls.n	8002e7c <USB_SetTurnaroundTime+0x98>
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	4a29      	ldr	r2, [pc, #164]	; (8002f18 <USB_SetTurnaroundTime+0x134>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d802      	bhi.n	8002e7c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8002e76:	230a      	movs	r3, #10
 8002e78:	617b      	str	r3, [r7, #20]
 8002e7a:	e02b      	b.n	8002ed4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	4a26      	ldr	r2, [pc, #152]	; (8002f18 <USB_SetTurnaroundTime+0x134>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d906      	bls.n	8002e92 <USB_SetTurnaroundTime+0xae>
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	4a25      	ldr	r2, [pc, #148]	; (8002f1c <USB_SetTurnaroundTime+0x138>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d202      	bcs.n	8002e92 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8002e8c:	2309      	movs	r3, #9
 8002e8e:	617b      	str	r3, [r7, #20]
 8002e90:	e020      	b.n	8002ed4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	4a21      	ldr	r2, [pc, #132]	; (8002f1c <USB_SetTurnaroundTime+0x138>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d306      	bcc.n	8002ea8 <USB_SetTurnaroundTime+0xc4>
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	4a20      	ldr	r2, [pc, #128]	; (8002f20 <USB_SetTurnaroundTime+0x13c>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d802      	bhi.n	8002ea8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8002ea2:	2308      	movs	r3, #8
 8002ea4:	617b      	str	r3, [r7, #20]
 8002ea6:	e015      	b.n	8002ed4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	4a1d      	ldr	r2, [pc, #116]	; (8002f20 <USB_SetTurnaroundTime+0x13c>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d906      	bls.n	8002ebe <USB_SetTurnaroundTime+0xda>
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	4a1c      	ldr	r2, [pc, #112]	; (8002f24 <USB_SetTurnaroundTime+0x140>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d202      	bcs.n	8002ebe <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8002eb8:	2307      	movs	r3, #7
 8002eba:	617b      	str	r3, [r7, #20]
 8002ebc:	e00a      	b.n	8002ed4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8002ebe:	2306      	movs	r3, #6
 8002ec0:	617b      	str	r3, [r7, #20]
 8002ec2:	e007      	b.n	8002ed4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8002ec4:	79fb      	ldrb	r3, [r7, #7]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d102      	bne.n	8002ed0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8002eca:	2309      	movs	r3, #9
 8002ecc:	617b      	str	r3, [r7, #20]
 8002ece:	e001      	b.n	8002ed4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8002ed0:	2309      	movs	r3, #9
 8002ed2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	68da      	ldr	r2, [r3, #12]
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	029b      	lsls	r3, r3, #10
 8002ee8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8002eec:	431a      	orrs	r2, r3
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002ef2:	2300      	movs	r3, #0
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	371c      	adds	r7, #28
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr
 8002f00:	00d8acbf 	.word	0x00d8acbf
 8002f04:	00e4e1c0 	.word	0x00e4e1c0
 8002f08:	00f42400 	.word	0x00f42400
 8002f0c:	01067380 	.word	0x01067380
 8002f10:	011a499f 	.word	0x011a499f
 8002f14:	01312cff 	.word	0x01312cff
 8002f18:	014ca43f 	.word	0x014ca43f
 8002f1c:	016e3600 	.word	0x016e3600
 8002f20:	01a6ab1f 	.word	0x01a6ab1f
 8002f24:	01e84800 	.word	0x01e84800

08002f28 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	f043 0201 	orr.w	r2, r3, #1
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002f3c:	2300      	movs	r3, #0
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	370c      	adds	r7, #12
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr

08002f4a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002f4a:	b480      	push	{r7}
 8002f4c:	b083      	sub	sp, #12
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	f023 0201 	bic.w	r2, r3, #1
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002f5e:	2300      	movs	r3, #0
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	370c      	adds	r7, #12
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr

08002f6c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b084      	sub	sp, #16
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
 8002f74:	460b      	mov	r3, r1
 8002f76:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002f88:	78fb      	ldrb	r3, [r7, #3]
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d115      	bne.n	8002fba <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	68db      	ldr	r3, [r3, #12]
 8002f92:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002f9a:	2001      	movs	r0, #1
 8002f9c:	f7fd fcd0 	bl	8000940 <HAL_Delay>
      ms++;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	3301      	adds	r3, #1
 8002fa4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f001 fa45 	bl	8004436 <USB_GetMode>
 8002fac:	4603      	mov	r3, r0
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d01e      	beq.n	8002ff0 <USB_SetCurrentMode+0x84>
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2b31      	cmp	r3, #49	; 0x31
 8002fb6:	d9f0      	bls.n	8002f9a <USB_SetCurrentMode+0x2e>
 8002fb8:	e01a      	b.n	8002ff0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8002fba:	78fb      	ldrb	r3, [r7, #3]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d115      	bne.n	8002fec <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002fcc:	2001      	movs	r0, #1
 8002fce:	f7fd fcb7 	bl	8000940 <HAL_Delay>
      ms++;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	3301      	adds	r3, #1
 8002fd6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8002fd8:	6878      	ldr	r0, [r7, #4]
 8002fda:	f001 fa2c 	bl	8004436 <USB_GetMode>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d005      	beq.n	8002ff0 <USB_SetCurrentMode+0x84>
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2b31      	cmp	r3, #49	; 0x31
 8002fe8:	d9f0      	bls.n	8002fcc <USB_SetCurrentMode+0x60>
 8002fea:	e001      	b.n	8002ff0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	e005      	b.n	8002ffc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2b32      	cmp	r3, #50	; 0x32
 8002ff4:	d101      	bne.n	8002ffa <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e000      	b.n	8002ffc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8002ffa:	2300      	movs	r3, #0
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	3710      	adds	r7, #16
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}

08003004 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003004:	b084      	sub	sp, #16
 8003006:	b580      	push	{r7, lr}
 8003008:	b086      	sub	sp, #24
 800300a:	af00      	add	r7, sp, #0
 800300c:	6078      	str	r0, [r7, #4]
 800300e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003012:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003016:	2300      	movs	r3, #0
 8003018:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800301e:	2300      	movs	r3, #0
 8003020:	613b      	str	r3, [r7, #16]
 8003022:	e009      	b.n	8003038 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003024:	687a      	ldr	r2, [r7, #4]
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	3340      	adds	r3, #64	; 0x40
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	4413      	add	r3, r2
 800302e:	2200      	movs	r2, #0
 8003030:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	3301      	adds	r3, #1
 8003036:	613b      	str	r3, [r7, #16]
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	2b0e      	cmp	r3, #14
 800303c:	d9f2      	bls.n	8003024 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800303e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003040:	2b00      	cmp	r3, #0
 8003042:	d11c      	bne.n	800307e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	68fa      	ldr	r2, [r7, #12]
 800304e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003052:	f043 0302 	orr.w	r3, r3, #2
 8003056:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800305c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003068:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003074:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	639a      	str	r2, [r3, #56]	; 0x38
 800307c:	e00b      	b.n	8003096 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003082:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800308e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800309c:	461a      	mov	r2, r3
 800309e:	2300      	movs	r3, #0
 80030a0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030a8:	4619      	mov	r1, r3
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030b0:	461a      	mov	r2, r3
 80030b2:	680b      	ldr	r3, [r1, #0]
 80030b4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80030b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d10c      	bne.n	80030d6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80030bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d104      	bne.n	80030cc <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80030c2:	2100      	movs	r1, #0
 80030c4:	6878      	ldr	r0, [r7, #4]
 80030c6:	f000 f965 	bl	8003394 <USB_SetDevSpeed>
 80030ca:	e008      	b.n	80030de <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80030cc:	2101      	movs	r1, #1
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f000 f960 	bl	8003394 <USB_SetDevSpeed>
 80030d4:	e003      	b.n	80030de <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80030d6:	2103      	movs	r1, #3
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	f000 f95b 	bl	8003394 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80030de:	2110      	movs	r1, #16
 80030e0:	6878      	ldr	r0, [r7, #4]
 80030e2:	f000 f8f3 	bl	80032cc <USB_FlushTxFifo>
 80030e6:	4603      	mov	r3, r0
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d001      	beq.n	80030f0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80030f0:	6878      	ldr	r0, [r7, #4]
 80030f2:	f000 f91f 	bl	8003334 <USB_FlushRxFifo>
 80030f6:	4603      	mov	r3, r0
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d001      	beq.n	8003100 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003106:	461a      	mov	r2, r3
 8003108:	2300      	movs	r3, #0
 800310a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003112:	461a      	mov	r2, r3
 8003114:	2300      	movs	r3, #0
 8003116:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800311e:	461a      	mov	r2, r3
 8003120:	2300      	movs	r3, #0
 8003122:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003124:	2300      	movs	r3, #0
 8003126:	613b      	str	r3, [r7, #16]
 8003128:	e043      	b.n	80031b2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	015a      	lsls	r2, r3, #5
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	4413      	add	r3, r2
 8003132:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800313c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003140:	d118      	bne.n	8003174 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d10a      	bne.n	800315e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	015a      	lsls	r2, r3, #5
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	4413      	add	r3, r2
 8003150:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003154:	461a      	mov	r2, r3
 8003156:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800315a:	6013      	str	r3, [r2, #0]
 800315c:	e013      	b.n	8003186 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	015a      	lsls	r2, r3, #5
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	4413      	add	r3, r2
 8003166:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800316a:	461a      	mov	r2, r3
 800316c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003170:	6013      	str	r3, [r2, #0]
 8003172:	e008      	b.n	8003186 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	015a      	lsls	r2, r3, #5
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	4413      	add	r3, r2
 800317c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003180:	461a      	mov	r2, r3
 8003182:	2300      	movs	r3, #0
 8003184:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	015a      	lsls	r2, r3, #5
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	4413      	add	r3, r2
 800318e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003192:	461a      	mov	r2, r3
 8003194:	2300      	movs	r3, #0
 8003196:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	015a      	lsls	r2, r3, #5
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	4413      	add	r3, r2
 80031a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031a4:	461a      	mov	r2, r3
 80031a6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80031aa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	3301      	adds	r3, #1
 80031b0:	613b      	str	r3, [r7, #16]
 80031b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b4:	693a      	ldr	r2, [r7, #16]
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d3b7      	bcc.n	800312a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80031ba:	2300      	movs	r3, #0
 80031bc:	613b      	str	r3, [r7, #16]
 80031be:	e043      	b.n	8003248 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	015a      	lsls	r2, r3, #5
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	4413      	add	r3, r2
 80031c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80031d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80031d6:	d118      	bne.n	800320a <USB_DevInit+0x206>
    {
      if (i == 0U)
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d10a      	bne.n	80031f4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	015a      	lsls	r2, r3, #5
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	4413      	add	r3, r2
 80031e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031ea:	461a      	mov	r2, r3
 80031ec:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80031f0:	6013      	str	r3, [r2, #0]
 80031f2:	e013      	b.n	800321c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	015a      	lsls	r2, r3, #5
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	4413      	add	r3, r2
 80031fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003200:	461a      	mov	r2, r3
 8003202:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003206:	6013      	str	r3, [r2, #0]
 8003208:	e008      	b.n	800321c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	015a      	lsls	r2, r3, #5
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	4413      	add	r3, r2
 8003212:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003216:	461a      	mov	r2, r3
 8003218:	2300      	movs	r3, #0
 800321a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	015a      	lsls	r2, r3, #5
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	4413      	add	r3, r2
 8003224:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003228:	461a      	mov	r2, r3
 800322a:	2300      	movs	r3, #0
 800322c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	015a      	lsls	r2, r3, #5
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	4413      	add	r3, r2
 8003236:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800323a:	461a      	mov	r2, r3
 800323c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003240:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	3301      	adds	r3, #1
 8003246:	613b      	str	r3, [r7, #16]
 8003248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324a:	693a      	ldr	r2, [r7, #16]
 800324c:	429a      	cmp	r2, r3
 800324e:	d3b7      	bcc.n	80031c0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003256:	691b      	ldr	r3, [r3, #16]
 8003258:	68fa      	ldr	r2, [r7, #12]
 800325a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800325e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003262:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2200      	movs	r2, #0
 8003268:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003270:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003274:	2b00      	cmp	r3, #0
 8003276:	d105      	bne.n	8003284 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	699b      	ldr	r3, [r3, #24]
 800327c:	f043 0210 	orr.w	r2, r3, #16
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	699a      	ldr	r2, [r3, #24]
 8003288:	4b0f      	ldr	r3, [pc, #60]	; (80032c8 <USB_DevInit+0x2c4>)
 800328a:	4313      	orrs	r3, r2
 800328c:	687a      	ldr	r2, [r7, #4]
 800328e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003290:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003292:	2b00      	cmp	r3, #0
 8003294:	d005      	beq.n	80032a2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	699b      	ldr	r3, [r3, #24]
 800329a:	f043 0208 	orr.w	r2, r3, #8
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80032a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d107      	bne.n	80032b8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	699b      	ldr	r3, [r3, #24]
 80032ac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80032b0:	f043 0304 	orr.w	r3, r3, #4
 80032b4:	687a      	ldr	r2, [r7, #4]
 80032b6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80032b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3718      	adds	r7, #24
 80032be:	46bd      	mov	sp, r7
 80032c0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80032c4:	b004      	add	sp, #16
 80032c6:	4770      	bx	lr
 80032c8:	803c3800 	.word	0x803c3800

080032cc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b085      	sub	sp, #20
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
 80032d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80032d6:	2300      	movs	r3, #0
 80032d8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	3301      	adds	r3, #1
 80032de:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	4a13      	ldr	r2, [pc, #76]	; (8003330 <USB_FlushTxFifo+0x64>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d901      	bls.n	80032ec <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80032e8:	2303      	movs	r3, #3
 80032ea:	e01b      	b.n	8003324 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	691b      	ldr	r3, [r3, #16]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	daf2      	bge.n	80032da <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80032f4:	2300      	movs	r3, #0
 80032f6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	019b      	lsls	r3, r3, #6
 80032fc:	f043 0220 	orr.w	r2, r3, #32
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	3301      	adds	r3, #1
 8003308:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	4a08      	ldr	r2, [pc, #32]	; (8003330 <USB_FlushTxFifo+0x64>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d901      	bls.n	8003316 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003312:	2303      	movs	r3, #3
 8003314:	e006      	b.n	8003324 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	691b      	ldr	r3, [r3, #16]
 800331a:	f003 0320 	and.w	r3, r3, #32
 800331e:	2b20      	cmp	r3, #32
 8003320:	d0f0      	beq.n	8003304 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003322:	2300      	movs	r3, #0
}
 8003324:	4618      	mov	r0, r3
 8003326:	3714      	adds	r7, #20
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr
 8003330:	00030d40 	.word	0x00030d40

08003334 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003334:	b480      	push	{r7}
 8003336:	b085      	sub	sp, #20
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800333c:	2300      	movs	r3, #0
 800333e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	3301      	adds	r3, #1
 8003344:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	4a11      	ldr	r2, [pc, #68]	; (8003390 <USB_FlushRxFifo+0x5c>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d901      	bls.n	8003352 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e018      	b.n	8003384 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	691b      	ldr	r3, [r3, #16]
 8003356:	2b00      	cmp	r3, #0
 8003358:	daf2      	bge.n	8003340 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800335a:	2300      	movs	r3, #0
 800335c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2210      	movs	r2, #16
 8003362:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	3301      	adds	r3, #1
 8003368:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	4a08      	ldr	r2, [pc, #32]	; (8003390 <USB_FlushRxFifo+0x5c>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d901      	bls.n	8003376 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003372:	2303      	movs	r3, #3
 8003374:	e006      	b.n	8003384 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	691b      	ldr	r3, [r3, #16]
 800337a:	f003 0310 	and.w	r3, r3, #16
 800337e:	2b10      	cmp	r3, #16
 8003380:	d0f0      	beq.n	8003364 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003382:	2300      	movs	r3, #0
}
 8003384:	4618      	mov	r0, r3
 8003386:	3714      	adds	r7, #20
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr
 8003390:	00030d40 	.word	0x00030d40

08003394 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003394:	b480      	push	{r7}
 8003396:	b085      	sub	sp, #20
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
 800339c:	460b      	mov	r3, r1
 800339e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	78fb      	ldrb	r3, [r7, #3]
 80033ae:	68f9      	ldr	r1, [r7, #12]
 80033b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80033b4:	4313      	orrs	r3, r2
 80033b6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80033b8:	2300      	movs	r3, #0
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3714      	adds	r7, #20
 80033be:	46bd      	mov	sp, r7
 80033c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c4:	4770      	bx	lr

080033c6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80033c6:	b480      	push	{r7}
 80033c8:	b087      	sub	sp, #28
 80033ca:	af00      	add	r7, sp, #0
 80033cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	f003 0306 	and.w	r3, r3, #6
 80033de:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d102      	bne.n	80033ec <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80033e6:	2300      	movs	r3, #0
 80033e8:	75fb      	strb	r3, [r7, #23]
 80033ea:	e00a      	b.n	8003402 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	d002      	beq.n	80033f8 <USB_GetDevSpeed+0x32>
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2b06      	cmp	r3, #6
 80033f6:	d102      	bne.n	80033fe <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80033f8:	2302      	movs	r3, #2
 80033fa:	75fb      	strb	r3, [r7, #23]
 80033fc:	e001      	b.n	8003402 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80033fe:	230f      	movs	r3, #15
 8003400:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003402:	7dfb      	ldrb	r3, [r7, #23]
}
 8003404:	4618      	mov	r0, r3
 8003406:	371c      	adds	r7, #28
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr

08003410 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003410:	b480      	push	{r7}
 8003412:	b085      	sub	sp, #20
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
 8003418:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	781b      	ldrb	r3, [r3, #0]
 8003422:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	785b      	ldrb	r3, [r3, #1]
 8003428:	2b01      	cmp	r3, #1
 800342a:	d13a      	bne.n	80034a2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003432:	69da      	ldr	r2, [r3, #28]
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	781b      	ldrb	r3, [r3, #0]
 8003438:	f003 030f 	and.w	r3, r3, #15
 800343c:	2101      	movs	r1, #1
 800343e:	fa01 f303 	lsl.w	r3, r1, r3
 8003442:	b29b      	uxth	r3, r3
 8003444:	68f9      	ldr	r1, [r7, #12]
 8003446:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800344a:	4313      	orrs	r3, r2
 800344c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	015a      	lsls	r2, r3, #5
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	4413      	add	r3, r2
 8003456:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003460:	2b00      	cmp	r3, #0
 8003462:	d155      	bne.n	8003510 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	015a      	lsls	r2, r3, #5
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	4413      	add	r3, r2
 800346c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	68db      	ldr	r3, [r3, #12]
 8003476:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	791b      	ldrb	r3, [r3, #4]
 800347e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003480:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	059b      	lsls	r3, r3, #22
 8003486:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003488:	4313      	orrs	r3, r2
 800348a:	68ba      	ldr	r2, [r7, #8]
 800348c:	0151      	lsls	r1, r2, #5
 800348e:	68fa      	ldr	r2, [r7, #12]
 8003490:	440a      	add	r2, r1
 8003492:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003496:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800349a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800349e:	6013      	str	r3, [r2, #0]
 80034a0:	e036      	b.n	8003510 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034a8:	69da      	ldr	r2, [r3, #28]
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	781b      	ldrb	r3, [r3, #0]
 80034ae:	f003 030f 	and.w	r3, r3, #15
 80034b2:	2101      	movs	r1, #1
 80034b4:	fa01 f303 	lsl.w	r3, r1, r3
 80034b8:	041b      	lsls	r3, r3, #16
 80034ba:	68f9      	ldr	r1, [r7, #12]
 80034bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80034c0:	4313      	orrs	r3, r2
 80034c2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	015a      	lsls	r2, r3, #5
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	4413      	add	r3, r2
 80034cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d11a      	bne.n	8003510 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	015a      	lsls	r2, r3, #5
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	4413      	add	r3, r2
 80034e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	68db      	ldr	r3, [r3, #12]
 80034ec:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	791b      	ldrb	r3, [r3, #4]
 80034f4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80034f6:	430b      	orrs	r3, r1
 80034f8:	4313      	orrs	r3, r2
 80034fa:	68ba      	ldr	r2, [r7, #8]
 80034fc:	0151      	lsls	r1, r2, #5
 80034fe:	68fa      	ldr	r2, [r7, #12]
 8003500:	440a      	add	r2, r1
 8003502:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003506:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800350a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800350e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003510:	2300      	movs	r3, #0
}
 8003512:	4618      	mov	r0, r3
 8003514:	3714      	adds	r7, #20
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr
	...

08003520 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003520:	b480      	push	{r7}
 8003522:	b085      	sub	sp, #20
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
 8003528:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	781b      	ldrb	r3, [r3, #0]
 8003532:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	785b      	ldrb	r3, [r3, #1]
 8003538:	2b01      	cmp	r3, #1
 800353a:	d161      	bne.n	8003600 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	015a      	lsls	r2, r3, #5
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	4413      	add	r3, r2
 8003544:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800354e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003552:	d11f      	bne.n	8003594 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	015a      	lsls	r2, r3, #5
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	4413      	add	r3, r2
 800355c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	68ba      	ldr	r2, [r7, #8]
 8003564:	0151      	lsls	r1, r2, #5
 8003566:	68fa      	ldr	r2, [r7, #12]
 8003568:	440a      	add	r2, r1
 800356a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800356e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003572:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	015a      	lsls	r2, r3, #5
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	4413      	add	r3, r2
 800357c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	68ba      	ldr	r2, [r7, #8]
 8003584:	0151      	lsls	r1, r2, #5
 8003586:	68fa      	ldr	r2, [r7, #12]
 8003588:	440a      	add	r2, r1
 800358a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800358e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003592:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800359a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	781b      	ldrb	r3, [r3, #0]
 80035a0:	f003 030f 	and.w	r3, r3, #15
 80035a4:	2101      	movs	r1, #1
 80035a6:	fa01 f303 	lsl.w	r3, r1, r3
 80035aa:	b29b      	uxth	r3, r3
 80035ac:	43db      	mvns	r3, r3
 80035ae:	68f9      	ldr	r1, [r7, #12]
 80035b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80035b4:	4013      	ands	r3, r2
 80035b6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035be:	69da      	ldr	r2, [r3, #28]
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	781b      	ldrb	r3, [r3, #0]
 80035c4:	f003 030f 	and.w	r3, r3, #15
 80035c8:	2101      	movs	r1, #1
 80035ca:	fa01 f303 	lsl.w	r3, r1, r3
 80035ce:	b29b      	uxth	r3, r3
 80035d0:	43db      	mvns	r3, r3
 80035d2:	68f9      	ldr	r1, [r7, #12]
 80035d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80035d8:	4013      	ands	r3, r2
 80035da:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	015a      	lsls	r2, r3, #5
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	4413      	add	r3, r2
 80035e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	0159      	lsls	r1, r3, #5
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	440b      	add	r3, r1
 80035f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035f6:	4619      	mov	r1, r3
 80035f8:	4b35      	ldr	r3, [pc, #212]	; (80036d0 <USB_DeactivateEndpoint+0x1b0>)
 80035fa:	4013      	ands	r3, r2
 80035fc:	600b      	str	r3, [r1, #0]
 80035fe:	e060      	b.n	80036c2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	015a      	lsls	r2, r3, #5
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	4413      	add	r3, r2
 8003608:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003612:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003616:	d11f      	bne.n	8003658 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	015a      	lsls	r2, r3, #5
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	4413      	add	r3, r2
 8003620:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	68ba      	ldr	r2, [r7, #8]
 8003628:	0151      	lsls	r1, r2, #5
 800362a:	68fa      	ldr	r2, [r7, #12]
 800362c:	440a      	add	r2, r1
 800362e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003632:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003636:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	015a      	lsls	r2, r3, #5
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	4413      	add	r3, r2
 8003640:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	68ba      	ldr	r2, [r7, #8]
 8003648:	0151      	lsls	r1, r2, #5
 800364a:	68fa      	ldr	r2, [r7, #12]
 800364c:	440a      	add	r2, r1
 800364e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003652:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003656:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800365e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	781b      	ldrb	r3, [r3, #0]
 8003664:	f003 030f 	and.w	r3, r3, #15
 8003668:	2101      	movs	r1, #1
 800366a:	fa01 f303 	lsl.w	r3, r1, r3
 800366e:	041b      	lsls	r3, r3, #16
 8003670:	43db      	mvns	r3, r3
 8003672:	68f9      	ldr	r1, [r7, #12]
 8003674:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003678:	4013      	ands	r3, r2
 800367a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003682:	69da      	ldr	r2, [r3, #28]
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	781b      	ldrb	r3, [r3, #0]
 8003688:	f003 030f 	and.w	r3, r3, #15
 800368c:	2101      	movs	r1, #1
 800368e:	fa01 f303 	lsl.w	r3, r1, r3
 8003692:	041b      	lsls	r3, r3, #16
 8003694:	43db      	mvns	r3, r3
 8003696:	68f9      	ldr	r1, [r7, #12]
 8003698:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800369c:	4013      	ands	r3, r2
 800369e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	015a      	lsls	r2, r3, #5
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	4413      	add	r3, r2
 80036a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	0159      	lsls	r1, r3, #5
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	440b      	add	r3, r1
 80036b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036ba:	4619      	mov	r1, r3
 80036bc:	4b05      	ldr	r3, [pc, #20]	; (80036d4 <USB_DeactivateEndpoint+0x1b4>)
 80036be:	4013      	ands	r3, r2
 80036c0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80036c2:	2300      	movs	r3, #0
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	3714      	adds	r7, #20
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr
 80036d0:	ec337800 	.word	0xec337800
 80036d4:	eff37800 	.word	0xeff37800

080036d8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b08a      	sub	sp, #40	; 0x28
 80036dc:	af02      	add	r7, sp, #8
 80036de:	60f8      	str	r0, [r7, #12]
 80036e0:	60b9      	str	r1, [r7, #8]
 80036e2:	4613      	mov	r3, r2
 80036e4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	781b      	ldrb	r3, [r3, #0]
 80036ee:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	785b      	ldrb	r3, [r3, #1]
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	f040 815c 	bne.w	80039b2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	699b      	ldr	r3, [r3, #24]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d132      	bne.n	8003768 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003702:	69bb      	ldr	r3, [r7, #24]
 8003704:	015a      	lsls	r2, r3, #5
 8003706:	69fb      	ldr	r3, [r7, #28]
 8003708:	4413      	add	r3, r2
 800370a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800370e:	691b      	ldr	r3, [r3, #16]
 8003710:	69ba      	ldr	r2, [r7, #24]
 8003712:	0151      	lsls	r1, r2, #5
 8003714:	69fa      	ldr	r2, [r7, #28]
 8003716:	440a      	add	r2, r1
 8003718:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800371c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003720:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003724:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003726:	69bb      	ldr	r3, [r7, #24]
 8003728:	015a      	lsls	r2, r3, #5
 800372a:	69fb      	ldr	r3, [r7, #28]
 800372c:	4413      	add	r3, r2
 800372e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003732:	691b      	ldr	r3, [r3, #16]
 8003734:	69ba      	ldr	r2, [r7, #24]
 8003736:	0151      	lsls	r1, r2, #5
 8003738:	69fa      	ldr	r2, [r7, #28]
 800373a:	440a      	add	r2, r1
 800373c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003740:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003744:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003746:	69bb      	ldr	r3, [r7, #24]
 8003748:	015a      	lsls	r2, r3, #5
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	4413      	add	r3, r2
 800374e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003752:	691b      	ldr	r3, [r3, #16]
 8003754:	69ba      	ldr	r2, [r7, #24]
 8003756:	0151      	lsls	r1, r2, #5
 8003758:	69fa      	ldr	r2, [r7, #28]
 800375a:	440a      	add	r2, r1
 800375c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003760:	0cdb      	lsrs	r3, r3, #19
 8003762:	04db      	lsls	r3, r3, #19
 8003764:	6113      	str	r3, [r2, #16]
 8003766:	e074      	b.n	8003852 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003768:	69bb      	ldr	r3, [r7, #24]
 800376a:	015a      	lsls	r2, r3, #5
 800376c:	69fb      	ldr	r3, [r7, #28]
 800376e:	4413      	add	r3, r2
 8003770:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003774:	691b      	ldr	r3, [r3, #16]
 8003776:	69ba      	ldr	r2, [r7, #24]
 8003778:	0151      	lsls	r1, r2, #5
 800377a:	69fa      	ldr	r2, [r7, #28]
 800377c:	440a      	add	r2, r1
 800377e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003782:	0cdb      	lsrs	r3, r3, #19
 8003784:	04db      	lsls	r3, r3, #19
 8003786:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003788:	69bb      	ldr	r3, [r7, #24]
 800378a:	015a      	lsls	r2, r3, #5
 800378c:	69fb      	ldr	r3, [r7, #28]
 800378e:	4413      	add	r3, r2
 8003790:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003794:	691b      	ldr	r3, [r3, #16]
 8003796:	69ba      	ldr	r2, [r7, #24]
 8003798:	0151      	lsls	r1, r2, #5
 800379a:	69fa      	ldr	r2, [r7, #28]
 800379c:	440a      	add	r2, r1
 800379e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80037a2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80037a6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80037aa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80037ac:	69bb      	ldr	r3, [r7, #24]
 80037ae:	015a      	lsls	r2, r3, #5
 80037b0:	69fb      	ldr	r3, [r7, #28]
 80037b2:	4413      	add	r3, r2
 80037b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037b8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	6999      	ldr	r1, [r3, #24]
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	68db      	ldr	r3, [r3, #12]
 80037c2:	440b      	add	r3, r1
 80037c4:	1e59      	subs	r1, r3, #1
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	68db      	ldr	r3, [r3, #12]
 80037ca:	fbb1 f3f3 	udiv	r3, r1, r3
 80037ce:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80037d0:	4b9d      	ldr	r3, [pc, #628]	; (8003a48 <USB_EPStartXfer+0x370>)
 80037d2:	400b      	ands	r3, r1
 80037d4:	69b9      	ldr	r1, [r7, #24]
 80037d6:	0148      	lsls	r0, r1, #5
 80037d8:	69f9      	ldr	r1, [r7, #28]
 80037da:	4401      	add	r1, r0
 80037dc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80037e0:	4313      	orrs	r3, r2
 80037e2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80037e4:	69bb      	ldr	r3, [r7, #24]
 80037e6:	015a      	lsls	r2, r3, #5
 80037e8:	69fb      	ldr	r3, [r7, #28]
 80037ea:	4413      	add	r3, r2
 80037ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037f0:	691a      	ldr	r2, [r3, #16]
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	699b      	ldr	r3, [r3, #24]
 80037f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037fa:	69b9      	ldr	r1, [r7, #24]
 80037fc:	0148      	lsls	r0, r1, #5
 80037fe:	69f9      	ldr	r1, [r7, #28]
 8003800:	4401      	add	r1, r0
 8003802:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003806:	4313      	orrs	r3, r2
 8003808:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	791b      	ldrb	r3, [r3, #4]
 800380e:	2b01      	cmp	r3, #1
 8003810:	d11f      	bne.n	8003852 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003812:	69bb      	ldr	r3, [r7, #24]
 8003814:	015a      	lsls	r2, r3, #5
 8003816:	69fb      	ldr	r3, [r7, #28]
 8003818:	4413      	add	r3, r2
 800381a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800381e:	691b      	ldr	r3, [r3, #16]
 8003820:	69ba      	ldr	r2, [r7, #24]
 8003822:	0151      	lsls	r1, r2, #5
 8003824:	69fa      	ldr	r2, [r7, #28]
 8003826:	440a      	add	r2, r1
 8003828:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800382c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003830:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003832:	69bb      	ldr	r3, [r7, #24]
 8003834:	015a      	lsls	r2, r3, #5
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	4413      	add	r3, r2
 800383a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800383e:	691b      	ldr	r3, [r3, #16]
 8003840:	69ba      	ldr	r2, [r7, #24]
 8003842:	0151      	lsls	r1, r2, #5
 8003844:	69fa      	ldr	r2, [r7, #28]
 8003846:	440a      	add	r2, r1
 8003848:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800384c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003850:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8003852:	79fb      	ldrb	r3, [r7, #7]
 8003854:	2b01      	cmp	r3, #1
 8003856:	d14b      	bne.n	80038f0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	695b      	ldr	r3, [r3, #20]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d009      	beq.n	8003874 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003860:	69bb      	ldr	r3, [r7, #24]
 8003862:	015a      	lsls	r2, r3, #5
 8003864:	69fb      	ldr	r3, [r7, #28]
 8003866:	4413      	add	r3, r2
 8003868:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800386c:	461a      	mov	r2, r3
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	695b      	ldr	r3, [r3, #20]
 8003872:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	791b      	ldrb	r3, [r3, #4]
 8003878:	2b01      	cmp	r3, #1
 800387a:	d128      	bne.n	80038ce <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800387c:	69fb      	ldr	r3, [r7, #28]
 800387e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003888:	2b00      	cmp	r3, #0
 800388a:	d110      	bne.n	80038ae <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800388c:	69bb      	ldr	r3, [r7, #24]
 800388e:	015a      	lsls	r2, r3, #5
 8003890:	69fb      	ldr	r3, [r7, #28]
 8003892:	4413      	add	r3, r2
 8003894:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	69ba      	ldr	r2, [r7, #24]
 800389c:	0151      	lsls	r1, r2, #5
 800389e:	69fa      	ldr	r2, [r7, #28]
 80038a0:	440a      	add	r2, r1
 80038a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80038a6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80038aa:	6013      	str	r3, [r2, #0]
 80038ac:	e00f      	b.n	80038ce <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80038ae:	69bb      	ldr	r3, [r7, #24]
 80038b0:	015a      	lsls	r2, r3, #5
 80038b2:	69fb      	ldr	r3, [r7, #28]
 80038b4:	4413      	add	r3, r2
 80038b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	69ba      	ldr	r2, [r7, #24]
 80038be:	0151      	lsls	r1, r2, #5
 80038c0:	69fa      	ldr	r2, [r7, #28]
 80038c2:	440a      	add	r2, r1
 80038c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80038c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038cc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80038ce:	69bb      	ldr	r3, [r7, #24]
 80038d0:	015a      	lsls	r2, r3, #5
 80038d2:	69fb      	ldr	r3, [r7, #28]
 80038d4:	4413      	add	r3, r2
 80038d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	69ba      	ldr	r2, [r7, #24]
 80038de:	0151      	lsls	r1, r2, #5
 80038e0:	69fa      	ldr	r2, [r7, #28]
 80038e2:	440a      	add	r2, r1
 80038e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80038e8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80038ec:	6013      	str	r3, [r2, #0]
 80038ee:	e133      	b.n	8003b58 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80038f0:	69bb      	ldr	r3, [r7, #24]
 80038f2:	015a      	lsls	r2, r3, #5
 80038f4:	69fb      	ldr	r3, [r7, #28]
 80038f6:	4413      	add	r3, r2
 80038f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	69ba      	ldr	r2, [r7, #24]
 8003900:	0151      	lsls	r1, r2, #5
 8003902:	69fa      	ldr	r2, [r7, #28]
 8003904:	440a      	add	r2, r1
 8003906:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800390a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800390e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	791b      	ldrb	r3, [r3, #4]
 8003914:	2b01      	cmp	r3, #1
 8003916:	d015      	beq.n	8003944 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	699b      	ldr	r3, [r3, #24]
 800391c:	2b00      	cmp	r3, #0
 800391e:	f000 811b 	beq.w	8003b58 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003922:	69fb      	ldr	r3, [r7, #28]
 8003924:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003928:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	781b      	ldrb	r3, [r3, #0]
 800392e:	f003 030f 	and.w	r3, r3, #15
 8003932:	2101      	movs	r1, #1
 8003934:	fa01 f303 	lsl.w	r3, r1, r3
 8003938:	69f9      	ldr	r1, [r7, #28]
 800393a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800393e:	4313      	orrs	r3, r2
 8003940:	634b      	str	r3, [r1, #52]	; 0x34
 8003942:	e109      	b.n	8003b58 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003944:	69fb      	ldr	r3, [r7, #28]
 8003946:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003950:	2b00      	cmp	r3, #0
 8003952:	d110      	bne.n	8003976 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003954:	69bb      	ldr	r3, [r7, #24]
 8003956:	015a      	lsls	r2, r3, #5
 8003958:	69fb      	ldr	r3, [r7, #28]
 800395a:	4413      	add	r3, r2
 800395c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	69ba      	ldr	r2, [r7, #24]
 8003964:	0151      	lsls	r1, r2, #5
 8003966:	69fa      	ldr	r2, [r7, #28]
 8003968:	440a      	add	r2, r1
 800396a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800396e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003972:	6013      	str	r3, [r2, #0]
 8003974:	e00f      	b.n	8003996 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003976:	69bb      	ldr	r3, [r7, #24]
 8003978:	015a      	lsls	r2, r3, #5
 800397a:	69fb      	ldr	r3, [r7, #28]
 800397c:	4413      	add	r3, r2
 800397e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	69ba      	ldr	r2, [r7, #24]
 8003986:	0151      	lsls	r1, r2, #5
 8003988:	69fa      	ldr	r2, [r7, #28]
 800398a:	440a      	add	r2, r1
 800398c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003990:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003994:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	6919      	ldr	r1, [r3, #16]
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	781a      	ldrb	r2, [r3, #0]
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	699b      	ldr	r3, [r3, #24]
 80039a2:	b298      	uxth	r0, r3
 80039a4:	79fb      	ldrb	r3, [r7, #7]
 80039a6:	9300      	str	r3, [sp, #0]
 80039a8:	4603      	mov	r3, r0
 80039aa:	68f8      	ldr	r0, [r7, #12]
 80039ac:	f000 fade 	bl	8003f6c <USB_WritePacket>
 80039b0:	e0d2      	b.n	8003b58 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80039b2:	69bb      	ldr	r3, [r7, #24]
 80039b4:	015a      	lsls	r2, r3, #5
 80039b6:	69fb      	ldr	r3, [r7, #28]
 80039b8:	4413      	add	r3, r2
 80039ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039be:	691b      	ldr	r3, [r3, #16]
 80039c0:	69ba      	ldr	r2, [r7, #24]
 80039c2:	0151      	lsls	r1, r2, #5
 80039c4:	69fa      	ldr	r2, [r7, #28]
 80039c6:	440a      	add	r2, r1
 80039c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80039cc:	0cdb      	lsrs	r3, r3, #19
 80039ce:	04db      	lsls	r3, r3, #19
 80039d0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80039d2:	69bb      	ldr	r3, [r7, #24]
 80039d4:	015a      	lsls	r2, r3, #5
 80039d6:	69fb      	ldr	r3, [r7, #28]
 80039d8:	4413      	add	r3, r2
 80039da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039de:	691b      	ldr	r3, [r3, #16]
 80039e0:	69ba      	ldr	r2, [r7, #24]
 80039e2:	0151      	lsls	r1, r2, #5
 80039e4:	69fa      	ldr	r2, [r7, #28]
 80039e6:	440a      	add	r2, r1
 80039e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80039ec:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80039f0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80039f4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	699b      	ldr	r3, [r3, #24]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d126      	bne.n	8003a4c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80039fe:	69bb      	ldr	r3, [r7, #24]
 8003a00:	015a      	lsls	r2, r3, #5
 8003a02:	69fb      	ldr	r3, [r7, #28]
 8003a04:	4413      	add	r3, r2
 8003a06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a0a:	691a      	ldr	r2, [r3, #16]
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	68db      	ldr	r3, [r3, #12]
 8003a10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a14:	69b9      	ldr	r1, [r7, #24]
 8003a16:	0148      	lsls	r0, r1, #5
 8003a18:	69f9      	ldr	r1, [r7, #28]
 8003a1a:	4401      	add	r1, r0
 8003a1c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003a20:	4313      	orrs	r3, r2
 8003a22:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003a24:	69bb      	ldr	r3, [r7, #24]
 8003a26:	015a      	lsls	r2, r3, #5
 8003a28:	69fb      	ldr	r3, [r7, #28]
 8003a2a:	4413      	add	r3, r2
 8003a2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a30:	691b      	ldr	r3, [r3, #16]
 8003a32:	69ba      	ldr	r2, [r7, #24]
 8003a34:	0151      	lsls	r1, r2, #5
 8003a36:	69fa      	ldr	r2, [r7, #28]
 8003a38:	440a      	add	r2, r1
 8003a3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a3e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003a42:	6113      	str	r3, [r2, #16]
 8003a44:	e03a      	b.n	8003abc <USB_EPStartXfer+0x3e4>
 8003a46:	bf00      	nop
 8003a48:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	699a      	ldr	r2, [r3, #24]
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	68db      	ldr	r3, [r3, #12]
 8003a54:	4413      	add	r3, r2
 8003a56:	1e5a      	subs	r2, r3, #1
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a60:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	68db      	ldr	r3, [r3, #12]
 8003a66:	8afa      	ldrh	r2, [r7, #22]
 8003a68:	fb03 f202 	mul.w	r2, r3, r2
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003a70:	69bb      	ldr	r3, [r7, #24]
 8003a72:	015a      	lsls	r2, r3, #5
 8003a74:	69fb      	ldr	r3, [r7, #28]
 8003a76:	4413      	add	r3, r2
 8003a78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a7c:	691a      	ldr	r2, [r3, #16]
 8003a7e:	8afb      	ldrh	r3, [r7, #22]
 8003a80:	04d9      	lsls	r1, r3, #19
 8003a82:	4b38      	ldr	r3, [pc, #224]	; (8003b64 <USB_EPStartXfer+0x48c>)
 8003a84:	400b      	ands	r3, r1
 8003a86:	69b9      	ldr	r1, [r7, #24]
 8003a88:	0148      	lsls	r0, r1, #5
 8003a8a:	69f9      	ldr	r1, [r7, #28]
 8003a8c:	4401      	add	r1, r0
 8003a8e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003a92:	4313      	orrs	r3, r2
 8003a94:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8003a96:	69bb      	ldr	r3, [r7, #24]
 8003a98:	015a      	lsls	r2, r3, #5
 8003a9a:	69fb      	ldr	r3, [r7, #28]
 8003a9c:	4413      	add	r3, r2
 8003a9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003aa2:	691a      	ldr	r2, [r3, #16]
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	69db      	ldr	r3, [r3, #28]
 8003aa8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003aac:	69b9      	ldr	r1, [r7, #24]
 8003aae:	0148      	lsls	r0, r1, #5
 8003ab0:	69f9      	ldr	r1, [r7, #28]
 8003ab2:	4401      	add	r1, r0
 8003ab4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003abc:	79fb      	ldrb	r3, [r7, #7]
 8003abe:	2b01      	cmp	r3, #1
 8003ac0:	d10d      	bne.n	8003ade <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	691b      	ldr	r3, [r3, #16]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d009      	beq.n	8003ade <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	6919      	ldr	r1, [r3, #16]
 8003ace:	69bb      	ldr	r3, [r7, #24]
 8003ad0:	015a      	lsls	r2, r3, #5
 8003ad2:	69fb      	ldr	r3, [r7, #28]
 8003ad4:	4413      	add	r3, r2
 8003ad6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ada:	460a      	mov	r2, r1
 8003adc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	791b      	ldrb	r3, [r3, #4]
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d128      	bne.n	8003b38 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003ae6:	69fb      	ldr	r3, [r7, #28]
 8003ae8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d110      	bne.n	8003b18 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003af6:	69bb      	ldr	r3, [r7, #24]
 8003af8:	015a      	lsls	r2, r3, #5
 8003afa:	69fb      	ldr	r3, [r7, #28]
 8003afc:	4413      	add	r3, r2
 8003afe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	69ba      	ldr	r2, [r7, #24]
 8003b06:	0151      	lsls	r1, r2, #5
 8003b08:	69fa      	ldr	r2, [r7, #28]
 8003b0a:	440a      	add	r2, r1
 8003b0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b10:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003b14:	6013      	str	r3, [r2, #0]
 8003b16:	e00f      	b.n	8003b38 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003b18:	69bb      	ldr	r3, [r7, #24]
 8003b1a:	015a      	lsls	r2, r3, #5
 8003b1c:	69fb      	ldr	r3, [r7, #28]
 8003b1e:	4413      	add	r3, r2
 8003b20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	69ba      	ldr	r2, [r7, #24]
 8003b28:	0151      	lsls	r1, r2, #5
 8003b2a:	69fa      	ldr	r2, [r7, #28]
 8003b2c:	440a      	add	r2, r1
 8003b2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b36:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003b38:	69bb      	ldr	r3, [r7, #24]
 8003b3a:	015a      	lsls	r2, r3, #5
 8003b3c:	69fb      	ldr	r3, [r7, #28]
 8003b3e:	4413      	add	r3, r2
 8003b40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	69ba      	ldr	r2, [r7, #24]
 8003b48:	0151      	lsls	r1, r2, #5
 8003b4a:	69fa      	ldr	r2, [r7, #28]
 8003b4c:	440a      	add	r2, r1
 8003b4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b52:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003b56:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003b58:	2300      	movs	r3, #0
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3720      	adds	r7, #32
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}
 8003b62:	bf00      	nop
 8003b64:	1ff80000 	.word	0x1ff80000

08003b68 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b087      	sub	sp, #28
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	60f8      	str	r0, [r7, #12]
 8003b70:	60b9      	str	r1, [r7, #8]
 8003b72:	4613      	mov	r3, r2
 8003b74:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	781b      	ldrb	r3, [r3, #0]
 8003b7e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	785b      	ldrb	r3, [r3, #1]
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	f040 80ce 	bne.w	8003d26 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	699b      	ldr	r3, [r3, #24]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d132      	bne.n	8003bf8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	015a      	lsls	r2, r3, #5
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	4413      	add	r3, r2
 8003b9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b9e:	691b      	ldr	r3, [r3, #16]
 8003ba0:	693a      	ldr	r2, [r7, #16]
 8003ba2:	0151      	lsls	r1, r2, #5
 8003ba4:	697a      	ldr	r2, [r7, #20]
 8003ba6:	440a      	add	r2, r1
 8003ba8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003bac:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003bb0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003bb4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	015a      	lsls	r2, r3, #5
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	4413      	add	r3, r2
 8003bbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bc2:	691b      	ldr	r3, [r3, #16]
 8003bc4:	693a      	ldr	r2, [r7, #16]
 8003bc6:	0151      	lsls	r1, r2, #5
 8003bc8:	697a      	ldr	r2, [r7, #20]
 8003bca:	440a      	add	r2, r1
 8003bcc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003bd0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003bd4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	015a      	lsls	r2, r3, #5
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	4413      	add	r3, r2
 8003bde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003be2:	691b      	ldr	r3, [r3, #16]
 8003be4:	693a      	ldr	r2, [r7, #16]
 8003be6:	0151      	lsls	r1, r2, #5
 8003be8:	697a      	ldr	r2, [r7, #20]
 8003bea:	440a      	add	r2, r1
 8003bec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003bf0:	0cdb      	lsrs	r3, r3, #19
 8003bf2:	04db      	lsls	r3, r3, #19
 8003bf4:	6113      	str	r3, [r2, #16]
 8003bf6:	e04e      	b.n	8003c96 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	015a      	lsls	r2, r3, #5
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	4413      	add	r3, r2
 8003c00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c04:	691b      	ldr	r3, [r3, #16]
 8003c06:	693a      	ldr	r2, [r7, #16]
 8003c08:	0151      	lsls	r1, r2, #5
 8003c0a:	697a      	ldr	r2, [r7, #20]
 8003c0c:	440a      	add	r2, r1
 8003c0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c12:	0cdb      	lsrs	r3, r3, #19
 8003c14:	04db      	lsls	r3, r3, #19
 8003c16:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	015a      	lsls	r2, r3, #5
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	4413      	add	r3, r2
 8003c20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c24:	691b      	ldr	r3, [r3, #16]
 8003c26:	693a      	ldr	r2, [r7, #16]
 8003c28:	0151      	lsls	r1, r2, #5
 8003c2a:	697a      	ldr	r2, [r7, #20]
 8003c2c:	440a      	add	r2, r1
 8003c2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c32:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003c36:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003c3a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	699a      	ldr	r2, [r3, #24]
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	68db      	ldr	r3, [r3, #12]
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d903      	bls.n	8003c50 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	68da      	ldr	r2, [r3, #12]
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	015a      	lsls	r2, r3, #5
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	4413      	add	r3, r2
 8003c58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c5c:	691b      	ldr	r3, [r3, #16]
 8003c5e:	693a      	ldr	r2, [r7, #16]
 8003c60:	0151      	lsls	r1, r2, #5
 8003c62:	697a      	ldr	r2, [r7, #20]
 8003c64:	440a      	add	r2, r1
 8003c66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c6a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003c6e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	015a      	lsls	r2, r3, #5
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	4413      	add	r3, r2
 8003c78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c7c:	691a      	ldr	r2, [r3, #16]
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	699b      	ldr	r3, [r3, #24]
 8003c82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c86:	6939      	ldr	r1, [r7, #16]
 8003c88:	0148      	lsls	r0, r1, #5
 8003c8a:	6979      	ldr	r1, [r7, #20]
 8003c8c:	4401      	add	r1, r0
 8003c8e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003c92:	4313      	orrs	r3, r2
 8003c94:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003c96:	79fb      	ldrb	r3, [r7, #7]
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d11e      	bne.n	8003cda <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	695b      	ldr	r3, [r3, #20]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d009      	beq.n	8003cb8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	015a      	lsls	r2, r3, #5
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	4413      	add	r3, r2
 8003cac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cb0:	461a      	mov	r2, r3
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	695b      	ldr	r3, [r3, #20]
 8003cb6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	015a      	lsls	r2, r3, #5
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	4413      	add	r3, r2
 8003cc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	693a      	ldr	r2, [r7, #16]
 8003cc8:	0151      	lsls	r1, r2, #5
 8003cca:	697a      	ldr	r2, [r7, #20]
 8003ccc:	440a      	add	r2, r1
 8003cce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003cd2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003cd6:	6013      	str	r3, [r2, #0]
 8003cd8:	e097      	b.n	8003e0a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	015a      	lsls	r2, r3, #5
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	4413      	add	r3, r2
 8003ce2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	693a      	ldr	r2, [r7, #16]
 8003cea:	0151      	lsls	r1, r2, #5
 8003cec:	697a      	ldr	r2, [r7, #20]
 8003cee:	440a      	add	r2, r1
 8003cf0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003cf4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003cf8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	699b      	ldr	r3, [r3, #24]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	f000 8083 	beq.w	8003e0a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	781b      	ldrb	r3, [r3, #0]
 8003d10:	f003 030f 	and.w	r3, r3, #15
 8003d14:	2101      	movs	r1, #1
 8003d16:	fa01 f303 	lsl.w	r3, r1, r3
 8003d1a:	6979      	ldr	r1, [r7, #20]
 8003d1c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d20:	4313      	orrs	r3, r2
 8003d22:	634b      	str	r3, [r1, #52]	; 0x34
 8003d24:	e071      	b.n	8003e0a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	015a      	lsls	r2, r3, #5
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	4413      	add	r3, r2
 8003d2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d32:	691b      	ldr	r3, [r3, #16]
 8003d34:	693a      	ldr	r2, [r7, #16]
 8003d36:	0151      	lsls	r1, r2, #5
 8003d38:	697a      	ldr	r2, [r7, #20]
 8003d3a:	440a      	add	r2, r1
 8003d3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d40:	0cdb      	lsrs	r3, r3, #19
 8003d42:	04db      	lsls	r3, r3, #19
 8003d44:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	015a      	lsls	r2, r3, #5
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	4413      	add	r3, r2
 8003d4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d52:	691b      	ldr	r3, [r3, #16]
 8003d54:	693a      	ldr	r2, [r7, #16]
 8003d56:	0151      	lsls	r1, r2, #5
 8003d58:	697a      	ldr	r2, [r7, #20]
 8003d5a:	440a      	add	r2, r1
 8003d5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d60:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003d64:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003d68:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	699b      	ldr	r3, [r3, #24]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d003      	beq.n	8003d7a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	68da      	ldr	r2, [r3, #12]
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	68da      	ldr	r2, [r3, #12]
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	015a      	lsls	r2, r3, #5
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	4413      	add	r3, r2
 8003d8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d8e:	691b      	ldr	r3, [r3, #16]
 8003d90:	693a      	ldr	r2, [r7, #16]
 8003d92:	0151      	lsls	r1, r2, #5
 8003d94:	697a      	ldr	r2, [r7, #20]
 8003d96:	440a      	add	r2, r1
 8003d98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d9c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003da0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	015a      	lsls	r2, r3, #5
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	4413      	add	r3, r2
 8003daa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dae:	691a      	ldr	r2, [r3, #16]
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	69db      	ldr	r3, [r3, #28]
 8003db4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003db8:	6939      	ldr	r1, [r7, #16]
 8003dba:	0148      	lsls	r0, r1, #5
 8003dbc:	6979      	ldr	r1, [r7, #20]
 8003dbe:	4401      	add	r1, r0
 8003dc0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8003dc8:	79fb      	ldrb	r3, [r7, #7]
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d10d      	bne.n	8003dea <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	691b      	ldr	r3, [r3, #16]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d009      	beq.n	8003dea <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	6919      	ldr	r1, [r3, #16]
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	015a      	lsls	r2, r3, #5
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	4413      	add	r3, r2
 8003de2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003de6:	460a      	mov	r2, r1
 8003de8:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	015a      	lsls	r2, r3, #5
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	4413      	add	r3, r2
 8003df2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	693a      	ldr	r2, [r7, #16]
 8003dfa:	0151      	lsls	r1, r2, #5
 8003dfc:	697a      	ldr	r2, [r7, #20]
 8003dfe:	440a      	add	r2, r1
 8003e00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e04:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003e08:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003e0a:	2300      	movs	r3, #0
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	371c      	adds	r7, #28
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr

08003e18 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b087      	sub	sp, #28
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
 8003e20:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003e22:	2300      	movs	r3, #0
 8003e24:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8003e26:	2300      	movs	r3, #0
 8003e28:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	785b      	ldrb	r3, [r3, #1]
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	d14a      	bne.n	8003ecc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	781b      	ldrb	r3, [r3, #0]
 8003e3a:	015a      	lsls	r2, r3, #5
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	4413      	add	r3, r2
 8003e40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e4a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e4e:	f040 8086 	bne.w	8003f5e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	781b      	ldrb	r3, [r3, #0]
 8003e56:	015a      	lsls	r2, r3, #5
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	4413      	add	r3, r2
 8003e5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	683a      	ldr	r2, [r7, #0]
 8003e64:	7812      	ldrb	r2, [r2, #0]
 8003e66:	0151      	lsls	r1, r2, #5
 8003e68:	693a      	ldr	r2, [r7, #16]
 8003e6a:	440a      	add	r2, r1
 8003e6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e70:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003e74:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	781b      	ldrb	r3, [r3, #0]
 8003e7a:	015a      	lsls	r2, r3, #5
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	4413      	add	r3, r2
 8003e80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	683a      	ldr	r2, [r7, #0]
 8003e88:	7812      	ldrb	r2, [r2, #0]
 8003e8a:	0151      	lsls	r1, r2, #5
 8003e8c:	693a      	ldr	r2, [r7, #16]
 8003e8e:	440a      	add	r2, r1
 8003e90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e94:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003e98:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	3301      	adds	r3, #1
 8003e9e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	f242 7210 	movw	r2, #10000	; 0x2710
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d902      	bls.n	8003eb0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	75fb      	strb	r3, [r7, #23]
          break;
 8003eae:	e056      	b.n	8003f5e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	781b      	ldrb	r3, [r3, #0]
 8003eb4:	015a      	lsls	r2, r3, #5
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	4413      	add	r3, r2
 8003eba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003ec4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ec8:	d0e7      	beq.n	8003e9a <USB_EPStopXfer+0x82>
 8003eca:	e048      	b.n	8003f5e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	781b      	ldrb	r3, [r3, #0]
 8003ed0:	015a      	lsls	r2, r3, #5
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	4413      	add	r3, r2
 8003ed6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003ee0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ee4:	d13b      	bne.n	8003f5e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	781b      	ldrb	r3, [r3, #0]
 8003eea:	015a      	lsls	r2, r3, #5
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	4413      	add	r3, r2
 8003ef0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	683a      	ldr	r2, [r7, #0]
 8003ef8:	7812      	ldrb	r2, [r2, #0]
 8003efa:	0151      	lsls	r1, r2, #5
 8003efc:	693a      	ldr	r2, [r7, #16]
 8003efe:	440a      	add	r2, r1
 8003f00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f04:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003f08:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	781b      	ldrb	r3, [r3, #0]
 8003f0e:	015a      	lsls	r2, r3, #5
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	4413      	add	r3, r2
 8003f14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	683a      	ldr	r2, [r7, #0]
 8003f1c:	7812      	ldrb	r2, [r2, #0]
 8003f1e:	0151      	lsls	r1, r2, #5
 8003f20:	693a      	ldr	r2, [r7, #16]
 8003f22:	440a      	add	r2, r1
 8003f24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f28:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003f2c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	3301      	adds	r3, #1
 8003f32:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f242 7210 	movw	r2, #10000	; 0x2710
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d902      	bls.n	8003f44 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	75fb      	strb	r3, [r7, #23]
          break;
 8003f42:	e00c      	b.n	8003f5e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	781b      	ldrb	r3, [r3, #0]
 8003f48:	015a      	lsls	r2, r3, #5
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	4413      	add	r3, r2
 8003f4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003f58:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f5c:	d0e7      	beq.n	8003f2e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8003f5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	371c      	adds	r7, #28
 8003f64:	46bd      	mov	sp, r7
 8003f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6a:	4770      	bx	lr

08003f6c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b089      	sub	sp, #36	; 0x24
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	60f8      	str	r0, [r7, #12]
 8003f74:	60b9      	str	r1, [r7, #8]
 8003f76:	4611      	mov	r1, r2
 8003f78:	461a      	mov	r2, r3
 8003f7a:	460b      	mov	r3, r1
 8003f7c:	71fb      	strb	r3, [r7, #7]
 8003f7e:	4613      	mov	r3, r2
 8003f80:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8003f8a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d123      	bne.n	8003fda <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8003f92:	88bb      	ldrh	r3, [r7, #4]
 8003f94:	3303      	adds	r3, #3
 8003f96:	089b      	lsrs	r3, r3, #2
 8003f98:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	61bb      	str	r3, [r7, #24]
 8003f9e:	e018      	b.n	8003fd2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003fa0:	79fb      	ldrb	r3, [r7, #7]
 8003fa2:	031a      	lsls	r2, r3, #12
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	4413      	add	r3, r2
 8003fa8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fac:	461a      	mov	r2, r3
 8003fae:	69fb      	ldr	r3, [r7, #28]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003fb4:	69fb      	ldr	r3, [r7, #28]
 8003fb6:	3301      	adds	r3, #1
 8003fb8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003fba:	69fb      	ldr	r3, [r7, #28]
 8003fbc:	3301      	adds	r3, #1
 8003fbe:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003fc0:	69fb      	ldr	r3, [r7, #28]
 8003fc2:	3301      	adds	r3, #1
 8003fc4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003fc6:	69fb      	ldr	r3, [r7, #28]
 8003fc8:	3301      	adds	r3, #1
 8003fca:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003fcc:	69bb      	ldr	r3, [r7, #24]
 8003fce:	3301      	adds	r3, #1
 8003fd0:	61bb      	str	r3, [r7, #24]
 8003fd2:	69ba      	ldr	r2, [r7, #24]
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	429a      	cmp	r2, r3
 8003fd8:	d3e2      	bcc.n	8003fa0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003fda:	2300      	movs	r3, #0
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	3724      	adds	r7, #36	; 0x24
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr

08003fe8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b08b      	sub	sp, #44	; 0x2c
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	60f8      	str	r0, [r7, #12]
 8003ff0:	60b9      	str	r1, [r7, #8]
 8003ff2:	4613      	mov	r3, r2
 8003ff4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8003ffe:	88fb      	ldrh	r3, [r7, #6]
 8004000:	089b      	lsrs	r3, r3, #2
 8004002:	b29b      	uxth	r3, r3
 8004004:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004006:	88fb      	ldrh	r3, [r7, #6]
 8004008:	f003 0303 	and.w	r3, r3, #3
 800400c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800400e:	2300      	movs	r3, #0
 8004010:	623b      	str	r3, [r7, #32]
 8004012:	e014      	b.n	800403e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004014:	69bb      	ldr	r3, [r7, #24]
 8004016:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800401e:	601a      	str	r2, [r3, #0]
    pDest++;
 8004020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004022:	3301      	adds	r3, #1
 8004024:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004028:	3301      	adds	r3, #1
 800402a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800402c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800402e:	3301      	adds	r3, #1
 8004030:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004034:	3301      	adds	r3, #1
 8004036:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004038:	6a3b      	ldr	r3, [r7, #32]
 800403a:	3301      	adds	r3, #1
 800403c:	623b      	str	r3, [r7, #32]
 800403e:	6a3a      	ldr	r2, [r7, #32]
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	429a      	cmp	r2, r3
 8004044:	d3e6      	bcc.n	8004014 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004046:	8bfb      	ldrh	r3, [r7, #30]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d01e      	beq.n	800408a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800404c:	2300      	movs	r3, #0
 800404e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004050:	69bb      	ldr	r3, [r7, #24]
 8004052:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004056:	461a      	mov	r2, r3
 8004058:	f107 0310 	add.w	r3, r7, #16
 800405c:	6812      	ldr	r2, [r2, #0]
 800405e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004060:	693a      	ldr	r2, [r7, #16]
 8004062:	6a3b      	ldr	r3, [r7, #32]
 8004064:	b2db      	uxtb	r3, r3
 8004066:	00db      	lsls	r3, r3, #3
 8004068:	fa22 f303 	lsr.w	r3, r2, r3
 800406c:	b2da      	uxtb	r2, r3
 800406e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004070:	701a      	strb	r2, [r3, #0]
      i++;
 8004072:	6a3b      	ldr	r3, [r7, #32]
 8004074:	3301      	adds	r3, #1
 8004076:	623b      	str	r3, [r7, #32]
      pDest++;
 8004078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800407a:	3301      	adds	r3, #1
 800407c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800407e:	8bfb      	ldrh	r3, [r7, #30]
 8004080:	3b01      	subs	r3, #1
 8004082:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004084:	8bfb      	ldrh	r3, [r7, #30]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d1ea      	bne.n	8004060 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800408a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800408c:	4618      	mov	r0, r3
 800408e:	372c      	adds	r7, #44	; 0x2c
 8004090:	46bd      	mov	sp, r7
 8004092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004096:	4770      	bx	lr

08004098 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004098:	b480      	push	{r7}
 800409a:	b085      	sub	sp, #20
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
 80040a0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	781b      	ldrb	r3, [r3, #0]
 80040aa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	785b      	ldrb	r3, [r3, #1]
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d12c      	bne.n	800410e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	015a      	lsls	r2, r3, #5
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	4413      	add	r3, r2
 80040bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	db12      	blt.n	80040ec <USB_EPSetStall+0x54>
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d00f      	beq.n	80040ec <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	015a      	lsls	r2, r3, #5
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	4413      	add	r3, r2
 80040d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	68ba      	ldr	r2, [r7, #8]
 80040dc:	0151      	lsls	r1, r2, #5
 80040de:	68fa      	ldr	r2, [r7, #12]
 80040e0:	440a      	add	r2, r1
 80040e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040e6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80040ea:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	015a      	lsls	r2, r3, #5
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	4413      	add	r3, r2
 80040f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	68ba      	ldr	r2, [r7, #8]
 80040fc:	0151      	lsls	r1, r2, #5
 80040fe:	68fa      	ldr	r2, [r7, #12]
 8004100:	440a      	add	r2, r1
 8004102:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004106:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800410a:	6013      	str	r3, [r2, #0]
 800410c:	e02b      	b.n	8004166 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	015a      	lsls	r2, r3, #5
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	4413      	add	r3, r2
 8004116:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	2b00      	cmp	r3, #0
 800411e:	db12      	blt.n	8004146 <USB_EPSetStall+0xae>
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d00f      	beq.n	8004146 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	015a      	lsls	r2, r3, #5
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	4413      	add	r3, r2
 800412e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	68ba      	ldr	r2, [r7, #8]
 8004136:	0151      	lsls	r1, r2, #5
 8004138:	68fa      	ldr	r2, [r7, #12]
 800413a:	440a      	add	r2, r1
 800413c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004140:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004144:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	015a      	lsls	r2, r3, #5
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	4413      	add	r3, r2
 800414e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	68ba      	ldr	r2, [r7, #8]
 8004156:	0151      	lsls	r1, r2, #5
 8004158:	68fa      	ldr	r2, [r7, #12]
 800415a:	440a      	add	r2, r1
 800415c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004160:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004164:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004166:	2300      	movs	r3, #0
}
 8004168:	4618      	mov	r0, r3
 800416a:	3714      	adds	r7, #20
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr

08004174 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004174:	b480      	push	{r7}
 8004176:	b085      	sub	sp, #20
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
 800417c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	781b      	ldrb	r3, [r3, #0]
 8004186:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	785b      	ldrb	r3, [r3, #1]
 800418c:	2b01      	cmp	r3, #1
 800418e:	d128      	bne.n	80041e2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	015a      	lsls	r2, r3, #5
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	4413      	add	r3, r2
 8004198:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	68ba      	ldr	r2, [r7, #8]
 80041a0:	0151      	lsls	r1, r2, #5
 80041a2:	68fa      	ldr	r2, [r7, #12]
 80041a4:	440a      	add	r2, r1
 80041a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041aa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80041ae:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	791b      	ldrb	r3, [r3, #4]
 80041b4:	2b03      	cmp	r3, #3
 80041b6:	d003      	beq.n	80041c0 <USB_EPClearStall+0x4c>
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	791b      	ldrb	r3, [r3, #4]
 80041bc:	2b02      	cmp	r3, #2
 80041be:	d138      	bne.n	8004232 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	015a      	lsls	r2, r3, #5
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	4413      	add	r3, r2
 80041c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	68ba      	ldr	r2, [r7, #8]
 80041d0:	0151      	lsls	r1, r2, #5
 80041d2:	68fa      	ldr	r2, [r7, #12]
 80041d4:	440a      	add	r2, r1
 80041d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041de:	6013      	str	r3, [r2, #0]
 80041e0:	e027      	b.n	8004232 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	015a      	lsls	r2, r3, #5
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	4413      	add	r3, r2
 80041ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	68ba      	ldr	r2, [r7, #8]
 80041f2:	0151      	lsls	r1, r2, #5
 80041f4:	68fa      	ldr	r2, [r7, #12]
 80041f6:	440a      	add	r2, r1
 80041f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80041fc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004200:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	791b      	ldrb	r3, [r3, #4]
 8004206:	2b03      	cmp	r3, #3
 8004208:	d003      	beq.n	8004212 <USB_EPClearStall+0x9e>
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	791b      	ldrb	r3, [r3, #4]
 800420e:	2b02      	cmp	r3, #2
 8004210:	d10f      	bne.n	8004232 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	015a      	lsls	r2, r3, #5
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	4413      	add	r3, r2
 800421a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	68ba      	ldr	r2, [r7, #8]
 8004222:	0151      	lsls	r1, r2, #5
 8004224:	68fa      	ldr	r2, [r7, #12]
 8004226:	440a      	add	r2, r1
 8004228:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800422c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004230:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004232:	2300      	movs	r3, #0
}
 8004234:	4618      	mov	r0, r3
 8004236:	3714      	adds	r7, #20
 8004238:	46bd      	mov	sp, r7
 800423a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423e:	4770      	bx	lr

08004240 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004240:	b480      	push	{r7}
 8004242:	b085      	sub	sp, #20
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
 8004248:	460b      	mov	r3, r1
 800424a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	68fa      	ldr	r2, [r7, #12]
 800425a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800425e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004262:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	78fb      	ldrb	r3, [r7, #3]
 800426e:	011b      	lsls	r3, r3, #4
 8004270:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004274:	68f9      	ldr	r1, [r7, #12]
 8004276:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800427a:	4313      	orrs	r3, r2
 800427c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800427e:	2300      	movs	r3, #0
}
 8004280:	4618      	mov	r0, r3
 8004282:	3714      	adds	r7, #20
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr

0800428c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800428c:	b480      	push	{r7}
 800428e:	b085      	sub	sp, #20
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	68fa      	ldr	r2, [r7, #12]
 80042a2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80042a6:	f023 0303 	bic.w	r3, r3, #3
 80042aa:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	68fa      	ldr	r2, [r7, #12]
 80042b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80042ba:	f023 0302 	bic.w	r3, r3, #2
 80042be:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80042c0:	2300      	movs	r3, #0
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3714      	adds	r7, #20
 80042c6:	46bd      	mov	sp, r7
 80042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042cc:	4770      	bx	lr

080042ce <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80042ce:	b480      	push	{r7}
 80042d0:	b085      	sub	sp, #20
 80042d2:	af00      	add	r7, sp, #0
 80042d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	68fa      	ldr	r2, [r7, #12]
 80042e4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80042e8:	f023 0303 	bic.w	r3, r3, #3
 80042ec:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	68fa      	ldr	r2, [r7, #12]
 80042f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80042fc:	f043 0302 	orr.w	r3, r3, #2
 8004300:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004302:	2300      	movs	r3, #0
}
 8004304:	4618      	mov	r0, r3
 8004306:	3714      	adds	r7, #20
 8004308:	46bd      	mov	sp, r7
 800430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430e:	4770      	bx	lr

08004310 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004310:	b480      	push	{r7}
 8004312:	b085      	sub	sp, #20
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	695b      	ldr	r3, [r3, #20]
 800431c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	699b      	ldr	r3, [r3, #24]
 8004322:	68fa      	ldr	r2, [r7, #12]
 8004324:	4013      	ands	r3, r2
 8004326:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004328:	68fb      	ldr	r3, [r7, #12]
}
 800432a:	4618      	mov	r0, r3
 800432c:	3714      	adds	r7, #20
 800432e:	46bd      	mov	sp, r7
 8004330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004334:	4770      	bx	lr

08004336 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004336:	b480      	push	{r7}
 8004338:	b085      	sub	sp, #20
 800433a:	af00      	add	r7, sp, #0
 800433c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004348:	699b      	ldr	r3, [r3, #24]
 800434a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004352:	69db      	ldr	r3, [r3, #28]
 8004354:	68ba      	ldr	r2, [r7, #8]
 8004356:	4013      	ands	r3, r2
 8004358:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	0c1b      	lsrs	r3, r3, #16
}
 800435e:	4618      	mov	r0, r3
 8004360:	3714      	adds	r7, #20
 8004362:	46bd      	mov	sp, r7
 8004364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004368:	4770      	bx	lr

0800436a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800436a:	b480      	push	{r7}
 800436c:	b085      	sub	sp, #20
 800436e:	af00      	add	r7, sp, #0
 8004370:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800437c:	699b      	ldr	r3, [r3, #24]
 800437e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004386:	69db      	ldr	r3, [r3, #28]
 8004388:	68ba      	ldr	r2, [r7, #8]
 800438a:	4013      	ands	r3, r2
 800438c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	b29b      	uxth	r3, r3
}
 8004392:	4618      	mov	r0, r3
 8004394:	3714      	adds	r7, #20
 8004396:	46bd      	mov	sp, r7
 8004398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439c:	4770      	bx	lr

0800439e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800439e:	b480      	push	{r7}
 80043a0:	b085      	sub	sp, #20
 80043a2:	af00      	add	r7, sp, #0
 80043a4:	6078      	str	r0, [r7, #4]
 80043a6:	460b      	mov	r3, r1
 80043a8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80043ae:	78fb      	ldrb	r3, [r7, #3]
 80043b0:	015a      	lsls	r2, r3, #5
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	4413      	add	r3, r2
 80043b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043c4:	695b      	ldr	r3, [r3, #20]
 80043c6:	68ba      	ldr	r2, [r7, #8]
 80043c8:	4013      	ands	r3, r2
 80043ca:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80043cc:	68bb      	ldr	r3, [r7, #8]
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	3714      	adds	r7, #20
 80043d2:	46bd      	mov	sp, r7
 80043d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d8:	4770      	bx	lr

080043da <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80043da:	b480      	push	{r7}
 80043dc:	b087      	sub	sp, #28
 80043de:	af00      	add	r7, sp, #0
 80043e0:	6078      	str	r0, [r7, #4]
 80043e2:	460b      	mov	r3, r1
 80043e4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043f0:	691b      	ldr	r3, [r3, #16]
 80043f2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043fc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80043fe:	78fb      	ldrb	r3, [r7, #3]
 8004400:	f003 030f 	and.w	r3, r3, #15
 8004404:	68fa      	ldr	r2, [r7, #12]
 8004406:	fa22 f303 	lsr.w	r3, r2, r3
 800440a:	01db      	lsls	r3, r3, #7
 800440c:	b2db      	uxtb	r3, r3
 800440e:	693a      	ldr	r2, [r7, #16]
 8004410:	4313      	orrs	r3, r2
 8004412:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004414:	78fb      	ldrb	r3, [r7, #3]
 8004416:	015a      	lsls	r2, r3, #5
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	4413      	add	r3, r2
 800441c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	693a      	ldr	r2, [r7, #16]
 8004424:	4013      	ands	r3, r2
 8004426:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004428:	68bb      	ldr	r3, [r7, #8]
}
 800442a:	4618      	mov	r0, r3
 800442c:	371c      	adds	r7, #28
 800442e:	46bd      	mov	sp, r7
 8004430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004434:	4770      	bx	lr

08004436 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004436:	b480      	push	{r7}
 8004438:	b083      	sub	sp, #12
 800443a:	af00      	add	r7, sp, #0
 800443c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	695b      	ldr	r3, [r3, #20]
 8004442:	f003 0301 	and.w	r3, r3, #1
}
 8004446:	4618      	mov	r0, r3
 8004448:	370c      	adds	r7, #12
 800444a:	46bd      	mov	sp, r7
 800444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004450:	4770      	bx	lr

08004452 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004452:	b480      	push	{r7}
 8004454:	b085      	sub	sp, #20
 8004456:	af00      	add	r7, sp, #0
 8004458:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	68fa      	ldr	r2, [r7, #12]
 8004468:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800446c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004470:	f023 0307 	bic.w	r3, r3, #7
 8004474:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	68fa      	ldr	r2, [r7, #12]
 8004480:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004484:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004488:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800448a:	2300      	movs	r3, #0
}
 800448c:	4618      	mov	r0, r3
 800448e:	3714      	adds	r7, #20
 8004490:	46bd      	mov	sp, r7
 8004492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004496:	4770      	bx	lr

08004498 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004498:	b480      	push	{r7}
 800449a:	b087      	sub	sp, #28
 800449c:	af00      	add	r7, sp, #0
 800449e:	60f8      	str	r0, [r7, #12]
 80044a0:	460b      	mov	r3, r1
 80044a2:	607a      	str	r2, [r7, #4]
 80044a4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	333c      	adds	r3, #60	; 0x3c
 80044ae:	3304      	adds	r3, #4
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	4a26      	ldr	r2, [pc, #152]	; (8004550 <USB_EP0_OutStart+0xb8>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d90a      	bls.n	80044d2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80044c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80044cc:	d101      	bne.n	80044d2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80044ce:	2300      	movs	r3, #0
 80044d0:	e037      	b.n	8004542 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044d8:	461a      	mov	r2, r3
 80044da:	2300      	movs	r3, #0
 80044dc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044e4:	691b      	ldr	r3, [r3, #16]
 80044e6:	697a      	ldr	r2, [r7, #20]
 80044e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044ec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80044f0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044f8:	691b      	ldr	r3, [r3, #16]
 80044fa:	697a      	ldr	r2, [r7, #20]
 80044fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004500:	f043 0318 	orr.w	r3, r3, #24
 8004504:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800450c:	691b      	ldr	r3, [r3, #16]
 800450e:	697a      	ldr	r2, [r7, #20]
 8004510:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004514:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004518:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800451a:	7afb      	ldrb	r3, [r7, #11]
 800451c:	2b01      	cmp	r3, #1
 800451e:	d10f      	bne.n	8004540 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004526:	461a      	mov	r2, r3
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	697a      	ldr	r2, [r7, #20]
 8004536:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800453a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800453e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004540:	2300      	movs	r3, #0
}
 8004542:	4618      	mov	r0, r3
 8004544:	371c      	adds	r7, #28
 8004546:	46bd      	mov	sp, r7
 8004548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454c:	4770      	bx	lr
 800454e:	bf00      	nop
 8004550:	4f54300a 	.word	0x4f54300a

08004554 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004554:	b480      	push	{r7}
 8004556:	b085      	sub	sp, #20
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800455c:	2300      	movs	r3, #0
 800455e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	3301      	adds	r3, #1
 8004564:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	4a13      	ldr	r2, [pc, #76]	; (80045b8 <USB_CoreReset+0x64>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d901      	bls.n	8004572 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800456e:	2303      	movs	r3, #3
 8004570:	e01b      	b.n	80045aa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	691b      	ldr	r3, [r3, #16]
 8004576:	2b00      	cmp	r3, #0
 8004578:	daf2      	bge.n	8004560 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800457a:	2300      	movs	r3, #0
 800457c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	691b      	ldr	r3, [r3, #16]
 8004582:	f043 0201 	orr.w	r2, r3, #1
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	3301      	adds	r3, #1
 800458e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	4a09      	ldr	r2, [pc, #36]	; (80045b8 <USB_CoreReset+0x64>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d901      	bls.n	800459c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004598:	2303      	movs	r3, #3
 800459a:	e006      	b.n	80045aa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	691b      	ldr	r3, [r3, #16]
 80045a0:	f003 0301 	and.w	r3, r3, #1
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d0f0      	beq.n	800458a <USB_CoreReset+0x36>

  return HAL_OK;
 80045a8:	2300      	movs	r3, #0
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	3714      	adds	r7, #20
 80045ae:	46bd      	mov	sp, r7
 80045b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b4:	4770      	bx	lr
 80045b6:	bf00      	nop
 80045b8:	00030d40 	.word	0x00030d40

080045bc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b084      	sub	sp, #16
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
 80045c4:	460b      	mov	r3, r1
 80045c6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80045c8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80045cc:	f002 fc36 	bl	8006e3c <USBD_static_malloc>
 80045d0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d109      	bne.n	80045ec <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	32b0      	adds	r2, #176	; 0xb0
 80045e2:	2100      	movs	r1, #0
 80045e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80045e8:	2302      	movs	r3, #2
 80045ea:	e0d4      	b.n	8004796 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80045ec:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80045f0:	2100      	movs	r1, #0
 80045f2:	68f8      	ldr	r0, [r7, #12]
 80045f4:	f002 fc8a 	bl	8006f0c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	32b0      	adds	r2, #176	; 0xb0
 8004602:	68f9      	ldr	r1, [r7, #12]
 8004604:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	32b0      	adds	r2, #176	; 0xb0
 8004612:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	7c1b      	ldrb	r3, [r3, #16]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d138      	bne.n	8004696 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004624:	4b5e      	ldr	r3, [pc, #376]	; (80047a0 <USBD_CDC_Init+0x1e4>)
 8004626:	7819      	ldrb	r1, [r3, #0]
 8004628:	f44f 7300 	mov.w	r3, #512	; 0x200
 800462c:	2202      	movs	r2, #2
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f002 fae1 	bl	8006bf6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004634:	4b5a      	ldr	r3, [pc, #360]	; (80047a0 <USBD_CDC_Init+0x1e4>)
 8004636:	781b      	ldrb	r3, [r3, #0]
 8004638:	f003 020f 	and.w	r2, r3, #15
 800463c:	6879      	ldr	r1, [r7, #4]
 800463e:	4613      	mov	r3, r2
 8004640:	009b      	lsls	r3, r3, #2
 8004642:	4413      	add	r3, r2
 8004644:	009b      	lsls	r3, r3, #2
 8004646:	440b      	add	r3, r1
 8004648:	3324      	adds	r3, #36	; 0x24
 800464a:	2201      	movs	r2, #1
 800464c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800464e:	4b55      	ldr	r3, [pc, #340]	; (80047a4 <USBD_CDC_Init+0x1e8>)
 8004650:	7819      	ldrb	r1, [r3, #0]
 8004652:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004656:	2202      	movs	r2, #2
 8004658:	6878      	ldr	r0, [r7, #4]
 800465a:	f002 facc 	bl	8006bf6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800465e:	4b51      	ldr	r3, [pc, #324]	; (80047a4 <USBD_CDC_Init+0x1e8>)
 8004660:	781b      	ldrb	r3, [r3, #0]
 8004662:	f003 020f 	and.w	r2, r3, #15
 8004666:	6879      	ldr	r1, [r7, #4]
 8004668:	4613      	mov	r3, r2
 800466a:	009b      	lsls	r3, r3, #2
 800466c:	4413      	add	r3, r2
 800466e:	009b      	lsls	r3, r3, #2
 8004670:	440b      	add	r3, r1
 8004672:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004676:	2201      	movs	r2, #1
 8004678:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800467a:	4b4b      	ldr	r3, [pc, #300]	; (80047a8 <USBD_CDC_Init+0x1ec>)
 800467c:	781b      	ldrb	r3, [r3, #0]
 800467e:	f003 020f 	and.w	r2, r3, #15
 8004682:	6879      	ldr	r1, [r7, #4]
 8004684:	4613      	mov	r3, r2
 8004686:	009b      	lsls	r3, r3, #2
 8004688:	4413      	add	r3, r2
 800468a:	009b      	lsls	r3, r3, #2
 800468c:	440b      	add	r3, r1
 800468e:	3326      	adds	r3, #38	; 0x26
 8004690:	2210      	movs	r2, #16
 8004692:	801a      	strh	r2, [r3, #0]
 8004694:	e035      	b.n	8004702 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004696:	4b42      	ldr	r3, [pc, #264]	; (80047a0 <USBD_CDC_Init+0x1e4>)
 8004698:	7819      	ldrb	r1, [r3, #0]
 800469a:	2340      	movs	r3, #64	; 0x40
 800469c:	2202      	movs	r2, #2
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f002 faa9 	bl	8006bf6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80046a4:	4b3e      	ldr	r3, [pc, #248]	; (80047a0 <USBD_CDC_Init+0x1e4>)
 80046a6:	781b      	ldrb	r3, [r3, #0]
 80046a8:	f003 020f 	and.w	r2, r3, #15
 80046ac:	6879      	ldr	r1, [r7, #4]
 80046ae:	4613      	mov	r3, r2
 80046b0:	009b      	lsls	r3, r3, #2
 80046b2:	4413      	add	r3, r2
 80046b4:	009b      	lsls	r3, r3, #2
 80046b6:	440b      	add	r3, r1
 80046b8:	3324      	adds	r3, #36	; 0x24
 80046ba:	2201      	movs	r2, #1
 80046bc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80046be:	4b39      	ldr	r3, [pc, #228]	; (80047a4 <USBD_CDC_Init+0x1e8>)
 80046c0:	7819      	ldrb	r1, [r3, #0]
 80046c2:	2340      	movs	r3, #64	; 0x40
 80046c4:	2202      	movs	r2, #2
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f002 fa95 	bl	8006bf6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80046cc:	4b35      	ldr	r3, [pc, #212]	; (80047a4 <USBD_CDC_Init+0x1e8>)
 80046ce:	781b      	ldrb	r3, [r3, #0]
 80046d0:	f003 020f 	and.w	r2, r3, #15
 80046d4:	6879      	ldr	r1, [r7, #4]
 80046d6:	4613      	mov	r3, r2
 80046d8:	009b      	lsls	r3, r3, #2
 80046da:	4413      	add	r3, r2
 80046dc:	009b      	lsls	r3, r3, #2
 80046de:	440b      	add	r3, r1
 80046e0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80046e4:	2201      	movs	r2, #1
 80046e6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80046e8:	4b2f      	ldr	r3, [pc, #188]	; (80047a8 <USBD_CDC_Init+0x1ec>)
 80046ea:	781b      	ldrb	r3, [r3, #0]
 80046ec:	f003 020f 	and.w	r2, r3, #15
 80046f0:	6879      	ldr	r1, [r7, #4]
 80046f2:	4613      	mov	r3, r2
 80046f4:	009b      	lsls	r3, r3, #2
 80046f6:	4413      	add	r3, r2
 80046f8:	009b      	lsls	r3, r3, #2
 80046fa:	440b      	add	r3, r1
 80046fc:	3326      	adds	r3, #38	; 0x26
 80046fe:	2210      	movs	r2, #16
 8004700:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004702:	4b29      	ldr	r3, [pc, #164]	; (80047a8 <USBD_CDC_Init+0x1ec>)
 8004704:	7819      	ldrb	r1, [r3, #0]
 8004706:	2308      	movs	r3, #8
 8004708:	2203      	movs	r2, #3
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f002 fa73 	bl	8006bf6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8004710:	4b25      	ldr	r3, [pc, #148]	; (80047a8 <USBD_CDC_Init+0x1ec>)
 8004712:	781b      	ldrb	r3, [r3, #0]
 8004714:	f003 020f 	and.w	r2, r3, #15
 8004718:	6879      	ldr	r1, [r7, #4]
 800471a:	4613      	mov	r3, r2
 800471c:	009b      	lsls	r3, r3, #2
 800471e:	4413      	add	r3, r2
 8004720:	009b      	lsls	r3, r3, #2
 8004722:	440b      	add	r3, r1
 8004724:	3324      	adds	r3, #36	; 0x24
 8004726:	2201      	movs	r2, #1
 8004728:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2200      	movs	r2, #0
 800472e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004738:	687a      	ldr	r2, [r7, #4]
 800473a:	33b0      	adds	r3, #176	; 0xb0
 800473c:	009b      	lsls	r3, r3, #2
 800473e:	4413      	add	r3, r2
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2200      	movs	r2, #0
 800474a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2200      	movs	r2, #0
 8004752:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800475c:	2b00      	cmp	r3, #0
 800475e:	d101      	bne.n	8004764 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8004760:	2302      	movs	r3, #2
 8004762:	e018      	b.n	8004796 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	7c1b      	ldrb	r3, [r3, #16]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d10a      	bne.n	8004782 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800476c:	4b0d      	ldr	r3, [pc, #52]	; (80047a4 <USBD_CDC_Init+0x1e8>)
 800476e:	7819      	ldrb	r1, [r3, #0]
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004776:	f44f 7300 	mov.w	r3, #512	; 0x200
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f002 fb2a 	bl	8006dd4 <USBD_LL_PrepareReceive>
 8004780:	e008      	b.n	8004794 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004782:	4b08      	ldr	r3, [pc, #32]	; (80047a4 <USBD_CDC_Init+0x1e8>)
 8004784:	7819      	ldrb	r1, [r3, #0]
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800478c:	2340      	movs	r3, #64	; 0x40
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f002 fb20 	bl	8006dd4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004794:	2300      	movs	r3, #0
}
 8004796:	4618      	mov	r0, r3
 8004798:	3710      	adds	r7, #16
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}
 800479e:	bf00      	nop
 80047a0:	20000093 	.word	0x20000093
 80047a4:	20000094 	.word	0x20000094
 80047a8:	20000095 	.word	0x20000095

080047ac <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b082      	sub	sp, #8
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
 80047b4:	460b      	mov	r3, r1
 80047b6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80047b8:	4b3a      	ldr	r3, [pc, #232]	; (80048a4 <USBD_CDC_DeInit+0xf8>)
 80047ba:	781b      	ldrb	r3, [r3, #0]
 80047bc:	4619      	mov	r1, r3
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f002 fa3f 	bl	8006c42 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80047c4:	4b37      	ldr	r3, [pc, #220]	; (80048a4 <USBD_CDC_DeInit+0xf8>)
 80047c6:	781b      	ldrb	r3, [r3, #0]
 80047c8:	f003 020f 	and.w	r2, r3, #15
 80047cc:	6879      	ldr	r1, [r7, #4]
 80047ce:	4613      	mov	r3, r2
 80047d0:	009b      	lsls	r3, r3, #2
 80047d2:	4413      	add	r3, r2
 80047d4:	009b      	lsls	r3, r3, #2
 80047d6:	440b      	add	r3, r1
 80047d8:	3324      	adds	r3, #36	; 0x24
 80047da:	2200      	movs	r2, #0
 80047dc:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80047de:	4b32      	ldr	r3, [pc, #200]	; (80048a8 <USBD_CDC_DeInit+0xfc>)
 80047e0:	781b      	ldrb	r3, [r3, #0]
 80047e2:	4619      	mov	r1, r3
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	f002 fa2c 	bl	8006c42 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80047ea:	4b2f      	ldr	r3, [pc, #188]	; (80048a8 <USBD_CDC_DeInit+0xfc>)
 80047ec:	781b      	ldrb	r3, [r3, #0]
 80047ee:	f003 020f 	and.w	r2, r3, #15
 80047f2:	6879      	ldr	r1, [r7, #4]
 80047f4:	4613      	mov	r3, r2
 80047f6:	009b      	lsls	r3, r3, #2
 80047f8:	4413      	add	r3, r2
 80047fa:	009b      	lsls	r3, r3, #2
 80047fc:	440b      	add	r3, r1
 80047fe:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004802:	2200      	movs	r2, #0
 8004804:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8004806:	4b29      	ldr	r3, [pc, #164]	; (80048ac <USBD_CDC_DeInit+0x100>)
 8004808:	781b      	ldrb	r3, [r3, #0]
 800480a:	4619      	mov	r1, r3
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	f002 fa18 	bl	8006c42 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8004812:	4b26      	ldr	r3, [pc, #152]	; (80048ac <USBD_CDC_DeInit+0x100>)
 8004814:	781b      	ldrb	r3, [r3, #0]
 8004816:	f003 020f 	and.w	r2, r3, #15
 800481a:	6879      	ldr	r1, [r7, #4]
 800481c:	4613      	mov	r3, r2
 800481e:	009b      	lsls	r3, r3, #2
 8004820:	4413      	add	r3, r2
 8004822:	009b      	lsls	r3, r3, #2
 8004824:	440b      	add	r3, r1
 8004826:	3324      	adds	r3, #36	; 0x24
 8004828:	2200      	movs	r2, #0
 800482a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800482c:	4b1f      	ldr	r3, [pc, #124]	; (80048ac <USBD_CDC_DeInit+0x100>)
 800482e:	781b      	ldrb	r3, [r3, #0]
 8004830:	f003 020f 	and.w	r2, r3, #15
 8004834:	6879      	ldr	r1, [r7, #4]
 8004836:	4613      	mov	r3, r2
 8004838:	009b      	lsls	r3, r3, #2
 800483a:	4413      	add	r3, r2
 800483c:	009b      	lsls	r3, r3, #2
 800483e:	440b      	add	r3, r1
 8004840:	3326      	adds	r3, #38	; 0x26
 8004842:	2200      	movs	r2, #0
 8004844:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	32b0      	adds	r2, #176	; 0xb0
 8004850:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d01f      	beq.n	8004898 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800485e:	687a      	ldr	r2, [r7, #4]
 8004860:	33b0      	adds	r3, #176	; 0xb0
 8004862:	009b      	lsls	r3, r3, #2
 8004864:	4413      	add	r3, r2
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	32b0      	adds	r2, #176	; 0xb0
 8004876:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800487a:	4618      	mov	r0, r3
 800487c:	f002 faec 	bl	8006e58 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	32b0      	adds	r2, #176	; 0xb0
 800488a:	2100      	movs	r1, #0
 800488c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2200      	movs	r2, #0
 8004894:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004898:	2300      	movs	r3, #0
}
 800489a:	4618      	mov	r0, r3
 800489c:	3708      	adds	r7, #8
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}
 80048a2:	bf00      	nop
 80048a4:	20000093 	.word	0x20000093
 80048a8:	20000094 	.word	0x20000094
 80048ac:	20000095 	.word	0x20000095

080048b0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b086      	sub	sp, #24
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
 80048b8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	32b0      	adds	r2, #176	; 0xb0
 80048c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048c8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80048ca:	2300      	movs	r3, #0
 80048cc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80048ce:	2300      	movs	r3, #0
 80048d0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80048d2:	2300      	movs	r3, #0
 80048d4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d101      	bne.n	80048e0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80048dc:	2303      	movs	r3, #3
 80048de:	e0bf      	b.n	8004a60 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	781b      	ldrb	r3, [r3, #0]
 80048e4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d050      	beq.n	800498e <USBD_CDC_Setup+0xde>
 80048ec:	2b20      	cmp	r3, #32
 80048ee:	f040 80af 	bne.w	8004a50 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	88db      	ldrh	r3, [r3, #6]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d03a      	beq.n	8004970 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	781b      	ldrb	r3, [r3, #0]
 80048fe:	b25b      	sxtb	r3, r3
 8004900:	2b00      	cmp	r3, #0
 8004902:	da1b      	bge.n	800493c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800490a:	687a      	ldr	r2, [r7, #4]
 800490c:	33b0      	adds	r3, #176	; 0xb0
 800490e:	009b      	lsls	r3, r3, #2
 8004910:	4413      	add	r3, r2
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	683a      	ldr	r2, [r7, #0]
 8004918:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800491a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800491c:	683a      	ldr	r2, [r7, #0]
 800491e:	88d2      	ldrh	r2, [r2, #6]
 8004920:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	88db      	ldrh	r3, [r3, #6]
 8004926:	2b07      	cmp	r3, #7
 8004928:	bf28      	it	cs
 800492a:	2307      	movcs	r3, #7
 800492c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	89fa      	ldrh	r2, [r7, #14]
 8004932:	4619      	mov	r1, r3
 8004934:	6878      	ldr	r0, [r7, #4]
 8004936:	f001 fd43 	bl	80063c0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800493a:	e090      	b.n	8004a5e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	785a      	ldrb	r2, [r3, #1]
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	88db      	ldrh	r3, [r3, #6]
 800494a:	2b3f      	cmp	r3, #63	; 0x3f
 800494c:	d803      	bhi.n	8004956 <USBD_CDC_Setup+0xa6>
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	88db      	ldrh	r3, [r3, #6]
 8004952:	b2da      	uxtb	r2, r3
 8004954:	e000      	b.n	8004958 <USBD_CDC_Setup+0xa8>
 8004956:	2240      	movs	r2, #64	; 0x40
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800495e:	6939      	ldr	r1, [r7, #16]
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8004966:	461a      	mov	r2, r3
 8004968:	6878      	ldr	r0, [r7, #4]
 800496a:	f001 fd55 	bl	8006418 <USBD_CtlPrepareRx>
      break;
 800496e:	e076      	b.n	8004a5e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004976:	687a      	ldr	r2, [r7, #4]
 8004978:	33b0      	adds	r3, #176	; 0xb0
 800497a:	009b      	lsls	r3, r3, #2
 800497c:	4413      	add	r3, r2
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	683a      	ldr	r2, [r7, #0]
 8004984:	7850      	ldrb	r0, [r2, #1]
 8004986:	2200      	movs	r2, #0
 8004988:	6839      	ldr	r1, [r7, #0]
 800498a:	4798      	blx	r3
      break;
 800498c:	e067      	b.n	8004a5e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	785b      	ldrb	r3, [r3, #1]
 8004992:	2b0b      	cmp	r3, #11
 8004994:	d851      	bhi.n	8004a3a <USBD_CDC_Setup+0x18a>
 8004996:	a201      	add	r2, pc, #4	; (adr r2, 800499c <USBD_CDC_Setup+0xec>)
 8004998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800499c:	080049cd 	.word	0x080049cd
 80049a0:	08004a49 	.word	0x08004a49
 80049a4:	08004a3b 	.word	0x08004a3b
 80049a8:	08004a3b 	.word	0x08004a3b
 80049ac:	08004a3b 	.word	0x08004a3b
 80049b0:	08004a3b 	.word	0x08004a3b
 80049b4:	08004a3b 	.word	0x08004a3b
 80049b8:	08004a3b 	.word	0x08004a3b
 80049bc:	08004a3b 	.word	0x08004a3b
 80049c0:	08004a3b 	.word	0x08004a3b
 80049c4:	080049f7 	.word	0x080049f7
 80049c8:	08004a21 	.word	0x08004a21
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80049d2:	b2db      	uxtb	r3, r3
 80049d4:	2b03      	cmp	r3, #3
 80049d6:	d107      	bne.n	80049e8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80049d8:	f107 030a 	add.w	r3, r7, #10
 80049dc:	2202      	movs	r2, #2
 80049de:	4619      	mov	r1, r3
 80049e0:	6878      	ldr	r0, [r7, #4]
 80049e2:	f001 fced 	bl	80063c0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80049e6:	e032      	b.n	8004a4e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80049e8:	6839      	ldr	r1, [r7, #0]
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f001 fc77 	bl	80062de <USBD_CtlError>
            ret = USBD_FAIL;
 80049f0:	2303      	movs	r3, #3
 80049f2:	75fb      	strb	r3, [r7, #23]
          break;
 80049f4:	e02b      	b.n	8004a4e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80049fc:	b2db      	uxtb	r3, r3
 80049fe:	2b03      	cmp	r3, #3
 8004a00:	d107      	bne.n	8004a12 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8004a02:	f107 030d 	add.w	r3, r7, #13
 8004a06:	2201      	movs	r2, #1
 8004a08:	4619      	mov	r1, r3
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f001 fcd8 	bl	80063c0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004a10:	e01d      	b.n	8004a4e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8004a12:	6839      	ldr	r1, [r7, #0]
 8004a14:	6878      	ldr	r0, [r7, #4]
 8004a16:	f001 fc62 	bl	80062de <USBD_CtlError>
            ret = USBD_FAIL;
 8004a1a:	2303      	movs	r3, #3
 8004a1c:	75fb      	strb	r3, [r7, #23]
          break;
 8004a1e:	e016      	b.n	8004a4e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004a26:	b2db      	uxtb	r3, r3
 8004a28:	2b03      	cmp	r3, #3
 8004a2a:	d00f      	beq.n	8004a4c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8004a2c:	6839      	ldr	r1, [r7, #0]
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f001 fc55 	bl	80062de <USBD_CtlError>
            ret = USBD_FAIL;
 8004a34:	2303      	movs	r3, #3
 8004a36:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8004a38:	e008      	b.n	8004a4c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8004a3a:	6839      	ldr	r1, [r7, #0]
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	f001 fc4e 	bl	80062de <USBD_CtlError>
          ret = USBD_FAIL;
 8004a42:	2303      	movs	r3, #3
 8004a44:	75fb      	strb	r3, [r7, #23]
          break;
 8004a46:	e002      	b.n	8004a4e <USBD_CDC_Setup+0x19e>
          break;
 8004a48:	bf00      	nop
 8004a4a:	e008      	b.n	8004a5e <USBD_CDC_Setup+0x1ae>
          break;
 8004a4c:	bf00      	nop
      }
      break;
 8004a4e:	e006      	b.n	8004a5e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8004a50:	6839      	ldr	r1, [r7, #0]
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f001 fc43 	bl	80062de <USBD_CtlError>
      ret = USBD_FAIL;
 8004a58:	2303      	movs	r3, #3
 8004a5a:	75fb      	strb	r3, [r7, #23]
      break;
 8004a5c:	bf00      	nop
  }

  return (uint8_t)ret;
 8004a5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	3718      	adds	r7, #24
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}

08004a68 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b084      	sub	sp, #16
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
 8004a70:	460b      	mov	r3, r1
 8004a72:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8004a7a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	32b0      	adds	r2, #176	; 0xb0
 8004a86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d101      	bne.n	8004a92 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8004a8e:	2303      	movs	r3, #3
 8004a90:	e065      	b.n	8004b5e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	32b0      	adds	r2, #176	; 0xb0
 8004a9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004aa0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8004aa2:	78fb      	ldrb	r3, [r7, #3]
 8004aa4:	f003 020f 	and.w	r2, r3, #15
 8004aa8:	6879      	ldr	r1, [r7, #4]
 8004aaa:	4613      	mov	r3, r2
 8004aac:	009b      	lsls	r3, r3, #2
 8004aae:	4413      	add	r3, r2
 8004ab0:	009b      	lsls	r3, r3, #2
 8004ab2:	440b      	add	r3, r1
 8004ab4:	3318      	adds	r3, #24
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d02f      	beq.n	8004b1c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8004abc:	78fb      	ldrb	r3, [r7, #3]
 8004abe:	f003 020f 	and.w	r2, r3, #15
 8004ac2:	6879      	ldr	r1, [r7, #4]
 8004ac4:	4613      	mov	r3, r2
 8004ac6:	009b      	lsls	r3, r3, #2
 8004ac8:	4413      	add	r3, r2
 8004aca:	009b      	lsls	r3, r3, #2
 8004acc:	440b      	add	r3, r1
 8004ace:	3318      	adds	r3, #24
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	78fb      	ldrb	r3, [r7, #3]
 8004ad4:	f003 010f 	and.w	r1, r3, #15
 8004ad8:	68f8      	ldr	r0, [r7, #12]
 8004ada:	460b      	mov	r3, r1
 8004adc:	00db      	lsls	r3, r3, #3
 8004ade:	440b      	add	r3, r1
 8004ae0:	009b      	lsls	r3, r3, #2
 8004ae2:	4403      	add	r3, r0
 8004ae4:	3348      	adds	r3, #72	; 0x48
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	fbb2 f1f3 	udiv	r1, r2, r3
 8004aec:	fb01 f303 	mul.w	r3, r1, r3
 8004af0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d112      	bne.n	8004b1c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8004af6:	78fb      	ldrb	r3, [r7, #3]
 8004af8:	f003 020f 	and.w	r2, r3, #15
 8004afc:	6879      	ldr	r1, [r7, #4]
 8004afe:	4613      	mov	r3, r2
 8004b00:	009b      	lsls	r3, r3, #2
 8004b02:	4413      	add	r3, r2
 8004b04:	009b      	lsls	r3, r3, #2
 8004b06:	440b      	add	r3, r1
 8004b08:	3318      	adds	r3, #24
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8004b0e:	78f9      	ldrb	r1, [r7, #3]
 8004b10:	2300      	movs	r3, #0
 8004b12:	2200      	movs	r2, #0
 8004b14:	6878      	ldr	r0, [r7, #4]
 8004b16:	f002 f93c 	bl	8006d92 <USBD_LL_Transmit>
 8004b1a:	e01f      	b.n	8004b5c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	33b0      	adds	r3, #176	; 0xb0
 8004b2e:	009b      	lsls	r3, r3, #2
 8004b30:	4413      	add	r3, r2
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	691b      	ldr	r3, [r3, #16]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d010      	beq.n	8004b5c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004b40:	687a      	ldr	r2, [r7, #4]
 8004b42:	33b0      	adds	r3, #176	; 0xb0
 8004b44:	009b      	lsls	r3, r3, #2
 8004b46:	4413      	add	r3, r2
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	691b      	ldr	r3, [r3, #16]
 8004b4c:	68ba      	ldr	r2, [r7, #8]
 8004b4e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8004b52:	68ba      	ldr	r2, [r7, #8]
 8004b54:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8004b58:	78fa      	ldrb	r2, [r7, #3]
 8004b5a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8004b5c:	2300      	movs	r3, #0
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3710      	adds	r7, #16
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}

08004b66 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004b66:	b580      	push	{r7, lr}
 8004b68:	b084      	sub	sp, #16
 8004b6a:	af00      	add	r7, sp, #0
 8004b6c:	6078      	str	r0, [r7, #4]
 8004b6e:	460b      	mov	r3, r1
 8004b70:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	32b0      	adds	r2, #176	; 0xb0
 8004b7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b80:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	32b0      	adds	r2, #176	; 0xb0
 8004b8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d101      	bne.n	8004b98 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8004b94:	2303      	movs	r3, #3
 8004b96:	e01a      	b.n	8004bce <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8004b98:	78fb      	ldrb	r3, [r7, #3]
 8004b9a:	4619      	mov	r1, r3
 8004b9c:	6878      	ldr	r0, [r7, #4]
 8004b9e:	f002 f93a 	bl	8006e16 <USBD_LL_GetRxDataSize>
 8004ba2:	4602      	mov	r2, r0
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004bb0:	687a      	ldr	r2, [r7, #4]
 8004bb2:	33b0      	adds	r3, #176	; 0xb0
 8004bb4:	009b      	lsls	r3, r3, #2
 8004bb6:	4413      	add	r3, r2
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	68db      	ldr	r3, [r3, #12]
 8004bbc:	68fa      	ldr	r2, [r7, #12]
 8004bbe:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8004bc2:	68fa      	ldr	r2, [r7, #12]
 8004bc4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8004bc8:	4611      	mov	r1, r2
 8004bca:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8004bcc:	2300      	movs	r3, #0
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	3710      	adds	r7, #16
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}

08004bd6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8004bd6:	b580      	push	{r7, lr}
 8004bd8:	b084      	sub	sp, #16
 8004bda:	af00      	add	r7, sp, #0
 8004bdc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	32b0      	adds	r2, #176	; 0xb0
 8004be8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004bec:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d101      	bne.n	8004bf8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8004bf4:	2303      	movs	r3, #3
 8004bf6:	e025      	b.n	8004c44 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	33b0      	adds	r3, #176	; 0xb0
 8004c02:	009b      	lsls	r3, r3, #2
 8004c04:	4413      	add	r3, r2
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d01a      	beq.n	8004c42 <USBD_CDC_EP0_RxReady+0x6c>
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8004c12:	2bff      	cmp	r3, #255	; 0xff
 8004c14:	d015      	beq.n	8004c42 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004c1c:	687a      	ldr	r2, [r7, #4]
 8004c1e:	33b0      	adds	r3, #176	; 0xb0
 8004c20:	009b      	lsls	r3, r3, #2
 8004c22:	4413      	add	r3, r2
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	689b      	ldr	r3, [r3, #8]
 8004c28:	68fa      	ldr	r2, [r7, #12]
 8004c2a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8004c2e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8004c30:	68fa      	ldr	r2, [r7, #12]
 8004c32:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8004c36:	b292      	uxth	r2, r2
 8004c38:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	22ff      	movs	r2, #255	; 0xff
 8004c3e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8004c42:	2300      	movs	r3, #0
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	3710      	adds	r7, #16
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd80      	pop	{r7, pc}

08004c4c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b086      	sub	sp, #24
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8004c54:	2182      	movs	r1, #130	; 0x82
 8004c56:	4818      	ldr	r0, [pc, #96]	; (8004cb8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8004c58:	f000 fd09 	bl	800566e <USBD_GetEpDesc>
 8004c5c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8004c5e:	2101      	movs	r1, #1
 8004c60:	4815      	ldr	r0, [pc, #84]	; (8004cb8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8004c62:	f000 fd04 	bl	800566e <USBD_GetEpDesc>
 8004c66:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8004c68:	2181      	movs	r1, #129	; 0x81
 8004c6a:	4813      	ldr	r0, [pc, #76]	; (8004cb8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8004c6c:	f000 fcff 	bl	800566e <USBD_GetEpDesc>
 8004c70:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d002      	beq.n	8004c7e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	2210      	movs	r2, #16
 8004c7c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d006      	beq.n	8004c92 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	2200      	movs	r2, #0
 8004c88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c8c:	711a      	strb	r2, [r3, #4]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d006      	beq.n	8004ca6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ca0:	711a      	strb	r2, [r3, #4]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2243      	movs	r2, #67	; 0x43
 8004caa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8004cac:	4b02      	ldr	r3, [pc, #8]	; (8004cb8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3718      	adds	r7, #24
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}
 8004cb6:	bf00      	nop
 8004cb8:	20000050 	.word	0x20000050

08004cbc <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b086      	sub	sp, #24
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8004cc4:	2182      	movs	r1, #130	; 0x82
 8004cc6:	4818      	ldr	r0, [pc, #96]	; (8004d28 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8004cc8:	f000 fcd1 	bl	800566e <USBD_GetEpDesc>
 8004ccc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8004cce:	2101      	movs	r1, #1
 8004cd0:	4815      	ldr	r0, [pc, #84]	; (8004d28 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8004cd2:	f000 fccc 	bl	800566e <USBD_GetEpDesc>
 8004cd6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8004cd8:	2181      	movs	r1, #129	; 0x81
 8004cda:	4813      	ldr	r0, [pc, #76]	; (8004d28 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8004cdc:	f000 fcc7 	bl	800566e <USBD_GetEpDesc>
 8004ce0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d002      	beq.n	8004cee <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	2210      	movs	r2, #16
 8004cec:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d006      	beq.n	8004d02 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	711a      	strb	r2, [r3, #4]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	f042 0202 	orr.w	r2, r2, #2
 8004d00:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d006      	beq.n	8004d16 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	711a      	strb	r2, [r3, #4]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	f042 0202 	orr.w	r2, r2, #2
 8004d14:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2243      	movs	r2, #67	; 0x43
 8004d1a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8004d1c:	4b02      	ldr	r3, [pc, #8]	; (8004d28 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	3718      	adds	r7, #24
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}
 8004d26:	bf00      	nop
 8004d28:	20000050 	.word	0x20000050

08004d2c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b086      	sub	sp, #24
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8004d34:	2182      	movs	r1, #130	; 0x82
 8004d36:	4818      	ldr	r0, [pc, #96]	; (8004d98 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8004d38:	f000 fc99 	bl	800566e <USBD_GetEpDesc>
 8004d3c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8004d3e:	2101      	movs	r1, #1
 8004d40:	4815      	ldr	r0, [pc, #84]	; (8004d98 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8004d42:	f000 fc94 	bl	800566e <USBD_GetEpDesc>
 8004d46:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8004d48:	2181      	movs	r1, #129	; 0x81
 8004d4a:	4813      	ldr	r0, [pc, #76]	; (8004d98 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8004d4c:	f000 fc8f 	bl	800566e <USBD_GetEpDesc>
 8004d50:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d002      	beq.n	8004d5e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	2210      	movs	r2, #16
 8004d5c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d006      	beq.n	8004d72 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	2200      	movs	r2, #0
 8004d68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d6c:	711a      	strb	r2, [r3, #4]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d006      	beq.n	8004d86 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d80:	711a      	strb	r2, [r3, #4]
 8004d82:	2200      	movs	r2, #0
 8004d84:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2243      	movs	r2, #67	; 0x43
 8004d8a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8004d8c:	4b02      	ldr	r3, [pc, #8]	; (8004d98 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3718      	adds	r7, #24
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}
 8004d96:	bf00      	nop
 8004d98:	20000050 	.word	0x20000050

08004d9c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b083      	sub	sp, #12
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	220a      	movs	r2, #10
 8004da8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8004daa:	4b03      	ldr	r3, [pc, #12]	; (8004db8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	370c      	adds	r7, #12
 8004db0:	46bd      	mov	sp, r7
 8004db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db6:	4770      	bx	lr
 8004db8:	2000000c 	.word	0x2000000c

08004dbc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b083      	sub	sp, #12
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
 8004dc4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d101      	bne.n	8004dd0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8004dcc:	2303      	movs	r3, #3
 8004dce:	e009      	b.n	8004de4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004dd6:	687a      	ldr	r2, [r7, #4]
 8004dd8:	33b0      	adds	r3, #176	; 0xb0
 8004dda:	009b      	lsls	r3, r3, #2
 8004ddc:	4413      	add	r3, r2
 8004dde:	683a      	ldr	r2, [r7, #0]
 8004de0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8004de2:	2300      	movs	r3, #0
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	370c      	adds	r7, #12
 8004de8:	46bd      	mov	sp, r7
 8004dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dee:	4770      	bx	lr

08004df0 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b087      	sub	sp, #28
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	60f8      	str	r0, [r7, #12]
 8004df8:	60b9      	str	r1, [r7, #8]
 8004dfa:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	32b0      	adds	r2, #176	; 0xb0
 8004e06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e0a:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d101      	bne.n	8004e16 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8004e12:	2303      	movs	r3, #3
 8004e14:	e008      	b.n	8004e28 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	68ba      	ldr	r2, [r7, #8]
 8004e1a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	687a      	ldr	r2, [r7, #4]
 8004e22:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8004e26:	2300      	movs	r3, #0
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	371c      	adds	r7, #28
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e32:	4770      	bx	lr

08004e34 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b085      	sub	sp, #20
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
 8004e3c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	32b0      	adds	r2, #176	; 0xb0
 8004e48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e4c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d101      	bne.n	8004e58 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8004e54:	2303      	movs	r3, #3
 8004e56:	e004      	b.n	8004e62 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	683a      	ldr	r2, [r7, #0]
 8004e5c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8004e60:	2300      	movs	r3, #0
}
 8004e62:	4618      	mov	r0, r3
 8004e64:	3714      	adds	r7, #20
 8004e66:	46bd      	mov	sp, r7
 8004e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6c:	4770      	bx	lr
	...

08004e70 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b084      	sub	sp, #16
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	32b0      	adds	r2, #176	; 0xb0
 8004e82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e86:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	32b0      	adds	r2, #176	; 0xb0
 8004e92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d101      	bne.n	8004e9e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8004e9a:	2303      	movs	r3, #3
 8004e9c:	e018      	b.n	8004ed0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	7c1b      	ldrb	r3, [r3, #16]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d10a      	bne.n	8004ebc <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004ea6:	4b0c      	ldr	r3, [pc, #48]	; (8004ed8 <USBD_CDC_ReceivePacket+0x68>)
 8004ea8:	7819      	ldrb	r1, [r3, #0]
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004eb0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	f001 ff8d 	bl	8006dd4 <USBD_LL_PrepareReceive>
 8004eba:	e008      	b.n	8004ece <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004ebc:	4b06      	ldr	r3, [pc, #24]	; (8004ed8 <USBD_CDC_ReceivePacket+0x68>)
 8004ebe:	7819      	ldrb	r1, [r3, #0]
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004ec6:	2340      	movs	r3, #64	; 0x40
 8004ec8:	6878      	ldr	r0, [r7, #4]
 8004eca:	f001 ff83 	bl	8006dd4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004ece:	2300      	movs	r3, #0
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	3710      	adds	r7, #16
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	bd80      	pop	{r7, pc}
 8004ed8:	20000094 	.word	0x20000094

08004edc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b086      	sub	sp, #24
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	60f8      	str	r0, [r7, #12]
 8004ee4:	60b9      	str	r1, [r7, #8]
 8004ee6:	4613      	mov	r3, r2
 8004ee8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d101      	bne.n	8004ef4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8004ef0:	2303      	movs	r3, #3
 8004ef2:	e01f      	b.n	8004f34 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2200      	movs	r2, #0
 8004f00:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2200      	movs	r2, #0
 8004f08:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d003      	beq.n	8004f1a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	68ba      	ldr	r2, [r7, #8]
 8004f16:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	79fa      	ldrb	r2, [r7, #7]
 8004f26:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8004f28:	68f8      	ldr	r0, [r7, #12]
 8004f2a:	f001 fdfd 	bl	8006b28 <USBD_LL_Init>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	75fb      	strb	r3, [r7, #23]

  return ret;
 8004f32:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	3718      	adds	r7, #24
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd80      	pop	{r7, pc}

08004f3c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b084      	sub	sp, #16
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
 8004f44:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8004f46:	2300      	movs	r3, #0
 8004f48:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d101      	bne.n	8004f54 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8004f50:	2303      	movs	r3, #3
 8004f52:	e025      	b.n	8004fa0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	683a      	ldr	r2, [r7, #0]
 8004f58:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	32ae      	adds	r2, #174	; 0xae
 8004f66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d00f      	beq.n	8004f90 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	32ae      	adds	r2, #174	; 0xae
 8004f7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f80:	f107 020e 	add.w	r2, r7, #14
 8004f84:	4610      	mov	r0, r2
 8004f86:	4798      	blx	r3
 8004f88:	4602      	mov	r2, r0
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8004f96:	1c5a      	adds	r2, r3, #1
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8004f9e:	2300      	movs	r3, #0
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	3710      	adds	r7, #16
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}

08004fa8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b082      	sub	sp, #8
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f001 fe05 	bl	8006bc0 <USBD_LL_Start>
 8004fb6:	4603      	mov	r3, r0
}
 8004fb8:	4618      	mov	r0, r3
 8004fba:	3708      	adds	r7, #8
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bd80      	pop	{r7, pc}

08004fc0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b083      	sub	sp, #12
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004fc8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	370c      	adds	r7, #12
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd4:	4770      	bx	lr

08004fd6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004fd6:	b580      	push	{r7, lr}
 8004fd8:	b084      	sub	sp, #16
 8004fda:	af00      	add	r7, sp, #0
 8004fdc:	6078      	str	r0, [r7, #4]
 8004fde:	460b      	mov	r3, r1
 8004fe0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d009      	beq.n	8005004 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	78fa      	ldrb	r2, [r7, #3]
 8004ffa:	4611      	mov	r1, r2
 8004ffc:	6878      	ldr	r0, [r7, #4]
 8004ffe:	4798      	blx	r3
 8005000:	4603      	mov	r3, r0
 8005002:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005004:	7bfb      	ldrb	r3, [r7, #15]
}
 8005006:	4618      	mov	r0, r3
 8005008:	3710      	adds	r7, #16
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}

0800500e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800500e:	b580      	push	{r7, lr}
 8005010:	b084      	sub	sp, #16
 8005012:	af00      	add	r7, sp, #0
 8005014:	6078      	str	r0, [r7, #4]
 8005016:	460b      	mov	r3, r1
 8005018:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800501a:	2300      	movs	r3, #0
 800501c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	78fa      	ldrb	r2, [r7, #3]
 8005028:	4611      	mov	r1, r2
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	4798      	blx	r3
 800502e:	4603      	mov	r3, r0
 8005030:	2b00      	cmp	r3, #0
 8005032:	d001      	beq.n	8005038 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005034:	2303      	movs	r3, #3
 8005036:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005038:	7bfb      	ldrb	r3, [r7, #15]
}
 800503a:	4618      	mov	r0, r3
 800503c:	3710      	adds	r7, #16
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}

08005042 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005042:	b580      	push	{r7, lr}
 8005044:	b084      	sub	sp, #16
 8005046:	af00      	add	r7, sp, #0
 8005048:	6078      	str	r0, [r7, #4]
 800504a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005052:	6839      	ldr	r1, [r7, #0]
 8005054:	4618      	mov	r0, r3
 8005056:	f001 f908 	bl	800626a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2201      	movs	r2, #1
 800505e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005068:	461a      	mov	r2, r3
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005076:	f003 031f 	and.w	r3, r3, #31
 800507a:	2b02      	cmp	r3, #2
 800507c:	d01a      	beq.n	80050b4 <USBD_LL_SetupStage+0x72>
 800507e:	2b02      	cmp	r3, #2
 8005080:	d822      	bhi.n	80050c8 <USBD_LL_SetupStage+0x86>
 8005082:	2b00      	cmp	r3, #0
 8005084:	d002      	beq.n	800508c <USBD_LL_SetupStage+0x4a>
 8005086:	2b01      	cmp	r3, #1
 8005088:	d00a      	beq.n	80050a0 <USBD_LL_SetupStage+0x5e>
 800508a:	e01d      	b.n	80050c8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005092:	4619      	mov	r1, r3
 8005094:	6878      	ldr	r0, [r7, #4]
 8005096:	f000 fb5f 	bl	8005758 <USBD_StdDevReq>
 800509a:	4603      	mov	r3, r0
 800509c:	73fb      	strb	r3, [r7, #15]
      break;
 800509e:	e020      	b.n	80050e2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80050a6:	4619      	mov	r1, r3
 80050a8:	6878      	ldr	r0, [r7, #4]
 80050aa:	f000 fbc7 	bl	800583c <USBD_StdItfReq>
 80050ae:	4603      	mov	r3, r0
 80050b0:	73fb      	strb	r3, [r7, #15]
      break;
 80050b2:	e016      	b.n	80050e2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80050ba:	4619      	mov	r1, r3
 80050bc:	6878      	ldr	r0, [r7, #4]
 80050be:	f000 fc29 	bl	8005914 <USBD_StdEPReq>
 80050c2:	4603      	mov	r3, r0
 80050c4:	73fb      	strb	r3, [r7, #15]
      break;
 80050c6:	e00c      	b.n	80050e2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80050ce:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80050d2:	b2db      	uxtb	r3, r3
 80050d4:	4619      	mov	r1, r3
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	f001 fdd2 	bl	8006c80 <USBD_LL_StallEP>
 80050dc:	4603      	mov	r3, r0
 80050de:	73fb      	strb	r3, [r7, #15]
      break;
 80050e0:	bf00      	nop
  }

  return ret;
 80050e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	3710      	adds	r7, #16
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}

080050ec <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b086      	sub	sp, #24
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	60f8      	str	r0, [r7, #12]
 80050f4:	460b      	mov	r3, r1
 80050f6:	607a      	str	r2, [r7, #4]
 80050f8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80050fa:	2300      	movs	r3, #0
 80050fc:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80050fe:	7afb      	ldrb	r3, [r7, #11]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d16e      	bne.n	80051e2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800510a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005112:	2b03      	cmp	r3, #3
 8005114:	f040 8098 	bne.w	8005248 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	689a      	ldr	r2, [r3, #8]
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	68db      	ldr	r3, [r3, #12]
 8005120:	429a      	cmp	r2, r3
 8005122:	d913      	bls.n	800514c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	689a      	ldr	r2, [r3, #8]
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	68db      	ldr	r3, [r3, #12]
 800512c:	1ad2      	subs	r2, r2, r3
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	68da      	ldr	r2, [r3, #12]
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	689b      	ldr	r3, [r3, #8]
 800513a:	4293      	cmp	r3, r2
 800513c:	bf28      	it	cs
 800513e:	4613      	movcs	r3, r2
 8005140:	461a      	mov	r2, r3
 8005142:	6879      	ldr	r1, [r7, #4]
 8005144:	68f8      	ldr	r0, [r7, #12]
 8005146:	f001 f984 	bl	8006452 <USBD_CtlContinueRx>
 800514a:	e07d      	b.n	8005248 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005152:	f003 031f 	and.w	r3, r3, #31
 8005156:	2b02      	cmp	r3, #2
 8005158:	d014      	beq.n	8005184 <USBD_LL_DataOutStage+0x98>
 800515a:	2b02      	cmp	r3, #2
 800515c:	d81d      	bhi.n	800519a <USBD_LL_DataOutStage+0xae>
 800515e:	2b00      	cmp	r3, #0
 8005160:	d002      	beq.n	8005168 <USBD_LL_DataOutStage+0x7c>
 8005162:	2b01      	cmp	r3, #1
 8005164:	d003      	beq.n	800516e <USBD_LL_DataOutStage+0x82>
 8005166:	e018      	b.n	800519a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005168:	2300      	movs	r3, #0
 800516a:	75bb      	strb	r3, [r7, #22]
            break;
 800516c:	e018      	b.n	80051a0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005174:	b2db      	uxtb	r3, r3
 8005176:	4619      	mov	r1, r3
 8005178:	68f8      	ldr	r0, [r7, #12]
 800517a:	f000 fa5e 	bl	800563a <USBD_CoreFindIF>
 800517e:	4603      	mov	r3, r0
 8005180:	75bb      	strb	r3, [r7, #22]
            break;
 8005182:	e00d      	b.n	80051a0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800518a:	b2db      	uxtb	r3, r3
 800518c:	4619      	mov	r1, r3
 800518e:	68f8      	ldr	r0, [r7, #12]
 8005190:	f000 fa60 	bl	8005654 <USBD_CoreFindEP>
 8005194:	4603      	mov	r3, r0
 8005196:	75bb      	strb	r3, [r7, #22]
            break;
 8005198:	e002      	b.n	80051a0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800519a:	2300      	movs	r3, #0
 800519c:	75bb      	strb	r3, [r7, #22]
            break;
 800519e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80051a0:	7dbb      	ldrb	r3, [r7, #22]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d119      	bne.n	80051da <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80051ac:	b2db      	uxtb	r3, r3
 80051ae:	2b03      	cmp	r3, #3
 80051b0:	d113      	bne.n	80051da <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80051b2:	7dba      	ldrb	r2, [r7, #22]
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	32ae      	adds	r2, #174	; 0xae
 80051b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051bc:	691b      	ldr	r3, [r3, #16]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d00b      	beq.n	80051da <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80051c2:	7dba      	ldrb	r2, [r7, #22]
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80051ca:	7dba      	ldrb	r2, [r7, #22]
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	32ae      	adds	r2, #174	; 0xae
 80051d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051d4:	691b      	ldr	r3, [r3, #16]
 80051d6:	68f8      	ldr	r0, [r7, #12]
 80051d8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80051da:	68f8      	ldr	r0, [r7, #12]
 80051dc:	f001 f94a 	bl	8006474 <USBD_CtlSendStatus>
 80051e0:	e032      	b.n	8005248 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80051e2:	7afb      	ldrb	r3, [r7, #11]
 80051e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051e8:	b2db      	uxtb	r3, r3
 80051ea:	4619      	mov	r1, r3
 80051ec:	68f8      	ldr	r0, [r7, #12]
 80051ee:	f000 fa31 	bl	8005654 <USBD_CoreFindEP>
 80051f2:	4603      	mov	r3, r0
 80051f4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80051f6:	7dbb      	ldrb	r3, [r7, #22]
 80051f8:	2bff      	cmp	r3, #255	; 0xff
 80051fa:	d025      	beq.n	8005248 <USBD_LL_DataOutStage+0x15c>
 80051fc:	7dbb      	ldrb	r3, [r7, #22]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d122      	bne.n	8005248 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005208:	b2db      	uxtb	r3, r3
 800520a:	2b03      	cmp	r3, #3
 800520c:	d117      	bne.n	800523e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800520e:	7dba      	ldrb	r2, [r7, #22]
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	32ae      	adds	r2, #174	; 0xae
 8005214:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005218:	699b      	ldr	r3, [r3, #24]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d00f      	beq.n	800523e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800521e:	7dba      	ldrb	r2, [r7, #22]
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005226:	7dba      	ldrb	r2, [r7, #22]
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	32ae      	adds	r2, #174	; 0xae
 800522c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005230:	699b      	ldr	r3, [r3, #24]
 8005232:	7afa      	ldrb	r2, [r7, #11]
 8005234:	4611      	mov	r1, r2
 8005236:	68f8      	ldr	r0, [r7, #12]
 8005238:	4798      	blx	r3
 800523a:	4603      	mov	r3, r0
 800523c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800523e:	7dfb      	ldrb	r3, [r7, #23]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d001      	beq.n	8005248 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005244:	7dfb      	ldrb	r3, [r7, #23]
 8005246:	e000      	b.n	800524a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005248:	2300      	movs	r3, #0
}
 800524a:	4618      	mov	r0, r3
 800524c:	3718      	adds	r7, #24
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}

08005252 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005252:	b580      	push	{r7, lr}
 8005254:	b086      	sub	sp, #24
 8005256:	af00      	add	r7, sp, #0
 8005258:	60f8      	str	r0, [r7, #12]
 800525a:	460b      	mov	r3, r1
 800525c:	607a      	str	r2, [r7, #4]
 800525e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005260:	7afb      	ldrb	r3, [r7, #11]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d16f      	bne.n	8005346 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	3314      	adds	r3, #20
 800526a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005272:	2b02      	cmp	r3, #2
 8005274:	d15a      	bne.n	800532c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	689a      	ldr	r2, [r3, #8]
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	68db      	ldr	r3, [r3, #12]
 800527e:	429a      	cmp	r2, r3
 8005280:	d914      	bls.n	80052ac <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	689a      	ldr	r2, [r3, #8]
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	68db      	ldr	r3, [r3, #12]
 800528a:	1ad2      	subs	r2, r2, r3
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	689b      	ldr	r3, [r3, #8]
 8005294:	461a      	mov	r2, r3
 8005296:	6879      	ldr	r1, [r7, #4]
 8005298:	68f8      	ldr	r0, [r7, #12]
 800529a:	f001 f8ac 	bl	80063f6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800529e:	2300      	movs	r3, #0
 80052a0:	2200      	movs	r2, #0
 80052a2:	2100      	movs	r1, #0
 80052a4:	68f8      	ldr	r0, [r7, #12]
 80052a6:	f001 fd95 	bl	8006dd4 <USBD_LL_PrepareReceive>
 80052aa:	e03f      	b.n	800532c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	68da      	ldr	r2, [r3, #12]
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	689b      	ldr	r3, [r3, #8]
 80052b4:	429a      	cmp	r2, r3
 80052b6:	d11c      	bne.n	80052f2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	685a      	ldr	r2, [r3, #4]
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80052c0:	429a      	cmp	r2, r3
 80052c2:	d316      	bcc.n	80052f2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80052c4:	693b      	ldr	r3, [r7, #16]
 80052c6:	685a      	ldr	r2, [r3, #4]
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80052ce:	429a      	cmp	r2, r3
 80052d0:	d20f      	bcs.n	80052f2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80052d2:	2200      	movs	r2, #0
 80052d4:	2100      	movs	r1, #0
 80052d6:	68f8      	ldr	r0, [r7, #12]
 80052d8:	f001 f88d 	bl	80063f6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2200      	movs	r2, #0
 80052e0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80052e4:	2300      	movs	r3, #0
 80052e6:	2200      	movs	r2, #0
 80052e8:	2100      	movs	r1, #0
 80052ea:	68f8      	ldr	r0, [r7, #12]
 80052ec:	f001 fd72 	bl	8006dd4 <USBD_LL_PrepareReceive>
 80052f0:	e01c      	b.n	800532c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80052f8:	b2db      	uxtb	r3, r3
 80052fa:	2b03      	cmp	r3, #3
 80052fc:	d10f      	bne.n	800531e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005304:	68db      	ldr	r3, [r3, #12]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d009      	beq.n	800531e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2200      	movs	r2, #0
 800530e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005318:	68db      	ldr	r3, [r3, #12]
 800531a:	68f8      	ldr	r0, [r7, #12]
 800531c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800531e:	2180      	movs	r1, #128	; 0x80
 8005320:	68f8      	ldr	r0, [r7, #12]
 8005322:	f001 fcad 	bl	8006c80 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005326:	68f8      	ldr	r0, [r7, #12]
 8005328:	f001 f8b7 	bl	800649a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005332:	2b00      	cmp	r3, #0
 8005334:	d03a      	beq.n	80053ac <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8005336:	68f8      	ldr	r0, [r7, #12]
 8005338:	f7ff fe42 	bl	8004fc0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	2200      	movs	r2, #0
 8005340:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005344:	e032      	b.n	80053ac <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8005346:	7afb      	ldrb	r3, [r7, #11]
 8005348:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800534c:	b2db      	uxtb	r3, r3
 800534e:	4619      	mov	r1, r3
 8005350:	68f8      	ldr	r0, [r7, #12]
 8005352:	f000 f97f 	bl	8005654 <USBD_CoreFindEP>
 8005356:	4603      	mov	r3, r0
 8005358:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800535a:	7dfb      	ldrb	r3, [r7, #23]
 800535c:	2bff      	cmp	r3, #255	; 0xff
 800535e:	d025      	beq.n	80053ac <USBD_LL_DataInStage+0x15a>
 8005360:	7dfb      	ldrb	r3, [r7, #23]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d122      	bne.n	80053ac <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800536c:	b2db      	uxtb	r3, r3
 800536e:	2b03      	cmp	r3, #3
 8005370:	d11c      	bne.n	80053ac <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8005372:	7dfa      	ldrb	r2, [r7, #23]
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	32ae      	adds	r2, #174	; 0xae
 8005378:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800537c:	695b      	ldr	r3, [r3, #20]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d014      	beq.n	80053ac <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8005382:	7dfa      	ldrb	r2, [r7, #23]
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800538a:	7dfa      	ldrb	r2, [r7, #23]
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	32ae      	adds	r2, #174	; 0xae
 8005390:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005394:	695b      	ldr	r3, [r3, #20]
 8005396:	7afa      	ldrb	r2, [r7, #11]
 8005398:	4611      	mov	r1, r2
 800539a:	68f8      	ldr	r0, [r7, #12]
 800539c:	4798      	blx	r3
 800539e:	4603      	mov	r3, r0
 80053a0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80053a2:	7dbb      	ldrb	r3, [r7, #22]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d001      	beq.n	80053ac <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80053a8:	7dbb      	ldrb	r3, [r7, #22]
 80053aa:	e000      	b.n	80053ae <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80053ac:	2300      	movs	r3, #0
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	3718      	adds	r7, #24
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}

080053b6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80053b6:	b580      	push	{r7, lr}
 80053b8:	b084      	sub	sp, #16
 80053ba:	af00      	add	r7, sp, #0
 80053bc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80053be:	2300      	movs	r3, #0
 80053c0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2201      	movs	r2, #1
 80053c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2200      	movs	r2, #0
 80053ce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2200      	movs	r2, #0
 80053d6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2200      	movs	r2, #0
 80053dc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2200      	movs	r2, #0
 80053e4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d014      	beq.n	800541c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d00e      	beq.n	800541c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	687a      	ldr	r2, [r7, #4]
 8005408:	6852      	ldr	r2, [r2, #4]
 800540a:	b2d2      	uxtb	r2, r2
 800540c:	4611      	mov	r1, r2
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	4798      	blx	r3
 8005412:	4603      	mov	r3, r0
 8005414:	2b00      	cmp	r3, #0
 8005416:	d001      	beq.n	800541c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8005418:	2303      	movs	r3, #3
 800541a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800541c:	2340      	movs	r3, #64	; 0x40
 800541e:	2200      	movs	r2, #0
 8005420:	2100      	movs	r1, #0
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f001 fbe7 	bl	8006bf6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2201      	movs	r2, #1
 800542c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2240      	movs	r2, #64	; 0x40
 8005434:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005438:	2340      	movs	r3, #64	; 0x40
 800543a:	2200      	movs	r2, #0
 800543c:	2180      	movs	r1, #128	; 0x80
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f001 fbd9 	bl	8006bf6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2201      	movs	r2, #1
 8005448:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2240      	movs	r2, #64	; 0x40
 800544e:	621a      	str	r2, [r3, #32]

  return ret;
 8005450:	7bfb      	ldrb	r3, [r7, #15]
}
 8005452:	4618      	mov	r0, r3
 8005454:	3710      	adds	r7, #16
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}

0800545a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800545a:	b480      	push	{r7}
 800545c:	b083      	sub	sp, #12
 800545e:	af00      	add	r7, sp, #0
 8005460:	6078      	str	r0, [r7, #4]
 8005462:	460b      	mov	r3, r1
 8005464:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	78fa      	ldrb	r2, [r7, #3]
 800546a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800546c:	2300      	movs	r3, #0
}
 800546e:	4618      	mov	r0, r3
 8005470:	370c      	adds	r7, #12
 8005472:	46bd      	mov	sp, r7
 8005474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005478:	4770      	bx	lr

0800547a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800547a:	b480      	push	{r7}
 800547c:	b083      	sub	sp, #12
 800547e:	af00      	add	r7, sp, #0
 8005480:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005488:	b2da      	uxtb	r2, r3
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2204      	movs	r2, #4
 8005494:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005498:	2300      	movs	r3, #0
}
 800549a:	4618      	mov	r0, r3
 800549c:	370c      	adds	r7, #12
 800549e:	46bd      	mov	sp, r7
 80054a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a4:	4770      	bx	lr

080054a6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80054a6:	b480      	push	{r7}
 80054a8:	b083      	sub	sp, #12
 80054aa:	af00      	add	r7, sp, #0
 80054ac:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80054b4:	b2db      	uxtb	r3, r3
 80054b6:	2b04      	cmp	r3, #4
 80054b8:	d106      	bne.n	80054c8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80054c0:	b2da      	uxtb	r2, r3
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80054c8:	2300      	movs	r3, #0
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	370c      	adds	r7, #12
 80054ce:	46bd      	mov	sp, r7
 80054d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d4:	4770      	bx	lr

080054d6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80054d6:	b580      	push	{r7, lr}
 80054d8:	b082      	sub	sp, #8
 80054da:	af00      	add	r7, sp, #0
 80054dc:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80054e4:	b2db      	uxtb	r3, r3
 80054e6:	2b03      	cmp	r3, #3
 80054e8:	d110      	bne.n	800550c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d00b      	beq.n	800550c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054fa:	69db      	ldr	r3, [r3, #28]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d005      	beq.n	800550c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005506:	69db      	ldr	r3, [r3, #28]
 8005508:	6878      	ldr	r0, [r7, #4]
 800550a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800550c:	2300      	movs	r3, #0
}
 800550e:	4618      	mov	r0, r3
 8005510:	3708      	adds	r7, #8
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}

08005516 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005516:	b580      	push	{r7, lr}
 8005518:	b082      	sub	sp, #8
 800551a:	af00      	add	r7, sp, #0
 800551c:	6078      	str	r0, [r7, #4]
 800551e:	460b      	mov	r3, r1
 8005520:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	32ae      	adds	r2, #174	; 0xae
 800552c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d101      	bne.n	8005538 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8005534:	2303      	movs	r3, #3
 8005536:	e01c      	b.n	8005572 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800553e:	b2db      	uxtb	r3, r3
 8005540:	2b03      	cmp	r3, #3
 8005542:	d115      	bne.n	8005570 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	32ae      	adds	r2, #174	; 0xae
 800554e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005552:	6a1b      	ldr	r3, [r3, #32]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d00b      	beq.n	8005570 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	32ae      	adds	r2, #174	; 0xae
 8005562:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005566:	6a1b      	ldr	r3, [r3, #32]
 8005568:	78fa      	ldrb	r2, [r7, #3]
 800556a:	4611      	mov	r1, r2
 800556c:	6878      	ldr	r0, [r7, #4]
 800556e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005570:	2300      	movs	r3, #0
}
 8005572:	4618      	mov	r0, r3
 8005574:	3708      	adds	r7, #8
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}

0800557a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800557a:	b580      	push	{r7, lr}
 800557c:	b082      	sub	sp, #8
 800557e:	af00      	add	r7, sp, #0
 8005580:	6078      	str	r0, [r7, #4]
 8005582:	460b      	mov	r3, r1
 8005584:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	32ae      	adds	r2, #174	; 0xae
 8005590:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d101      	bne.n	800559c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8005598:	2303      	movs	r3, #3
 800559a:	e01c      	b.n	80055d6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80055a2:	b2db      	uxtb	r3, r3
 80055a4:	2b03      	cmp	r3, #3
 80055a6:	d115      	bne.n	80055d4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	32ae      	adds	r2, #174	; 0xae
 80055b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d00b      	beq.n	80055d4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	32ae      	adds	r2, #174	; 0xae
 80055c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055cc:	78fa      	ldrb	r2, [r7, #3]
 80055ce:	4611      	mov	r1, r2
 80055d0:	6878      	ldr	r0, [r7, #4]
 80055d2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80055d4:	2300      	movs	r3, #0
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	3708      	adds	r7, #8
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}

080055de <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80055de:	b480      	push	{r7}
 80055e0:	b083      	sub	sp, #12
 80055e2:	af00      	add	r7, sp, #0
 80055e4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80055e6:	2300      	movs	r3, #0
}
 80055e8:	4618      	mov	r0, r3
 80055ea:	370c      	adds	r7, #12
 80055ec:	46bd      	mov	sp, r7
 80055ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f2:	4770      	bx	lr

080055f4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b084      	sub	sp, #16
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80055fc:	2300      	movs	r3, #0
 80055fe:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2201      	movs	r2, #1
 8005604:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800560e:	2b00      	cmp	r3, #0
 8005610:	d00e      	beq.n	8005630 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	687a      	ldr	r2, [r7, #4]
 800561c:	6852      	ldr	r2, [r2, #4]
 800561e:	b2d2      	uxtb	r2, r2
 8005620:	4611      	mov	r1, r2
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	4798      	blx	r3
 8005626:	4603      	mov	r3, r0
 8005628:	2b00      	cmp	r3, #0
 800562a:	d001      	beq.n	8005630 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800562c:	2303      	movs	r3, #3
 800562e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005630:	7bfb      	ldrb	r3, [r7, #15]
}
 8005632:	4618      	mov	r0, r3
 8005634:	3710      	adds	r7, #16
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}

0800563a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800563a:	b480      	push	{r7}
 800563c:	b083      	sub	sp, #12
 800563e:	af00      	add	r7, sp, #0
 8005640:	6078      	str	r0, [r7, #4]
 8005642:	460b      	mov	r3, r1
 8005644:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005646:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005648:	4618      	mov	r0, r3
 800564a:	370c      	adds	r7, #12
 800564c:	46bd      	mov	sp, r7
 800564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005652:	4770      	bx	lr

08005654 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005654:	b480      	push	{r7}
 8005656:	b083      	sub	sp, #12
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
 800565c:	460b      	mov	r3, r1
 800565e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005660:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005662:	4618      	mov	r0, r3
 8005664:	370c      	adds	r7, #12
 8005666:	46bd      	mov	sp, r7
 8005668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566c:	4770      	bx	lr

0800566e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800566e:	b580      	push	{r7, lr}
 8005670:	b086      	sub	sp, #24
 8005672:	af00      	add	r7, sp, #0
 8005674:	6078      	str	r0, [r7, #4]
 8005676:	460b      	mov	r3, r1
 8005678:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8005682:	2300      	movs	r3, #0
 8005684:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	885b      	ldrh	r3, [r3, #2]
 800568a:	b29a      	uxth	r2, r3
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	781b      	ldrb	r3, [r3, #0]
 8005690:	b29b      	uxth	r3, r3
 8005692:	429a      	cmp	r2, r3
 8005694:	d920      	bls.n	80056d8 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	781b      	ldrb	r3, [r3, #0]
 800569a:	b29b      	uxth	r3, r3
 800569c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800569e:	e013      	b.n	80056c8 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80056a0:	f107 030a 	add.w	r3, r7, #10
 80056a4:	4619      	mov	r1, r3
 80056a6:	6978      	ldr	r0, [r7, #20]
 80056a8:	f000 f81b 	bl	80056e2 <USBD_GetNextDesc>
 80056ac:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	785b      	ldrb	r3, [r3, #1]
 80056b2:	2b05      	cmp	r3, #5
 80056b4:	d108      	bne.n	80056c8 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	789b      	ldrb	r3, [r3, #2]
 80056be:	78fa      	ldrb	r2, [r7, #3]
 80056c0:	429a      	cmp	r2, r3
 80056c2:	d008      	beq.n	80056d6 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80056c4:	2300      	movs	r3, #0
 80056c6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	885b      	ldrh	r3, [r3, #2]
 80056cc:	b29a      	uxth	r2, r3
 80056ce:	897b      	ldrh	r3, [r7, #10]
 80056d0:	429a      	cmp	r2, r3
 80056d2:	d8e5      	bhi.n	80056a0 <USBD_GetEpDesc+0x32>
 80056d4:	e000      	b.n	80056d8 <USBD_GetEpDesc+0x6a>
          break;
 80056d6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80056d8:	693b      	ldr	r3, [r7, #16]
}
 80056da:	4618      	mov	r0, r3
 80056dc:	3718      	adds	r7, #24
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}

080056e2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80056e2:	b480      	push	{r7}
 80056e4:	b085      	sub	sp, #20
 80056e6:	af00      	add	r7, sp, #0
 80056e8:	6078      	str	r0, [r7, #4]
 80056ea:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	881a      	ldrh	r2, [r3, #0]
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	781b      	ldrb	r3, [r3, #0]
 80056f8:	b29b      	uxth	r3, r3
 80056fa:	4413      	add	r3, r2
 80056fc:	b29a      	uxth	r2, r3
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	781b      	ldrb	r3, [r3, #0]
 8005706:	461a      	mov	r2, r3
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	4413      	add	r3, r2
 800570c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800570e:	68fb      	ldr	r3, [r7, #12]
}
 8005710:	4618      	mov	r0, r3
 8005712:	3714      	adds	r7, #20
 8005714:	46bd      	mov	sp, r7
 8005716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571a:	4770      	bx	lr

0800571c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800571c:	b480      	push	{r7}
 800571e:	b087      	sub	sp, #28
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	781b      	ldrb	r3, [r3, #0]
 800572c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	3301      	adds	r3, #1
 8005732:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	781b      	ldrb	r3, [r3, #0]
 8005738:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800573a:	8a3b      	ldrh	r3, [r7, #16]
 800573c:	021b      	lsls	r3, r3, #8
 800573e:	b21a      	sxth	r2, r3
 8005740:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005744:	4313      	orrs	r3, r2
 8005746:	b21b      	sxth	r3, r3
 8005748:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800574a:	89fb      	ldrh	r3, [r7, #14]
}
 800574c:	4618      	mov	r0, r3
 800574e:	371c      	adds	r7, #28
 8005750:	46bd      	mov	sp, r7
 8005752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005756:	4770      	bx	lr

08005758 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b084      	sub	sp, #16
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
 8005760:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005762:	2300      	movs	r3, #0
 8005764:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	781b      	ldrb	r3, [r3, #0]
 800576a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800576e:	2b40      	cmp	r3, #64	; 0x40
 8005770:	d005      	beq.n	800577e <USBD_StdDevReq+0x26>
 8005772:	2b40      	cmp	r3, #64	; 0x40
 8005774:	d857      	bhi.n	8005826 <USBD_StdDevReq+0xce>
 8005776:	2b00      	cmp	r3, #0
 8005778:	d00f      	beq.n	800579a <USBD_StdDevReq+0x42>
 800577a:	2b20      	cmp	r3, #32
 800577c:	d153      	bne.n	8005826 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	32ae      	adds	r2, #174	; 0xae
 8005788:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800578c:	689b      	ldr	r3, [r3, #8]
 800578e:	6839      	ldr	r1, [r7, #0]
 8005790:	6878      	ldr	r0, [r7, #4]
 8005792:	4798      	blx	r3
 8005794:	4603      	mov	r3, r0
 8005796:	73fb      	strb	r3, [r7, #15]
      break;
 8005798:	e04a      	b.n	8005830 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	785b      	ldrb	r3, [r3, #1]
 800579e:	2b09      	cmp	r3, #9
 80057a0:	d83b      	bhi.n	800581a <USBD_StdDevReq+0xc2>
 80057a2:	a201      	add	r2, pc, #4	; (adr r2, 80057a8 <USBD_StdDevReq+0x50>)
 80057a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057a8:	080057fd 	.word	0x080057fd
 80057ac:	08005811 	.word	0x08005811
 80057b0:	0800581b 	.word	0x0800581b
 80057b4:	08005807 	.word	0x08005807
 80057b8:	0800581b 	.word	0x0800581b
 80057bc:	080057db 	.word	0x080057db
 80057c0:	080057d1 	.word	0x080057d1
 80057c4:	0800581b 	.word	0x0800581b
 80057c8:	080057f3 	.word	0x080057f3
 80057cc:	080057e5 	.word	0x080057e5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80057d0:	6839      	ldr	r1, [r7, #0]
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	f000 fa3c 	bl	8005c50 <USBD_GetDescriptor>
          break;
 80057d8:	e024      	b.n	8005824 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80057da:	6839      	ldr	r1, [r7, #0]
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	f000 fba1 	bl	8005f24 <USBD_SetAddress>
          break;
 80057e2:	e01f      	b.n	8005824 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80057e4:	6839      	ldr	r1, [r7, #0]
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f000 fbe0 	bl	8005fac <USBD_SetConfig>
 80057ec:	4603      	mov	r3, r0
 80057ee:	73fb      	strb	r3, [r7, #15]
          break;
 80057f0:	e018      	b.n	8005824 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80057f2:	6839      	ldr	r1, [r7, #0]
 80057f4:	6878      	ldr	r0, [r7, #4]
 80057f6:	f000 fc83 	bl	8006100 <USBD_GetConfig>
          break;
 80057fa:	e013      	b.n	8005824 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80057fc:	6839      	ldr	r1, [r7, #0]
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f000 fcb4 	bl	800616c <USBD_GetStatus>
          break;
 8005804:	e00e      	b.n	8005824 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005806:	6839      	ldr	r1, [r7, #0]
 8005808:	6878      	ldr	r0, [r7, #4]
 800580a:	f000 fce3 	bl	80061d4 <USBD_SetFeature>
          break;
 800580e:	e009      	b.n	8005824 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005810:	6839      	ldr	r1, [r7, #0]
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f000 fd07 	bl	8006226 <USBD_ClrFeature>
          break;
 8005818:	e004      	b.n	8005824 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800581a:	6839      	ldr	r1, [r7, #0]
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	f000 fd5e 	bl	80062de <USBD_CtlError>
          break;
 8005822:	bf00      	nop
      }
      break;
 8005824:	e004      	b.n	8005830 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8005826:	6839      	ldr	r1, [r7, #0]
 8005828:	6878      	ldr	r0, [r7, #4]
 800582a:	f000 fd58 	bl	80062de <USBD_CtlError>
      break;
 800582e:	bf00      	nop
  }

  return ret;
 8005830:	7bfb      	ldrb	r3, [r7, #15]
}
 8005832:	4618      	mov	r0, r3
 8005834:	3710      	adds	r7, #16
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}
 800583a:	bf00      	nop

0800583c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b084      	sub	sp, #16
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
 8005844:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005846:	2300      	movs	r3, #0
 8005848:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	781b      	ldrb	r3, [r3, #0]
 800584e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005852:	2b40      	cmp	r3, #64	; 0x40
 8005854:	d005      	beq.n	8005862 <USBD_StdItfReq+0x26>
 8005856:	2b40      	cmp	r3, #64	; 0x40
 8005858:	d852      	bhi.n	8005900 <USBD_StdItfReq+0xc4>
 800585a:	2b00      	cmp	r3, #0
 800585c:	d001      	beq.n	8005862 <USBD_StdItfReq+0x26>
 800585e:	2b20      	cmp	r3, #32
 8005860:	d14e      	bne.n	8005900 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005868:	b2db      	uxtb	r3, r3
 800586a:	3b01      	subs	r3, #1
 800586c:	2b02      	cmp	r3, #2
 800586e:	d840      	bhi.n	80058f2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	889b      	ldrh	r3, [r3, #4]
 8005874:	b2db      	uxtb	r3, r3
 8005876:	2b01      	cmp	r3, #1
 8005878:	d836      	bhi.n	80058e8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	889b      	ldrh	r3, [r3, #4]
 800587e:	b2db      	uxtb	r3, r3
 8005880:	4619      	mov	r1, r3
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f7ff fed9 	bl	800563a <USBD_CoreFindIF>
 8005888:	4603      	mov	r3, r0
 800588a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800588c:	7bbb      	ldrb	r3, [r7, #14]
 800588e:	2bff      	cmp	r3, #255	; 0xff
 8005890:	d01d      	beq.n	80058ce <USBD_StdItfReq+0x92>
 8005892:	7bbb      	ldrb	r3, [r7, #14]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d11a      	bne.n	80058ce <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8005898:	7bba      	ldrb	r2, [r7, #14]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	32ae      	adds	r2, #174	; 0xae
 800589e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058a2:	689b      	ldr	r3, [r3, #8]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d00f      	beq.n	80058c8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80058a8:	7bba      	ldrb	r2, [r7, #14]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80058b0:	7bba      	ldrb	r2, [r7, #14]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	32ae      	adds	r2, #174	; 0xae
 80058b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058ba:	689b      	ldr	r3, [r3, #8]
 80058bc:	6839      	ldr	r1, [r7, #0]
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	4798      	blx	r3
 80058c2:	4603      	mov	r3, r0
 80058c4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80058c6:	e004      	b.n	80058d2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80058c8:	2303      	movs	r3, #3
 80058ca:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80058cc:	e001      	b.n	80058d2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80058ce:	2303      	movs	r3, #3
 80058d0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	88db      	ldrh	r3, [r3, #6]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d110      	bne.n	80058fc <USBD_StdItfReq+0xc0>
 80058da:	7bfb      	ldrb	r3, [r7, #15]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d10d      	bne.n	80058fc <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80058e0:	6878      	ldr	r0, [r7, #4]
 80058e2:	f000 fdc7 	bl	8006474 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80058e6:	e009      	b.n	80058fc <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80058e8:	6839      	ldr	r1, [r7, #0]
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f000 fcf7 	bl	80062de <USBD_CtlError>
          break;
 80058f0:	e004      	b.n	80058fc <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80058f2:	6839      	ldr	r1, [r7, #0]
 80058f4:	6878      	ldr	r0, [r7, #4]
 80058f6:	f000 fcf2 	bl	80062de <USBD_CtlError>
          break;
 80058fa:	e000      	b.n	80058fe <USBD_StdItfReq+0xc2>
          break;
 80058fc:	bf00      	nop
      }
      break;
 80058fe:	e004      	b.n	800590a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8005900:	6839      	ldr	r1, [r7, #0]
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	f000 fceb 	bl	80062de <USBD_CtlError>
      break;
 8005908:	bf00      	nop
  }

  return ret;
 800590a:	7bfb      	ldrb	r3, [r7, #15]
}
 800590c:	4618      	mov	r0, r3
 800590e:	3710      	adds	r7, #16
 8005910:	46bd      	mov	sp, r7
 8005912:	bd80      	pop	{r7, pc}

08005914 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b084      	sub	sp, #16
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
 800591c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800591e:	2300      	movs	r3, #0
 8005920:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	889b      	ldrh	r3, [r3, #4]
 8005926:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	781b      	ldrb	r3, [r3, #0]
 800592c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005930:	2b40      	cmp	r3, #64	; 0x40
 8005932:	d007      	beq.n	8005944 <USBD_StdEPReq+0x30>
 8005934:	2b40      	cmp	r3, #64	; 0x40
 8005936:	f200 817f 	bhi.w	8005c38 <USBD_StdEPReq+0x324>
 800593a:	2b00      	cmp	r3, #0
 800593c:	d02a      	beq.n	8005994 <USBD_StdEPReq+0x80>
 800593e:	2b20      	cmp	r3, #32
 8005940:	f040 817a 	bne.w	8005c38 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8005944:	7bbb      	ldrb	r3, [r7, #14]
 8005946:	4619      	mov	r1, r3
 8005948:	6878      	ldr	r0, [r7, #4]
 800594a:	f7ff fe83 	bl	8005654 <USBD_CoreFindEP>
 800594e:	4603      	mov	r3, r0
 8005950:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005952:	7b7b      	ldrb	r3, [r7, #13]
 8005954:	2bff      	cmp	r3, #255	; 0xff
 8005956:	f000 8174 	beq.w	8005c42 <USBD_StdEPReq+0x32e>
 800595a:	7b7b      	ldrb	r3, [r7, #13]
 800595c:	2b00      	cmp	r3, #0
 800595e:	f040 8170 	bne.w	8005c42 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8005962:	7b7a      	ldrb	r2, [r7, #13]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800596a:	7b7a      	ldrb	r2, [r7, #13]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	32ae      	adds	r2, #174	; 0xae
 8005970:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005974:	689b      	ldr	r3, [r3, #8]
 8005976:	2b00      	cmp	r3, #0
 8005978:	f000 8163 	beq.w	8005c42 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800597c:	7b7a      	ldrb	r2, [r7, #13]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	32ae      	adds	r2, #174	; 0xae
 8005982:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005986:	689b      	ldr	r3, [r3, #8]
 8005988:	6839      	ldr	r1, [r7, #0]
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	4798      	blx	r3
 800598e:	4603      	mov	r3, r0
 8005990:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005992:	e156      	b.n	8005c42 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	785b      	ldrb	r3, [r3, #1]
 8005998:	2b03      	cmp	r3, #3
 800599a:	d008      	beq.n	80059ae <USBD_StdEPReq+0x9a>
 800599c:	2b03      	cmp	r3, #3
 800599e:	f300 8145 	bgt.w	8005c2c <USBD_StdEPReq+0x318>
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	f000 809b 	beq.w	8005ade <USBD_StdEPReq+0x1ca>
 80059a8:	2b01      	cmp	r3, #1
 80059aa:	d03c      	beq.n	8005a26 <USBD_StdEPReq+0x112>
 80059ac:	e13e      	b.n	8005c2c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059b4:	b2db      	uxtb	r3, r3
 80059b6:	2b02      	cmp	r3, #2
 80059b8:	d002      	beq.n	80059c0 <USBD_StdEPReq+0xac>
 80059ba:	2b03      	cmp	r3, #3
 80059bc:	d016      	beq.n	80059ec <USBD_StdEPReq+0xd8>
 80059be:	e02c      	b.n	8005a1a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80059c0:	7bbb      	ldrb	r3, [r7, #14]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d00d      	beq.n	80059e2 <USBD_StdEPReq+0xce>
 80059c6:	7bbb      	ldrb	r3, [r7, #14]
 80059c8:	2b80      	cmp	r3, #128	; 0x80
 80059ca:	d00a      	beq.n	80059e2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80059cc:	7bbb      	ldrb	r3, [r7, #14]
 80059ce:	4619      	mov	r1, r3
 80059d0:	6878      	ldr	r0, [r7, #4]
 80059d2:	f001 f955 	bl	8006c80 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80059d6:	2180      	movs	r1, #128	; 0x80
 80059d8:	6878      	ldr	r0, [r7, #4]
 80059da:	f001 f951 	bl	8006c80 <USBD_LL_StallEP>
 80059de:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80059e0:	e020      	b.n	8005a24 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80059e2:	6839      	ldr	r1, [r7, #0]
 80059e4:	6878      	ldr	r0, [r7, #4]
 80059e6:	f000 fc7a 	bl	80062de <USBD_CtlError>
              break;
 80059ea:	e01b      	b.n	8005a24 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	885b      	ldrh	r3, [r3, #2]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d10e      	bne.n	8005a12 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80059f4:	7bbb      	ldrb	r3, [r7, #14]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d00b      	beq.n	8005a12 <USBD_StdEPReq+0xfe>
 80059fa:	7bbb      	ldrb	r3, [r7, #14]
 80059fc:	2b80      	cmp	r3, #128	; 0x80
 80059fe:	d008      	beq.n	8005a12 <USBD_StdEPReq+0xfe>
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	88db      	ldrh	r3, [r3, #6]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d104      	bne.n	8005a12 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8005a08:	7bbb      	ldrb	r3, [r7, #14]
 8005a0a:	4619      	mov	r1, r3
 8005a0c:	6878      	ldr	r0, [r7, #4]
 8005a0e:	f001 f937 	bl	8006c80 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f000 fd2e 	bl	8006474 <USBD_CtlSendStatus>

              break;
 8005a18:	e004      	b.n	8005a24 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8005a1a:	6839      	ldr	r1, [r7, #0]
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	f000 fc5e 	bl	80062de <USBD_CtlError>
              break;
 8005a22:	bf00      	nop
          }
          break;
 8005a24:	e107      	b.n	8005c36 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a2c:	b2db      	uxtb	r3, r3
 8005a2e:	2b02      	cmp	r3, #2
 8005a30:	d002      	beq.n	8005a38 <USBD_StdEPReq+0x124>
 8005a32:	2b03      	cmp	r3, #3
 8005a34:	d016      	beq.n	8005a64 <USBD_StdEPReq+0x150>
 8005a36:	e04b      	b.n	8005ad0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005a38:	7bbb      	ldrb	r3, [r7, #14]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d00d      	beq.n	8005a5a <USBD_StdEPReq+0x146>
 8005a3e:	7bbb      	ldrb	r3, [r7, #14]
 8005a40:	2b80      	cmp	r3, #128	; 0x80
 8005a42:	d00a      	beq.n	8005a5a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005a44:	7bbb      	ldrb	r3, [r7, #14]
 8005a46:	4619      	mov	r1, r3
 8005a48:	6878      	ldr	r0, [r7, #4]
 8005a4a:	f001 f919 	bl	8006c80 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005a4e:	2180      	movs	r1, #128	; 0x80
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	f001 f915 	bl	8006c80 <USBD_LL_StallEP>
 8005a56:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005a58:	e040      	b.n	8005adc <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8005a5a:	6839      	ldr	r1, [r7, #0]
 8005a5c:	6878      	ldr	r0, [r7, #4]
 8005a5e:	f000 fc3e 	bl	80062de <USBD_CtlError>
              break;
 8005a62:	e03b      	b.n	8005adc <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	885b      	ldrh	r3, [r3, #2]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d136      	bne.n	8005ada <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005a6c:	7bbb      	ldrb	r3, [r7, #14]
 8005a6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d004      	beq.n	8005a80 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005a76:	7bbb      	ldrb	r3, [r7, #14]
 8005a78:	4619      	mov	r1, r3
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f001 f91f 	bl	8006cbe <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8005a80:	6878      	ldr	r0, [r7, #4]
 8005a82:	f000 fcf7 	bl	8006474 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8005a86:	7bbb      	ldrb	r3, [r7, #14]
 8005a88:	4619      	mov	r1, r3
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f7ff fde2 	bl	8005654 <USBD_CoreFindEP>
 8005a90:	4603      	mov	r3, r0
 8005a92:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005a94:	7b7b      	ldrb	r3, [r7, #13]
 8005a96:	2bff      	cmp	r3, #255	; 0xff
 8005a98:	d01f      	beq.n	8005ada <USBD_StdEPReq+0x1c6>
 8005a9a:	7b7b      	ldrb	r3, [r7, #13]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d11c      	bne.n	8005ada <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8005aa0:	7b7a      	ldrb	r2, [r7, #13]
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8005aa8:	7b7a      	ldrb	r2, [r7, #13]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	32ae      	adds	r2, #174	; 0xae
 8005aae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ab2:	689b      	ldr	r3, [r3, #8]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d010      	beq.n	8005ada <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005ab8:	7b7a      	ldrb	r2, [r7, #13]
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	32ae      	adds	r2, #174	; 0xae
 8005abe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ac2:	689b      	ldr	r3, [r3, #8]
 8005ac4:	6839      	ldr	r1, [r7, #0]
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	4798      	blx	r3
 8005aca:	4603      	mov	r3, r0
 8005acc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8005ace:	e004      	b.n	8005ada <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8005ad0:	6839      	ldr	r1, [r7, #0]
 8005ad2:	6878      	ldr	r0, [r7, #4]
 8005ad4:	f000 fc03 	bl	80062de <USBD_CtlError>
              break;
 8005ad8:	e000      	b.n	8005adc <USBD_StdEPReq+0x1c8>
              break;
 8005ada:	bf00      	nop
          }
          break;
 8005adc:	e0ab      	b.n	8005c36 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ae4:	b2db      	uxtb	r3, r3
 8005ae6:	2b02      	cmp	r3, #2
 8005ae8:	d002      	beq.n	8005af0 <USBD_StdEPReq+0x1dc>
 8005aea:	2b03      	cmp	r3, #3
 8005aec:	d032      	beq.n	8005b54 <USBD_StdEPReq+0x240>
 8005aee:	e097      	b.n	8005c20 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005af0:	7bbb      	ldrb	r3, [r7, #14]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d007      	beq.n	8005b06 <USBD_StdEPReq+0x1f2>
 8005af6:	7bbb      	ldrb	r3, [r7, #14]
 8005af8:	2b80      	cmp	r3, #128	; 0x80
 8005afa:	d004      	beq.n	8005b06 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8005afc:	6839      	ldr	r1, [r7, #0]
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f000 fbed 	bl	80062de <USBD_CtlError>
                break;
 8005b04:	e091      	b.n	8005c2a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005b06:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	da0b      	bge.n	8005b26 <USBD_StdEPReq+0x212>
 8005b0e:	7bbb      	ldrb	r3, [r7, #14]
 8005b10:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005b14:	4613      	mov	r3, r2
 8005b16:	009b      	lsls	r3, r3, #2
 8005b18:	4413      	add	r3, r2
 8005b1a:	009b      	lsls	r3, r3, #2
 8005b1c:	3310      	adds	r3, #16
 8005b1e:	687a      	ldr	r2, [r7, #4]
 8005b20:	4413      	add	r3, r2
 8005b22:	3304      	adds	r3, #4
 8005b24:	e00b      	b.n	8005b3e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005b26:	7bbb      	ldrb	r3, [r7, #14]
 8005b28:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005b2c:	4613      	mov	r3, r2
 8005b2e:	009b      	lsls	r3, r3, #2
 8005b30:	4413      	add	r3, r2
 8005b32:	009b      	lsls	r3, r3, #2
 8005b34:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005b38:	687a      	ldr	r2, [r7, #4]
 8005b3a:	4413      	add	r3, r2
 8005b3c:	3304      	adds	r3, #4
 8005b3e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	2200      	movs	r2, #0
 8005b44:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	2202      	movs	r2, #2
 8005b4a:	4619      	mov	r1, r3
 8005b4c:	6878      	ldr	r0, [r7, #4]
 8005b4e:	f000 fc37 	bl	80063c0 <USBD_CtlSendData>
              break;
 8005b52:	e06a      	b.n	8005c2a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005b54:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	da11      	bge.n	8005b80 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005b5c:	7bbb      	ldrb	r3, [r7, #14]
 8005b5e:	f003 020f 	and.w	r2, r3, #15
 8005b62:	6879      	ldr	r1, [r7, #4]
 8005b64:	4613      	mov	r3, r2
 8005b66:	009b      	lsls	r3, r3, #2
 8005b68:	4413      	add	r3, r2
 8005b6a:	009b      	lsls	r3, r3, #2
 8005b6c:	440b      	add	r3, r1
 8005b6e:	3324      	adds	r3, #36	; 0x24
 8005b70:	881b      	ldrh	r3, [r3, #0]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d117      	bne.n	8005ba6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8005b76:	6839      	ldr	r1, [r7, #0]
 8005b78:	6878      	ldr	r0, [r7, #4]
 8005b7a:	f000 fbb0 	bl	80062de <USBD_CtlError>
                  break;
 8005b7e:	e054      	b.n	8005c2a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005b80:	7bbb      	ldrb	r3, [r7, #14]
 8005b82:	f003 020f 	and.w	r2, r3, #15
 8005b86:	6879      	ldr	r1, [r7, #4]
 8005b88:	4613      	mov	r3, r2
 8005b8a:	009b      	lsls	r3, r3, #2
 8005b8c:	4413      	add	r3, r2
 8005b8e:	009b      	lsls	r3, r3, #2
 8005b90:	440b      	add	r3, r1
 8005b92:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005b96:	881b      	ldrh	r3, [r3, #0]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d104      	bne.n	8005ba6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8005b9c:	6839      	ldr	r1, [r7, #0]
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f000 fb9d 	bl	80062de <USBD_CtlError>
                  break;
 8005ba4:	e041      	b.n	8005c2a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005ba6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	da0b      	bge.n	8005bc6 <USBD_StdEPReq+0x2b2>
 8005bae:	7bbb      	ldrb	r3, [r7, #14]
 8005bb0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005bb4:	4613      	mov	r3, r2
 8005bb6:	009b      	lsls	r3, r3, #2
 8005bb8:	4413      	add	r3, r2
 8005bba:	009b      	lsls	r3, r3, #2
 8005bbc:	3310      	adds	r3, #16
 8005bbe:	687a      	ldr	r2, [r7, #4]
 8005bc0:	4413      	add	r3, r2
 8005bc2:	3304      	adds	r3, #4
 8005bc4:	e00b      	b.n	8005bde <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005bc6:	7bbb      	ldrb	r3, [r7, #14]
 8005bc8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005bcc:	4613      	mov	r3, r2
 8005bce:	009b      	lsls	r3, r3, #2
 8005bd0:	4413      	add	r3, r2
 8005bd2:	009b      	lsls	r3, r3, #2
 8005bd4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005bd8:	687a      	ldr	r2, [r7, #4]
 8005bda:	4413      	add	r3, r2
 8005bdc:	3304      	adds	r3, #4
 8005bde:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005be0:	7bbb      	ldrb	r3, [r7, #14]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d002      	beq.n	8005bec <USBD_StdEPReq+0x2d8>
 8005be6:	7bbb      	ldrb	r3, [r7, #14]
 8005be8:	2b80      	cmp	r3, #128	; 0x80
 8005bea:	d103      	bne.n	8005bf4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	601a      	str	r2, [r3, #0]
 8005bf2:	e00e      	b.n	8005c12 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8005bf4:	7bbb      	ldrb	r3, [r7, #14]
 8005bf6:	4619      	mov	r1, r3
 8005bf8:	6878      	ldr	r0, [r7, #4]
 8005bfa:	f001 f87f 	bl	8006cfc <USBD_LL_IsStallEP>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d003      	beq.n	8005c0c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	2201      	movs	r2, #1
 8005c08:	601a      	str	r2, [r3, #0]
 8005c0a:	e002      	b.n	8005c12 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	2202      	movs	r2, #2
 8005c16:	4619      	mov	r1, r3
 8005c18:	6878      	ldr	r0, [r7, #4]
 8005c1a:	f000 fbd1 	bl	80063c0 <USBD_CtlSendData>
              break;
 8005c1e:	e004      	b.n	8005c2a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8005c20:	6839      	ldr	r1, [r7, #0]
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f000 fb5b 	bl	80062de <USBD_CtlError>
              break;
 8005c28:	bf00      	nop
          }
          break;
 8005c2a:	e004      	b.n	8005c36 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8005c2c:	6839      	ldr	r1, [r7, #0]
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f000 fb55 	bl	80062de <USBD_CtlError>
          break;
 8005c34:	bf00      	nop
      }
      break;
 8005c36:	e005      	b.n	8005c44 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8005c38:	6839      	ldr	r1, [r7, #0]
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f000 fb4f 	bl	80062de <USBD_CtlError>
      break;
 8005c40:	e000      	b.n	8005c44 <USBD_StdEPReq+0x330>
      break;
 8005c42:	bf00      	nop
  }

  return ret;
 8005c44:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c46:	4618      	mov	r0, r3
 8005c48:	3710      	adds	r7, #16
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}
	...

08005c50 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b084      	sub	sp, #16
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
 8005c58:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005c62:	2300      	movs	r3, #0
 8005c64:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	885b      	ldrh	r3, [r3, #2]
 8005c6a:	0a1b      	lsrs	r3, r3, #8
 8005c6c:	b29b      	uxth	r3, r3
 8005c6e:	3b01      	subs	r3, #1
 8005c70:	2b06      	cmp	r3, #6
 8005c72:	f200 8128 	bhi.w	8005ec6 <USBD_GetDescriptor+0x276>
 8005c76:	a201      	add	r2, pc, #4	; (adr r2, 8005c7c <USBD_GetDescriptor+0x2c>)
 8005c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c7c:	08005c99 	.word	0x08005c99
 8005c80:	08005cb1 	.word	0x08005cb1
 8005c84:	08005cf1 	.word	0x08005cf1
 8005c88:	08005ec7 	.word	0x08005ec7
 8005c8c:	08005ec7 	.word	0x08005ec7
 8005c90:	08005e67 	.word	0x08005e67
 8005c94:	08005e93 	.word	0x08005e93
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	687a      	ldr	r2, [r7, #4]
 8005ca2:	7c12      	ldrb	r2, [r2, #16]
 8005ca4:	f107 0108 	add.w	r1, r7, #8
 8005ca8:	4610      	mov	r0, r2
 8005caa:	4798      	blx	r3
 8005cac:	60f8      	str	r0, [r7, #12]
      break;
 8005cae:	e112      	b.n	8005ed6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	7c1b      	ldrb	r3, [r3, #16]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d10d      	bne.n	8005cd4 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cc0:	f107 0208 	add.w	r2, r7, #8
 8005cc4:	4610      	mov	r0, r2
 8005cc6:	4798      	blx	r3
 8005cc8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	3301      	adds	r3, #1
 8005cce:	2202      	movs	r2, #2
 8005cd0:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005cd2:	e100      	b.n	8005ed6 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cdc:	f107 0208 	add.w	r2, r7, #8
 8005ce0:	4610      	mov	r0, r2
 8005ce2:	4798      	blx	r3
 8005ce4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	3301      	adds	r3, #1
 8005cea:	2202      	movs	r2, #2
 8005cec:	701a      	strb	r2, [r3, #0]
      break;
 8005cee:	e0f2      	b.n	8005ed6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	885b      	ldrh	r3, [r3, #2]
 8005cf4:	b2db      	uxtb	r3, r3
 8005cf6:	2b05      	cmp	r3, #5
 8005cf8:	f200 80ac 	bhi.w	8005e54 <USBD_GetDescriptor+0x204>
 8005cfc:	a201      	add	r2, pc, #4	; (adr r2, 8005d04 <USBD_GetDescriptor+0xb4>)
 8005cfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d02:	bf00      	nop
 8005d04:	08005d1d 	.word	0x08005d1d
 8005d08:	08005d51 	.word	0x08005d51
 8005d0c:	08005d85 	.word	0x08005d85
 8005d10:	08005db9 	.word	0x08005db9
 8005d14:	08005ded 	.word	0x08005ded
 8005d18:	08005e21 	.word	0x08005e21
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d22:	685b      	ldr	r3, [r3, #4]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d00b      	beq.n	8005d40 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d2e:	685b      	ldr	r3, [r3, #4]
 8005d30:	687a      	ldr	r2, [r7, #4]
 8005d32:	7c12      	ldrb	r2, [r2, #16]
 8005d34:	f107 0108 	add.w	r1, r7, #8
 8005d38:	4610      	mov	r0, r2
 8005d3a:	4798      	blx	r3
 8005d3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005d3e:	e091      	b.n	8005e64 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005d40:	6839      	ldr	r1, [r7, #0]
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f000 facb 	bl	80062de <USBD_CtlError>
            err++;
 8005d48:	7afb      	ldrb	r3, [r7, #11]
 8005d4a:	3301      	adds	r3, #1
 8005d4c:	72fb      	strb	r3, [r7, #11]
          break;
 8005d4e:	e089      	b.n	8005e64 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d56:	689b      	ldr	r3, [r3, #8]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d00b      	beq.n	8005d74 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d62:	689b      	ldr	r3, [r3, #8]
 8005d64:	687a      	ldr	r2, [r7, #4]
 8005d66:	7c12      	ldrb	r2, [r2, #16]
 8005d68:	f107 0108 	add.w	r1, r7, #8
 8005d6c:	4610      	mov	r0, r2
 8005d6e:	4798      	blx	r3
 8005d70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005d72:	e077      	b.n	8005e64 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005d74:	6839      	ldr	r1, [r7, #0]
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	f000 fab1 	bl	80062de <USBD_CtlError>
            err++;
 8005d7c:	7afb      	ldrb	r3, [r7, #11]
 8005d7e:	3301      	adds	r3, #1
 8005d80:	72fb      	strb	r3, [r7, #11]
          break;
 8005d82:	e06f      	b.n	8005e64 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d8a:	68db      	ldr	r3, [r3, #12]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d00b      	beq.n	8005da8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d96:	68db      	ldr	r3, [r3, #12]
 8005d98:	687a      	ldr	r2, [r7, #4]
 8005d9a:	7c12      	ldrb	r2, [r2, #16]
 8005d9c:	f107 0108 	add.w	r1, r7, #8
 8005da0:	4610      	mov	r0, r2
 8005da2:	4798      	blx	r3
 8005da4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005da6:	e05d      	b.n	8005e64 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005da8:	6839      	ldr	r1, [r7, #0]
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f000 fa97 	bl	80062de <USBD_CtlError>
            err++;
 8005db0:	7afb      	ldrb	r3, [r7, #11]
 8005db2:	3301      	adds	r3, #1
 8005db4:	72fb      	strb	r3, [r7, #11]
          break;
 8005db6:	e055      	b.n	8005e64 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005dbe:	691b      	ldr	r3, [r3, #16]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d00b      	beq.n	8005ddc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005dca:	691b      	ldr	r3, [r3, #16]
 8005dcc:	687a      	ldr	r2, [r7, #4]
 8005dce:	7c12      	ldrb	r2, [r2, #16]
 8005dd0:	f107 0108 	add.w	r1, r7, #8
 8005dd4:	4610      	mov	r0, r2
 8005dd6:	4798      	blx	r3
 8005dd8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005dda:	e043      	b.n	8005e64 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005ddc:	6839      	ldr	r1, [r7, #0]
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f000 fa7d 	bl	80062de <USBD_CtlError>
            err++;
 8005de4:	7afb      	ldrb	r3, [r7, #11]
 8005de6:	3301      	adds	r3, #1
 8005de8:	72fb      	strb	r3, [r7, #11]
          break;
 8005dea:	e03b      	b.n	8005e64 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005df2:	695b      	ldr	r3, [r3, #20]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d00b      	beq.n	8005e10 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005dfe:	695b      	ldr	r3, [r3, #20]
 8005e00:	687a      	ldr	r2, [r7, #4]
 8005e02:	7c12      	ldrb	r2, [r2, #16]
 8005e04:	f107 0108 	add.w	r1, r7, #8
 8005e08:	4610      	mov	r0, r2
 8005e0a:	4798      	blx	r3
 8005e0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005e0e:	e029      	b.n	8005e64 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005e10:	6839      	ldr	r1, [r7, #0]
 8005e12:	6878      	ldr	r0, [r7, #4]
 8005e14:	f000 fa63 	bl	80062de <USBD_CtlError>
            err++;
 8005e18:	7afb      	ldrb	r3, [r7, #11]
 8005e1a:	3301      	adds	r3, #1
 8005e1c:	72fb      	strb	r3, [r7, #11]
          break;
 8005e1e:	e021      	b.n	8005e64 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e26:	699b      	ldr	r3, [r3, #24]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d00b      	beq.n	8005e44 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e32:	699b      	ldr	r3, [r3, #24]
 8005e34:	687a      	ldr	r2, [r7, #4]
 8005e36:	7c12      	ldrb	r2, [r2, #16]
 8005e38:	f107 0108 	add.w	r1, r7, #8
 8005e3c:	4610      	mov	r0, r2
 8005e3e:	4798      	blx	r3
 8005e40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005e42:	e00f      	b.n	8005e64 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005e44:	6839      	ldr	r1, [r7, #0]
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f000 fa49 	bl	80062de <USBD_CtlError>
            err++;
 8005e4c:	7afb      	ldrb	r3, [r7, #11]
 8005e4e:	3301      	adds	r3, #1
 8005e50:	72fb      	strb	r3, [r7, #11]
          break;
 8005e52:	e007      	b.n	8005e64 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8005e54:	6839      	ldr	r1, [r7, #0]
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f000 fa41 	bl	80062de <USBD_CtlError>
          err++;
 8005e5c:	7afb      	ldrb	r3, [r7, #11]
 8005e5e:	3301      	adds	r3, #1
 8005e60:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8005e62:	bf00      	nop
      }
      break;
 8005e64:	e037      	b.n	8005ed6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	7c1b      	ldrb	r3, [r3, #16]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d109      	bne.n	8005e82 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e76:	f107 0208 	add.w	r2, r7, #8
 8005e7a:	4610      	mov	r0, r2
 8005e7c:	4798      	blx	r3
 8005e7e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005e80:	e029      	b.n	8005ed6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005e82:	6839      	ldr	r1, [r7, #0]
 8005e84:	6878      	ldr	r0, [r7, #4]
 8005e86:	f000 fa2a 	bl	80062de <USBD_CtlError>
        err++;
 8005e8a:	7afb      	ldrb	r3, [r7, #11]
 8005e8c:	3301      	adds	r3, #1
 8005e8e:	72fb      	strb	r3, [r7, #11]
      break;
 8005e90:	e021      	b.n	8005ed6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	7c1b      	ldrb	r3, [r3, #16]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d10d      	bne.n	8005eb6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ea2:	f107 0208 	add.w	r2, r7, #8
 8005ea6:	4610      	mov	r0, r2
 8005ea8:	4798      	blx	r3
 8005eaa:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	3301      	adds	r3, #1
 8005eb0:	2207      	movs	r2, #7
 8005eb2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005eb4:	e00f      	b.n	8005ed6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005eb6:	6839      	ldr	r1, [r7, #0]
 8005eb8:	6878      	ldr	r0, [r7, #4]
 8005eba:	f000 fa10 	bl	80062de <USBD_CtlError>
        err++;
 8005ebe:	7afb      	ldrb	r3, [r7, #11]
 8005ec0:	3301      	adds	r3, #1
 8005ec2:	72fb      	strb	r3, [r7, #11]
      break;
 8005ec4:	e007      	b.n	8005ed6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8005ec6:	6839      	ldr	r1, [r7, #0]
 8005ec8:	6878      	ldr	r0, [r7, #4]
 8005eca:	f000 fa08 	bl	80062de <USBD_CtlError>
      err++;
 8005ece:	7afb      	ldrb	r3, [r7, #11]
 8005ed0:	3301      	adds	r3, #1
 8005ed2:	72fb      	strb	r3, [r7, #11]
      break;
 8005ed4:	bf00      	nop
  }

  if (err != 0U)
 8005ed6:	7afb      	ldrb	r3, [r7, #11]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d11e      	bne.n	8005f1a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	88db      	ldrh	r3, [r3, #6]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d016      	beq.n	8005f12 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8005ee4:	893b      	ldrh	r3, [r7, #8]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d00e      	beq.n	8005f08 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	88da      	ldrh	r2, [r3, #6]
 8005eee:	893b      	ldrh	r3, [r7, #8]
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	bf28      	it	cs
 8005ef4:	4613      	movcs	r3, r2
 8005ef6:	b29b      	uxth	r3, r3
 8005ef8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005efa:	893b      	ldrh	r3, [r7, #8]
 8005efc:	461a      	mov	r2, r3
 8005efe:	68f9      	ldr	r1, [r7, #12]
 8005f00:	6878      	ldr	r0, [r7, #4]
 8005f02:	f000 fa5d 	bl	80063c0 <USBD_CtlSendData>
 8005f06:	e009      	b.n	8005f1c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8005f08:	6839      	ldr	r1, [r7, #0]
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	f000 f9e7 	bl	80062de <USBD_CtlError>
 8005f10:	e004      	b.n	8005f1c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f000 faae 	bl	8006474 <USBD_CtlSendStatus>
 8005f18:	e000      	b.n	8005f1c <USBD_GetDescriptor+0x2cc>
    return;
 8005f1a:	bf00      	nop
  }
}
 8005f1c:	3710      	adds	r7, #16
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bd80      	pop	{r7, pc}
 8005f22:	bf00      	nop

08005f24 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b084      	sub	sp, #16
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
 8005f2c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	889b      	ldrh	r3, [r3, #4]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d131      	bne.n	8005f9a <USBD_SetAddress+0x76>
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	88db      	ldrh	r3, [r3, #6]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d12d      	bne.n	8005f9a <USBD_SetAddress+0x76>
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	885b      	ldrh	r3, [r3, #2]
 8005f42:	2b7f      	cmp	r3, #127	; 0x7f
 8005f44:	d829      	bhi.n	8005f9a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	885b      	ldrh	r3, [r3, #2]
 8005f4a:	b2db      	uxtb	r3, r3
 8005f4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f50:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f58:	b2db      	uxtb	r3, r3
 8005f5a:	2b03      	cmp	r3, #3
 8005f5c:	d104      	bne.n	8005f68 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8005f5e:	6839      	ldr	r1, [r7, #0]
 8005f60:	6878      	ldr	r0, [r7, #4]
 8005f62:	f000 f9bc 	bl	80062de <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f66:	e01d      	b.n	8005fa4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	7bfa      	ldrb	r2, [r7, #15]
 8005f6c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005f70:	7bfb      	ldrb	r3, [r7, #15]
 8005f72:	4619      	mov	r1, r3
 8005f74:	6878      	ldr	r0, [r7, #4]
 8005f76:	f000 feed 	bl	8006d54 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	f000 fa7a 	bl	8006474 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005f80:	7bfb      	ldrb	r3, [r7, #15]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d004      	beq.n	8005f90 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2202      	movs	r2, #2
 8005f8a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f8e:	e009      	b.n	8005fa4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2201      	movs	r2, #1
 8005f94:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f98:	e004      	b.n	8005fa4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005f9a:	6839      	ldr	r1, [r7, #0]
 8005f9c:	6878      	ldr	r0, [r7, #4]
 8005f9e:	f000 f99e 	bl	80062de <USBD_CtlError>
  }
}
 8005fa2:	bf00      	nop
 8005fa4:	bf00      	nop
 8005fa6:	3710      	adds	r7, #16
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	bd80      	pop	{r7, pc}

08005fac <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b084      	sub	sp, #16
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
 8005fb4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	885b      	ldrh	r3, [r3, #2]
 8005fbe:	b2da      	uxtb	r2, r3
 8005fc0:	4b4e      	ldr	r3, [pc, #312]	; (80060fc <USBD_SetConfig+0x150>)
 8005fc2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005fc4:	4b4d      	ldr	r3, [pc, #308]	; (80060fc <USBD_SetConfig+0x150>)
 8005fc6:	781b      	ldrb	r3, [r3, #0]
 8005fc8:	2b01      	cmp	r3, #1
 8005fca:	d905      	bls.n	8005fd8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8005fcc:	6839      	ldr	r1, [r7, #0]
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f000 f985 	bl	80062de <USBD_CtlError>
    return USBD_FAIL;
 8005fd4:	2303      	movs	r3, #3
 8005fd6:	e08c      	b.n	80060f2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fde:	b2db      	uxtb	r3, r3
 8005fe0:	2b02      	cmp	r3, #2
 8005fe2:	d002      	beq.n	8005fea <USBD_SetConfig+0x3e>
 8005fe4:	2b03      	cmp	r3, #3
 8005fe6:	d029      	beq.n	800603c <USBD_SetConfig+0x90>
 8005fe8:	e075      	b.n	80060d6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8005fea:	4b44      	ldr	r3, [pc, #272]	; (80060fc <USBD_SetConfig+0x150>)
 8005fec:	781b      	ldrb	r3, [r3, #0]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d020      	beq.n	8006034 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8005ff2:	4b42      	ldr	r3, [pc, #264]	; (80060fc <USBD_SetConfig+0x150>)
 8005ff4:	781b      	ldrb	r3, [r3, #0]
 8005ff6:	461a      	mov	r2, r3
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005ffc:	4b3f      	ldr	r3, [pc, #252]	; (80060fc <USBD_SetConfig+0x150>)
 8005ffe:	781b      	ldrb	r3, [r3, #0]
 8006000:	4619      	mov	r1, r3
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f7fe ffe7 	bl	8004fd6 <USBD_SetClassConfig>
 8006008:	4603      	mov	r3, r0
 800600a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800600c:	7bfb      	ldrb	r3, [r7, #15]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d008      	beq.n	8006024 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006012:	6839      	ldr	r1, [r7, #0]
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	f000 f962 	bl	80062de <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2202      	movs	r2, #2
 800601e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006022:	e065      	b.n	80060f0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	f000 fa25 	bl	8006474 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2203      	movs	r2, #3
 800602e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006032:	e05d      	b.n	80060f0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006034:	6878      	ldr	r0, [r7, #4]
 8006036:	f000 fa1d 	bl	8006474 <USBD_CtlSendStatus>
      break;
 800603a:	e059      	b.n	80060f0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800603c:	4b2f      	ldr	r3, [pc, #188]	; (80060fc <USBD_SetConfig+0x150>)
 800603e:	781b      	ldrb	r3, [r3, #0]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d112      	bne.n	800606a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2202      	movs	r2, #2
 8006048:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800604c:	4b2b      	ldr	r3, [pc, #172]	; (80060fc <USBD_SetConfig+0x150>)
 800604e:	781b      	ldrb	r3, [r3, #0]
 8006050:	461a      	mov	r2, r3
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006056:	4b29      	ldr	r3, [pc, #164]	; (80060fc <USBD_SetConfig+0x150>)
 8006058:	781b      	ldrb	r3, [r3, #0]
 800605a:	4619      	mov	r1, r3
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	f7fe ffd6 	bl	800500e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	f000 fa06 	bl	8006474 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006068:	e042      	b.n	80060f0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800606a:	4b24      	ldr	r3, [pc, #144]	; (80060fc <USBD_SetConfig+0x150>)
 800606c:	781b      	ldrb	r3, [r3, #0]
 800606e:	461a      	mov	r2, r3
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	685b      	ldr	r3, [r3, #4]
 8006074:	429a      	cmp	r2, r3
 8006076:	d02a      	beq.n	80060ce <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	b2db      	uxtb	r3, r3
 800607e:	4619      	mov	r1, r3
 8006080:	6878      	ldr	r0, [r7, #4]
 8006082:	f7fe ffc4 	bl	800500e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006086:	4b1d      	ldr	r3, [pc, #116]	; (80060fc <USBD_SetConfig+0x150>)
 8006088:	781b      	ldrb	r3, [r3, #0]
 800608a:	461a      	mov	r2, r3
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006090:	4b1a      	ldr	r3, [pc, #104]	; (80060fc <USBD_SetConfig+0x150>)
 8006092:	781b      	ldrb	r3, [r3, #0]
 8006094:	4619      	mov	r1, r3
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	f7fe ff9d 	bl	8004fd6 <USBD_SetClassConfig>
 800609c:	4603      	mov	r3, r0
 800609e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80060a0:	7bfb      	ldrb	r3, [r7, #15]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d00f      	beq.n	80060c6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80060a6:	6839      	ldr	r1, [r7, #0]
 80060a8:	6878      	ldr	r0, [r7, #4]
 80060aa:	f000 f918 	bl	80062de <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	685b      	ldr	r3, [r3, #4]
 80060b2:	b2db      	uxtb	r3, r3
 80060b4:	4619      	mov	r1, r3
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f7fe ffa9 	bl	800500e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2202      	movs	r2, #2
 80060c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80060c4:	e014      	b.n	80060f0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f000 f9d4 	bl	8006474 <USBD_CtlSendStatus>
      break;
 80060cc:	e010      	b.n	80060f0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	f000 f9d0 	bl	8006474 <USBD_CtlSendStatus>
      break;
 80060d4:	e00c      	b.n	80060f0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80060d6:	6839      	ldr	r1, [r7, #0]
 80060d8:	6878      	ldr	r0, [r7, #4]
 80060da:	f000 f900 	bl	80062de <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80060de:	4b07      	ldr	r3, [pc, #28]	; (80060fc <USBD_SetConfig+0x150>)
 80060e0:	781b      	ldrb	r3, [r3, #0]
 80060e2:	4619      	mov	r1, r3
 80060e4:	6878      	ldr	r0, [r7, #4]
 80060e6:	f7fe ff92 	bl	800500e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80060ea:	2303      	movs	r3, #3
 80060ec:	73fb      	strb	r3, [r7, #15]
      break;
 80060ee:	bf00      	nop
  }

  return ret;
 80060f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80060f2:	4618      	mov	r0, r3
 80060f4:	3710      	adds	r7, #16
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}
 80060fa:	bf00      	nop
 80060fc:	20000134 	.word	0x20000134

08006100 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b082      	sub	sp, #8
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
 8006108:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	88db      	ldrh	r3, [r3, #6]
 800610e:	2b01      	cmp	r3, #1
 8006110:	d004      	beq.n	800611c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006112:	6839      	ldr	r1, [r7, #0]
 8006114:	6878      	ldr	r0, [r7, #4]
 8006116:	f000 f8e2 	bl	80062de <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800611a:	e023      	b.n	8006164 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006122:	b2db      	uxtb	r3, r3
 8006124:	2b02      	cmp	r3, #2
 8006126:	dc02      	bgt.n	800612e <USBD_GetConfig+0x2e>
 8006128:	2b00      	cmp	r3, #0
 800612a:	dc03      	bgt.n	8006134 <USBD_GetConfig+0x34>
 800612c:	e015      	b.n	800615a <USBD_GetConfig+0x5a>
 800612e:	2b03      	cmp	r3, #3
 8006130:	d00b      	beq.n	800614a <USBD_GetConfig+0x4a>
 8006132:	e012      	b.n	800615a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2200      	movs	r2, #0
 8006138:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	3308      	adds	r3, #8
 800613e:	2201      	movs	r2, #1
 8006140:	4619      	mov	r1, r3
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	f000 f93c 	bl	80063c0 <USBD_CtlSendData>
        break;
 8006148:	e00c      	b.n	8006164 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	3304      	adds	r3, #4
 800614e:	2201      	movs	r2, #1
 8006150:	4619      	mov	r1, r3
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	f000 f934 	bl	80063c0 <USBD_CtlSendData>
        break;
 8006158:	e004      	b.n	8006164 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800615a:	6839      	ldr	r1, [r7, #0]
 800615c:	6878      	ldr	r0, [r7, #4]
 800615e:	f000 f8be 	bl	80062de <USBD_CtlError>
        break;
 8006162:	bf00      	nop
}
 8006164:	bf00      	nop
 8006166:	3708      	adds	r7, #8
 8006168:	46bd      	mov	sp, r7
 800616a:	bd80      	pop	{r7, pc}

0800616c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b082      	sub	sp, #8
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
 8006174:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800617c:	b2db      	uxtb	r3, r3
 800617e:	3b01      	subs	r3, #1
 8006180:	2b02      	cmp	r3, #2
 8006182:	d81e      	bhi.n	80061c2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	88db      	ldrh	r3, [r3, #6]
 8006188:	2b02      	cmp	r3, #2
 800618a:	d004      	beq.n	8006196 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800618c:	6839      	ldr	r1, [r7, #0]
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	f000 f8a5 	bl	80062de <USBD_CtlError>
        break;
 8006194:	e01a      	b.n	80061cc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2201      	movs	r2, #1
 800619a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d005      	beq.n	80061b2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	68db      	ldr	r3, [r3, #12]
 80061aa:	f043 0202 	orr.w	r2, r3, #2
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	330c      	adds	r3, #12
 80061b6:	2202      	movs	r2, #2
 80061b8:	4619      	mov	r1, r3
 80061ba:	6878      	ldr	r0, [r7, #4]
 80061bc:	f000 f900 	bl	80063c0 <USBD_CtlSendData>
      break;
 80061c0:	e004      	b.n	80061cc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80061c2:	6839      	ldr	r1, [r7, #0]
 80061c4:	6878      	ldr	r0, [r7, #4]
 80061c6:	f000 f88a 	bl	80062de <USBD_CtlError>
      break;
 80061ca:	bf00      	nop
  }
}
 80061cc:	bf00      	nop
 80061ce:	3708      	adds	r7, #8
 80061d0:	46bd      	mov	sp, r7
 80061d2:	bd80      	pop	{r7, pc}

080061d4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b082      	sub	sp, #8
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
 80061dc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	885b      	ldrh	r3, [r3, #2]
 80061e2:	2b01      	cmp	r3, #1
 80061e4:	d107      	bne.n	80061f6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2201      	movs	r2, #1
 80061ea:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f000 f940 	bl	8006474 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80061f4:	e013      	b.n	800621e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	885b      	ldrh	r3, [r3, #2]
 80061fa:	2b02      	cmp	r3, #2
 80061fc:	d10b      	bne.n	8006216 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	889b      	ldrh	r3, [r3, #4]
 8006202:	0a1b      	lsrs	r3, r3, #8
 8006204:	b29b      	uxth	r3, r3
 8006206:	b2da      	uxtb	r2, r3
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f000 f930 	bl	8006474 <USBD_CtlSendStatus>
}
 8006214:	e003      	b.n	800621e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006216:	6839      	ldr	r1, [r7, #0]
 8006218:	6878      	ldr	r0, [r7, #4]
 800621a:	f000 f860 	bl	80062de <USBD_CtlError>
}
 800621e:	bf00      	nop
 8006220:	3708      	adds	r7, #8
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}

08006226 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006226:	b580      	push	{r7, lr}
 8006228:	b082      	sub	sp, #8
 800622a:	af00      	add	r7, sp, #0
 800622c:	6078      	str	r0, [r7, #4]
 800622e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006236:	b2db      	uxtb	r3, r3
 8006238:	3b01      	subs	r3, #1
 800623a:	2b02      	cmp	r3, #2
 800623c:	d80b      	bhi.n	8006256 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	885b      	ldrh	r3, [r3, #2]
 8006242:	2b01      	cmp	r3, #1
 8006244:	d10c      	bne.n	8006260 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2200      	movs	r2, #0
 800624a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f000 f910 	bl	8006474 <USBD_CtlSendStatus>
      }
      break;
 8006254:	e004      	b.n	8006260 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006256:	6839      	ldr	r1, [r7, #0]
 8006258:	6878      	ldr	r0, [r7, #4]
 800625a:	f000 f840 	bl	80062de <USBD_CtlError>
      break;
 800625e:	e000      	b.n	8006262 <USBD_ClrFeature+0x3c>
      break;
 8006260:	bf00      	nop
  }
}
 8006262:	bf00      	nop
 8006264:	3708      	adds	r7, #8
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}

0800626a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800626a:	b580      	push	{r7, lr}
 800626c:	b084      	sub	sp, #16
 800626e:	af00      	add	r7, sp, #0
 8006270:	6078      	str	r0, [r7, #4]
 8006272:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	781a      	ldrb	r2, [r3, #0]
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	3301      	adds	r3, #1
 8006284:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	781a      	ldrb	r2, [r3, #0]
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	3301      	adds	r3, #1
 8006292:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006294:	68f8      	ldr	r0, [r7, #12]
 8006296:	f7ff fa41 	bl	800571c <SWAPBYTE>
 800629a:	4603      	mov	r3, r0
 800629c:	461a      	mov	r2, r3
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	3301      	adds	r3, #1
 80062a6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	3301      	adds	r3, #1
 80062ac:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80062ae:	68f8      	ldr	r0, [r7, #12]
 80062b0:	f7ff fa34 	bl	800571c <SWAPBYTE>
 80062b4:	4603      	mov	r3, r0
 80062b6:	461a      	mov	r2, r3
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	3301      	adds	r3, #1
 80062c0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	3301      	adds	r3, #1
 80062c6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80062c8:	68f8      	ldr	r0, [r7, #12]
 80062ca:	f7ff fa27 	bl	800571c <SWAPBYTE>
 80062ce:	4603      	mov	r3, r0
 80062d0:	461a      	mov	r2, r3
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	80da      	strh	r2, [r3, #6]
}
 80062d6:	bf00      	nop
 80062d8:	3710      	adds	r7, #16
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}

080062de <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80062de:	b580      	push	{r7, lr}
 80062e0:	b082      	sub	sp, #8
 80062e2:	af00      	add	r7, sp, #0
 80062e4:	6078      	str	r0, [r7, #4]
 80062e6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80062e8:	2180      	movs	r1, #128	; 0x80
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	f000 fcc8 	bl	8006c80 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80062f0:	2100      	movs	r1, #0
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	f000 fcc4 	bl	8006c80 <USBD_LL_StallEP>
}
 80062f8:	bf00      	nop
 80062fa:	3708      	adds	r7, #8
 80062fc:	46bd      	mov	sp, r7
 80062fe:	bd80      	pop	{r7, pc}

08006300 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b086      	sub	sp, #24
 8006304:	af00      	add	r7, sp, #0
 8006306:	60f8      	str	r0, [r7, #12]
 8006308:	60b9      	str	r1, [r7, #8]
 800630a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800630c:	2300      	movs	r3, #0
 800630e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d036      	beq.n	8006384 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800631a:	6938      	ldr	r0, [r7, #16]
 800631c:	f000 f836 	bl	800638c <USBD_GetLen>
 8006320:	4603      	mov	r3, r0
 8006322:	3301      	adds	r3, #1
 8006324:	b29b      	uxth	r3, r3
 8006326:	005b      	lsls	r3, r3, #1
 8006328:	b29a      	uxth	r2, r3
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800632e:	7dfb      	ldrb	r3, [r7, #23]
 8006330:	68ba      	ldr	r2, [r7, #8]
 8006332:	4413      	add	r3, r2
 8006334:	687a      	ldr	r2, [r7, #4]
 8006336:	7812      	ldrb	r2, [r2, #0]
 8006338:	701a      	strb	r2, [r3, #0]
  idx++;
 800633a:	7dfb      	ldrb	r3, [r7, #23]
 800633c:	3301      	adds	r3, #1
 800633e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006340:	7dfb      	ldrb	r3, [r7, #23]
 8006342:	68ba      	ldr	r2, [r7, #8]
 8006344:	4413      	add	r3, r2
 8006346:	2203      	movs	r2, #3
 8006348:	701a      	strb	r2, [r3, #0]
  idx++;
 800634a:	7dfb      	ldrb	r3, [r7, #23]
 800634c:	3301      	adds	r3, #1
 800634e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006350:	e013      	b.n	800637a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006352:	7dfb      	ldrb	r3, [r7, #23]
 8006354:	68ba      	ldr	r2, [r7, #8]
 8006356:	4413      	add	r3, r2
 8006358:	693a      	ldr	r2, [r7, #16]
 800635a:	7812      	ldrb	r2, [r2, #0]
 800635c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800635e:	693b      	ldr	r3, [r7, #16]
 8006360:	3301      	adds	r3, #1
 8006362:	613b      	str	r3, [r7, #16]
    idx++;
 8006364:	7dfb      	ldrb	r3, [r7, #23]
 8006366:	3301      	adds	r3, #1
 8006368:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800636a:	7dfb      	ldrb	r3, [r7, #23]
 800636c:	68ba      	ldr	r2, [r7, #8]
 800636e:	4413      	add	r3, r2
 8006370:	2200      	movs	r2, #0
 8006372:	701a      	strb	r2, [r3, #0]
    idx++;
 8006374:	7dfb      	ldrb	r3, [r7, #23]
 8006376:	3301      	adds	r3, #1
 8006378:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800637a:	693b      	ldr	r3, [r7, #16]
 800637c:	781b      	ldrb	r3, [r3, #0]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d1e7      	bne.n	8006352 <USBD_GetString+0x52>
 8006382:	e000      	b.n	8006386 <USBD_GetString+0x86>
    return;
 8006384:	bf00      	nop
  }
}
 8006386:	3718      	adds	r7, #24
 8006388:	46bd      	mov	sp, r7
 800638a:	bd80      	pop	{r7, pc}

0800638c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800638c:	b480      	push	{r7}
 800638e:	b085      	sub	sp, #20
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006394:	2300      	movs	r3, #0
 8006396:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800639c:	e005      	b.n	80063aa <USBD_GetLen+0x1e>
  {
    len++;
 800639e:	7bfb      	ldrb	r3, [r7, #15]
 80063a0:	3301      	adds	r3, #1
 80063a2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	3301      	adds	r3, #1
 80063a8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	781b      	ldrb	r3, [r3, #0]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d1f5      	bne.n	800639e <USBD_GetLen+0x12>
  }

  return len;
 80063b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80063b4:	4618      	mov	r0, r3
 80063b6:	3714      	adds	r7, #20
 80063b8:	46bd      	mov	sp, r7
 80063ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063be:	4770      	bx	lr

080063c0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b084      	sub	sp, #16
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	60f8      	str	r0, [r7, #12]
 80063c8:	60b9      	str	r1, [r7, #8]
 80063ca:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	2202      	movs	r2, #2
 80063d0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	687a      	ldr	r2, [r7, #4]
 80063d8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	687a      	ldr	r2, [r7, #4]
 80063de:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	68ba      	ldr	r2, [r7, #8]
 80063e4:	2100      	movs	r1, #0
 80063e6:	68f8      	ldr	r0, [r7, #12]
 80063e8:	f000 fcd3 	bl	8006d92 <USBD_LL_Transmit>

  return USBD_OK;
 80063ec:	2300      	movs	r3, #0
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	3710      	adds	r7, #16
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}

080063f6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80063f6:	b580      	push	{r7, lr}
 80063f8:	b084      	sub	sp, #16
 80063fa:	af00      	add	r7, sp, #0
 80063fc:	60f8      	str	r0, [r7, #12]
 80063fe:	60b9      	str	r1, [r7, #8]
 8006400:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	68ba      	ldr	r2, [r7, #8]
 8006406:	2100      	movs	r1, #0
 8006408:	68f8      	ldr	r0, [r7, #12]
 800640a:	f000 fcc2 	bl	8006d92 <USBD_LL_Transmit>

  return USBD_OK;
 800640e:	2300      	movs	r3, #0
}
 8006410:	4618      	mov	r0, r3
 8006412:	3710      	adds	r7, #16
 8006414:	46bd      	mov	sp, r7
 8006416:	bd80      	pop	{r7, pc}

08006418 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b084      	sub	sp, #16
 800641c:	af00      	add	r7, sp, #0
 800641e:	60f8      	str	r0, [r7, #12]
 8006420:	60b9      	str	r1, [r7, #8]
 8006422:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	2203      	movs	r2, #3
 8006428:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	687a      	ldr	r2, [r7, #4]
 8006430:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	687a      	ldr	r2, [r7, #4]
 8006438:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	68ba      	ldr	r2, [r7, #8]
 8006440:	2100      	movs	r1, #0
 8006442:	68f8      	ldr	r0, [r7, #12]
 8006444:	f000 fcc6 	bl	8006dd4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006448:	2300      	movs	r3, #0
}
 800644a:	4618      	mov	r0, r3
 800644c:	3710      	adds	r7, #16
 800644e:	46bd      	mov	sp, r7
 8006450:	bd80      	pop	{r7, pc}

08006452 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006452:	b580      	push	{r7, lr}
 8006454:	b084      	sub	sp, #16
 8006456:	af00      	add	r7, sp, #0
 8006458:	60f8      	str	r0, [r7, #12]
 800645a:	60b9      	str	r1, [r7, #8]
 800645c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	68ba      	ldr	r2, [r7, #8]
 8006462:	2100      	movs	r1, #0
 8006464:	68f8      	ldr	r0, [r7, #12]
 8006466:	f000 fcb5 	bl	8006dd4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800646a:	2300      	movs	r3, #0
}
 800646c:	4618      	mov	r0, r3
 800646e:	3710      	adds	r7, #16
 8006470:	46bd      	mov	sp, r7
 8006472:	bd80      	pop	{r7, pc}

08006474 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b082      	sub	sp, #8
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2204      	movs	r2, #4
 8006480:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006484:	2300      	movs	r3, #0
 8006486:	2200      	movs	r2, #0
 8006488:	2100      	movs	r1, #0
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f000 fc81 	bl	8006d92 <USBD_LL_Transmit>

  return USBD_OK;
 8006490:	2300      	movs	r3, #0
}
 8006492:	4618      	mov	r0, r3
 8006494:	3708      	adds	r7, #8
 8006496:	46bd      	mov	sp, r7
 8006498:	bd80      	pop	{r7, pc}

0800649a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800649a:	b580      	push	{r7, lr}
 800649c:	b082      	sub	sp, #8
 800649e:	af00      	add	r7, sp, #0
 80064a0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2205      	movs	r2, #5
 80064a6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80064aa:	2300      	movs	r3, #0
 80064ac:	2200      	movs	r2, #0
 80064ae:	2100      	movs	r1, #0
 80064b0:	6878      	ldr	r0, [r7, #4]
 80064b2:	f000 fc8f 	bl	8006dd4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80064b6:	2300      	movs	r3, #0
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	3708      	adds	r7, #8
 80064bc:	46bd      	mov	sp, r7
 80064be:	bd80      	pop	{r7, pc}

080064c0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80064c4:	2200      	movs	r2, #0
 80064c6:	4912      	ldr	r1, [pc, #72]	; (8006510 <MX_USB_DEVICE_Init+0x50>)
 80064c8:	4812      	ldr	r0, [pc, #72]	; (8006514 <MX_USB_DEVICE_Init+0x54>)
 80064ca:	f7fe fd07 	bl	8004edc <USBD_Init>
 80064ce:	4603      	mov	r3, r0
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d001      	beq.n	80064d8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80064d4:	f7fa f924 	bl	8000720 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80064d8:	490f      	ldr	r1, [pc, #60]	; (8006518 <MX_USB_DEVICE_Init+0x58>)
 80064da:	480e      	ldr	r0, [pc, #56]	; (8006514 <MX_USB_DEVICE_Init+0x54>)
 80064dc:	f7fe fd2e 	bl	8004f3c <USBD_RegisterClass>
 80064e0:	4603      	mov	r3, r0
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d001      	beq.n	80064ea <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80064e6:	f7fa f91b 	bl	8000720 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80064ea:	490c      	ldr	r1, [pc, #48]	; (800651c <MX_USB_DEVICE_Init+0x5c>)
 80064ec:	4809      	ldr	r0, [pc, #36]	; (8006514 <MX_USB_DEVICE_Init+0x54>)
 80064ee:	f7fe fc65 	bl	8004dbc <USBD_CDC_RegisterInterface>
 80064f2:	4603      	mov	r3, r0
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d001      	beq.n	80064fc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80064f8:	f7fa f912 	bl	8000720 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80064fc:	4805      	ldr	r0, [pc, #20]	; (8006514 <MX_USB_DEVICE_Init+0x54>)
 80064fe:	f7fe fd53 	bl	8004fa8 <USBD_Start>
 8006502:	4603      	mov	r3, r0
 8006504:	2b00      	cmp	r3, #0
 8006506:	d001      	beq.n	800650c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006508:	f7fa f90a 	bl	8000720 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800650c:	bf00      	nop
 800650e:	bd80      	pop	{r7, pc}
 8006510:	200000ac 	.word	0x200000ac
 8006514:	20000138 	.word	0x20000138
 8006518:	20000018 	.word	0x20000018
 800651c:	20000098 	.word	0x20000098

08006520 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006524:	2200      	movs	r2, #0
 8006526:	4905      	ldr	r1, [pc, #20]	; (800653c <CDC_Init_FS+0x1c>)
 8006528:	4805      	ldr	r0, [pc, #20]	; (8006540 <CDC_Init_FS+0x20>)
 800652a:	f7fe fc61 	bl	8004df0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800652e:	4905      	ldr	r1, [pc, #20]	; (8006544 <CDC_Init_FS+0x24>)
 8006530:	4803      	ldr	r0, [pc, #12]	; (8006540 <CDC_Init_FS+0x20>)
 8006532:	f7fe fc7f 	bl	8004e34 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006536:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006538:	4618      	mov	r0, r3
 800653a:	bd80      	pop	{r7, pc}
 800653c:	20000c14 	.word	0x20000c14
 8006540:	20000138 	.word	0x20000138
 8006544:	20000414 	.word	0x20000414

08006548 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006548:	b480      	push	{r7}
 800654a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800654c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800654e:	4618      	mov	r0, r3
 8006550:	46bd      	mov	sp, r7
 8006552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006556:	4770      	bx	lr

08006558 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006558:	b480      	push	{r7}
 800655a:	b083      	sub	sp, #12
 800655c:	af00      	add	r7, sp, #0
 800655e:	4603      	mov	r3, r0
 8006560:	6039      	str	r1, [r7, #0]
 8006562:	71fb      	strb	r3, [r7, #7]
 8006564:	4613      	mov	r3, r2
 8006566:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006568:	79fb      	ldrb	r3, [r7, #7]
 800656a:	2b23      	cmp	r3, #35	; 0x23
 800656c:	d84a      	bhi.n	8006604 <CDC_Control_FS+0xac>
 800656e:	a201      	add	r2, pc, #4	; (adr r2, 8006574 <CDC_Control_FS+0x1c>)
 8006570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006574:	08006605 	.word	0x08006605
 8006578:	08006605 	.word	0x08006605
 800657c:	08006605 	.word	0x08006605
 8006580:	08006605 	.word	0x08006605
 8006584:	08006605 	.word	0x08006605
 8006588:	08006605 	.word	0x08006605
 800658c:	08006605 	.word	0x08006605
 8006590:	08006605 	.word	0x08006605
 8006594:	08006605 	.word	0x08006605
 8006598:	08006605 	.word	0x08006605
 800659c:	08006605 	.word	0x08006605
 80065a0:	08006605 	.word	0x08006605
 80065a4:	08006605 	.word	0x08006605
 80065a8:	08006605 	.word	0x08006605
 80065ac:	08006605 	.word	0x08006605
 80065b0:	08006605 	.word	0x08006605
 80065b4:	08006605 	.word	0x08006605
 80065b8:	08006605 	.word	0x08006605
 80065bc:	08006605 	.word	0x08006605
 80065c0:	08006605 	.word	0x08006605
 80065c4:	08006605 	.word	0x08006605
 80065c8:	08006605 	.word	0x08006605
 80065cc:	08006605 	.word	0x08006605
 80065d0:	08006605 	.word	0x08006605
 80065d4:	08006605 	.word	0x08006605
 80065d8:	08006605 	.word	0x08006605
 80065dc:	08006605 	.word	0x08006605
 80065e0:	08006605 	.word	0x08006605
 80065e4:	08006605 	.word	0x08006605
 80065e8:	08006605 	.word	0x08006605
 80065ec:	08006605 	.word	0x08006605
 80065f0:	08006605 	.word	0x08006605
 80065f4:	08006605 	.word	0x08006605
 80065f8:	08006605 	.word	0x08006605
 80065fc:	08006605 	.word	0x08006605
 8006600:	08006605 	.word	0x08006605
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006604:	bf00      	nop
  }

  return (USBD_OK);
 8006606:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006608:	4618      	mov	r0, r3
 800660a:	370c      	adds	r7, #12
 800660c:	46bd      	mov	sp, r7
 800660e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006612:	4770      	bx	lr

08006614 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006614:	b5b0      	push	{r4, r5, r7, lr}
 8006616:	b082      	sub	sp, #8
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
 800661c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800661e:	6879      	ldr	r1, [r7, #4]
 8006620:	480b      	ldr	r0, [pc, #44]	; (8006650 <CDC_Receive_FS+0x3c>)
 8006622:	f7fe fc07 	bl	8004e34 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006626:	480a      	ldr	r0, [pc, #40]	; (8006650 <CDC_Receive_FS+0x3c>)
 8006628:	f7fe fc22 	bl	8004e70 <USBD_CDC_ReceivePacket>
  memcpy (receivebuffer, Buf, 20);
 800662c:	4b09      	ldr	r3, [pc, #36]	; (8006654 <CDC_Receive_FS+0x40>)
 800662e:	687a      	ldr	r2, [r7, #4]
 8006630:	6811      	ldr	r1, [r2, #0]
 8006632:	6855      	ldr	r5, [r2, #4]
 8006634:	6894      	ldr	r4, [r2, #8]
 8006636:	68d0      	ldr	r0, [r2, #12]
 8006638:	6019      	str	r1, [r3, #0]
 800663a:	605d      	str	r5, [r3, #4]
 800663c:	609c      	str	r4, [r3, #8]
 800663e:	60d8      	str	r0, [r3, #12]
 8006640:	6911      	ldr	r1, [r2, #16]
 8006642:	6119      	str	r1, [r3, #16]
  return (USBD_OK);
 8006644:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006646:	4618      	mov	r0, r3
 8006648:	3708      	adds	r7, #8
 800664a:	46bd      	mov	sp, r7
 800664c:	bdb0      	pop	{r4, r5, r7, pc}
 800664e:	bf00      	nop
 8006650:	20000138 	.word	0x20000138
 8006654:	2000011c 	.word	0x2000011c

08006658 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8006658:	b480      	push	{r7}
 800665a:	b087      	sub	sp, #28
 800665c:	af00      	add	r7, sp, #0
 800665e:	60f8      	str	r0, [r7, #12]
 8006660:	60b9      	str	r1, [r7, #8]
 8006662:	4613      	mov	r3, r2
 8006664:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8006666:	2300      	movs	r3, #0
 8006668:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800666a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800666e:	4618      	mov	r0, r3
 8006670:	371c      	adds	r7, #28
 8006672:	46bd      	mov	sp, r7
 8006674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006678:	4770      	bx	lr
	...

0800667c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800667c:	b480      	push	{r7}
 800667e:	b083      	sub	sp, #12
 8006680:	af00      	add	r7, sp, #0
 8006682:	4603      	mov	r3, r0
 8006684:	6039      	str	r1, [r7, #0]
 8006686:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	2212      	movs	r2, #18
 800668c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800668e:	4b03      	ldr	r3, [pc, #12]	; (800669c <USBD_FS_DeviceDescriptor+0x20>)
}
 8006690:	4618      	mov	r0, r3
 8006692:	370c      	adds	r7, #12
 8006694:	46bd      	mov	sp, r7
 8006696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669a:	4770      	bx	lr
 800669c:	200000c8 	.word	0x200000c8

080066a0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80066a0:	b480      	push	{r7}
 80066a2:	b083      	sub	sp, #12
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	4603      	mov	r3, r0
 80066a8:	6039      	str	r1, [r7, #0]
 80066aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	2204      	movs	r2, #4
 80066b0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80066b2:	4b03      	ldr	r3, [pc, #12]	; (80066c0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80066b4:	4618      	mov	r0, r3
 80066b6:	370c      	adds	r7, #12
 80066b8:	46bd      	mov	sp, r7
 80066ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066be:	4770      	bx	lr
 80066c0:	200000dc 	.word	0x200000dc

080066c4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b082      	sub	sp, #8
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	4603      	mov	r3, r0
 80066cc:	6039      	str	r1, [r7, #0]
 80066ce:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80066d0:	79fb      	ldrb	r3, [r7, #7]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d105      	bne.n	80066e2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80066d6:	683a      	ldr	r2, [r7, #0]
 80066d8:	4907      	ldr	r1, [pc, #28]	; (80066f8 <USBD_FS_ProductStrDescriptor+0x34>)
 80066da:	4808      	ldr	r0, [pc, #32]	; (80066fc <USBD_FS_ProductStrDescriptor+0x38>)
 80066dc:	f7ff fe10 	bl	8006300 <USBD_GetString>
 80066e0:	e004      	b.n	80066ec <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80066e2:	683a      	ldr	r2, [r7, #0]
 80066e4:	4904      	ldr	r1, [pc, #16]	; (80066f8 <USBD_FS_ProductStrDescriptor+0x34>)
 80066e6:	4805      	ldr	r0, [pc, #20]	; (80066fc <USBD_FS_ProductStrDescriptor+0x38>)
 80066e8:	f7ff fe0a 	bl	8006300 <USBD_GetString>
  }
  return USBD_StrDesc;
 80066ec:	4b02      	ldr	r3, [pc, #8]	; (80066f8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80066ee:	4618      	mov	r0, r3
 80066f0:	3708      	adds	r7, #8
 80066f2:	46bd      	mov	sp, r7
 80066f4:	bd80      	pop	{r7, pc}
 80066f6:	bf00      	nop
 80066f8:	20001414 	.word	0x20001414
 80066fc:	08006f34 	.word	0x08006f34

08006700 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b082      	sub	sp, #8
 8006704:	af00      	add	r7, sp, #0
 8006706:	4603      	mov	r3, r0
 8006708:	6039      	str	r1, [r7, #0]
 800670a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800670c:	683a      	ldr	r2, [r7, #0]
 800670e:	4904      	ldr	r1, [pc, #16]	; (8006720 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006710:	4804      	ldr	r0, [pc, #16]	; (8006724 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006712:	f7ff fdf5 	bl	8006300 <USBD_GetString>
  return USBD_StrDesc;
 8006716:	4b02      	ldr	r3, [pc, #8]	; (8006720 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006718:	4618      	mov	r0, r3
 800671a:	3708      	adds	r7, #8
 800671c:	46bd      	mov	sp, r7
 800671e:	bd80      	pop	{r7, pc}
 8006720:	20001414 	.word	0x20001414
 8006724:	08006f4c 	.word	0x08006f4c

08006728 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b082      	sub	sp, #8
 800672c:	af00      	add	r7, sp, #0
 800672e:	4603      	mov	r3, r0
 8006730:	6039      	str	r1, [r7, #0]
 8006732:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	221a      	movs	r2, #26
 8006738:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800673a:	f000 f843 	bl	80067c4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800673e:	4b02      	ldr	r3, [pc, #8]	; (8006748 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006740:	4618      	mov	r0, r3
 8006742:	3708      	adds	r7, #8
 8006744:	46bd      	mov	sp, r7
 8006746:	bd80      	pop	{r7, pc}
 8006748:	200000e0 	.word	0x200000e0

0800674c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b082      	sub	sp, #8
 8006750:	af00      	add	r7, sp, #0
 8006752:	4603      	mov	r3, r0
 8006754:	6039      	str	r1, [r7, #0]
 8006756:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006758:	79fb      	ldrb	r3, [r7, #7]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d105      	bne.n	800676a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800675e:	683a      	ldr	r2, [r7, #0]
 8006760:	4907      	ldr	r1, [pc, #28]	; (8006780 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006762:	4808      	ldr	r0, [pc, #32]	; (8006784 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006764:	f7ff fdcc 	bl	8006300 <USBD_GetString>
 8006768:	e004      	b.n	8006774 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800676a:	683a      	ldr	r2, [r7, #0]
 800676c:	4904      	ldr	r1, [pc, #16]	; (8006780 <USBD_FS_ConfigStrDescriptor+0x34>)
 800676e:	4805      	ldr	r0, [pc, #20]	; (8006784 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006770:	f7ff fdc6 	bl	8006300 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006774:	4b02      	ldr	r3, [pc, #8]	; (8006780 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006776:	4618      	mov	r0, r3
 8006778:	3708      	adds	r7, #8
 800677a:	46bd      	mov	sp, r7
 800677c:	bd80      	pop	{r7, pc}
 800677e:	bf00      	nop
 8006780:	20001414 	.word	0x20001414
 8006784:	08006f60 	.word	0x08006f60

08006788 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b082      	sub	sp, #8
 800678c:	af00      	add	r7, sp, #0
 800678e:	4603      	mov	r3, r0
 8006790:	6039      	str	r1, [r7, #0]
 8006792:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006794:	79fb      	ldrb	r3, [r7, #7]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d105      	bne.n	80067a6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800679a:	683a      	ldr	r2, [r7, #0]
 800679c:	4907      	ldr	r1, [pc, #28]	; (80067bc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800679e:	4808      	ldr	r0, [pc, #32]	; (80067c0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80067a0:	f7ff fdae 	bl	8006300 <USBD_GetString>
 80067a4:	e004      	b.n	80067b0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80067a6:	683a      	ldr	r2, [r7, #0]
 80067a8:	4904      	ldr	r1, [pc, #16]	; (80067bc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80067aa:	4805      	ldr	r0, [pc, #20]	; (80067c0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80067ac:	f7ff fda8 	bl	8006300 <USBD_GetString>
  }
  return USBD_StrDesc;
 80067b0:	4b02      	ldr	r3, [pc, #8]	; (80067bc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80067b2:	4618      	mov	r0, r3
 80067b4:	3708      	adds	r7, #8
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bd80      	pop	{r7, pc}
 80067ba:	bf00      	nop
 80067bc:	20001414 	.word	0x20001414
 80067c0:	08006f6c 	.word	0x08006f6c

080067c4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b084      	sub	sp, #16
 80067c8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80067ca:	4b0f      	ldr	r3, [pc, #60]	; (8006808 <Get_SerialNum+0x44>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80067d0:	4b0e      	ldr	r3, [pc, #56]	; (800680c <Get_SerialNum+0x48>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80067d6:	4b0e      	ldr	r3, [pc, #56]	; (8006810 <Get_SerialNum+0x4c>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80067dc:	68fa      	ldr	r2, [r7, #12]
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	4413      	add	r3, r2
 80067e2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d009      	beq.n	80067fe <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80067ea:	2208      	movs	r2, #8
 80067ec:	4909      	ldr	r1, [pc, #36]	; (8006814 <Get_SerialNum+0x50>)
 80067ee:	68f8      	ldr	r0, [r7, #12]
 80067f0:	f000 f814 	bl	800681c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80067f4:	2204      	movs	r2, #4
 80067f6:	4908      	ldr	r1, [pc, #32]	; (8006818 <Get_SerialNum+0x54>)
 80067f8:	68b8      	ldr	r0, [r7, #8]
 80067fa:	f000 f80f 	bl	800681c <IntToUnicode>
  }
}
 80067fe:	bf00      	nop
 8006800:	3710      	adds	r7, #16
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}
 8006806:	bf00      	nop
 8006808:	1fff7a10 	.word	0x1fff7a10
 800680c:	1fff7a14 	.word	0x1fff7a14
 8006810:	1fff7a18 	.word	0x1fff7a18
 8006814:	200000e2 	.word	0x200000e2
 8006818:	200000f2 	.word	0x200000f2

0800681c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800681c:	b480      	push	{r7}
 800681e:	b087      	sub	sp, #28
 8006820:	af00      	add	r7, sp, #0
 8006822:	60f8      	str	r0, [r7, #12]
 8006824:	60b9      	str	r1, [r7, #8]
 8006826:	4613      	mov	r3, r2
 8006828:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800682a:	2300      	movs	r3, #0
 800682c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800682e:	2300      	movs	r3, #0
 8006830:	75fb      	strb	r3, [r7, #23]
 8006832:	e027      	b.n	8006884 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	0f1b      	lsrs	r3, r3, #28
 8006838:	2b09      	cmp	r3, #9
 800683a:	d80b      	bhi.n	8006854 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	0f1b      	lsrs	r3, r3, #28
 8006840:	b2da      	uxtb	r2, r3
 8006842:	7dfb      	ldrb	r3, [r7, #23]
 8006844:	005b      	lsls	r3, r3, #1
 8006846:	4619      	mov	r1, r3
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	440b      	add	r3, r1
 800684c:	3230      	adds	r2, #48	; 0x30
 800684e:	b2d2      	uxtb	r2, r2
 8006850:	701a      	strb	r2, [r3, #0]
 8006852:	e00a      	b.n	800686a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	0f1b      	lsrs	r3, r3, #28
 8006858:	b2da      	uxtb	r2, r3
 800685a:	7dfb      	ldrb	r3, [r7, #23]
 800685c:	005b      	lsls	r3, r3, #1
 800685e:	4619      	mov	r1, r3
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	440b      	add	r3, r1
 8006864:	3237      	adds	r2, #55	; 0x37
 8006866:	b2d2      	uxtb	r2, r2
 8006868:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	011b      	lsls	r3, r3, #4
 800686e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006870:	7dfb      	ldrb	r3, [r7, #23]
 8006872:	005b      	lsls	r3, r3, #1
 8006874:	3301      	adds	r3, #1
 8006876:	68ba      	ldr	r2, [r7, #8]
 8006878:	4413      	add	r3, r2
 800687a:	2200      	movs	r2, #0
 800687c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800687e:	7dfb      	ldrb	r3, [r7, #23]
 8006880:	3301      	adds	r3, #1
 8006882:	75fb      	strb	r3, [r7, #23]
 8006884:	7dfa      	ldrb	r2, [r7, #23]
 8006886:	79fb      	ldrb	r3, [r7, #7]
 8006888:	429a      	cmp	r2, r3
 800688a:	d3d3      	bcc.n	8006834 <IntToUnicode+0x18>
  }
}
 800688c:	bf00      	nop
 800688e:	bf00      	nop
 8006890:	371c      	adds	r7, #28
 8006892:	46bd      	mov	sp, r7
 8006894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006898:	4770      	bx	lr
	...

0800689c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b08a      	sub	sp, #40	; 0x28
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80068a4:	f107 0314 	add.w	r3, r7, #20
 80068a8:	2200      	movs	r2, #0
 80068aa:	601a      	str	r2, [r3, #0]
 80068ac:	605a      	str	r2, [r3, #4]
 80068ae:	609a      	str	r2, [r3, #8]
 80068b0:	60da      	str	r2, [r3, #12]
 80068b2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80068bc:	d13a      	bne.n	8006934 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80068be:	2300      	movs	r3, #0
 80068c0:	613b      	str	r3, [r7, #16]
 80068c2:	4b1e      	ldr	r3, [pc, #120]	; (800693c <HAL_PCD_MspInit+0xa0>)
 80068c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068c6:	4a1d      	ldr	r2, [pc, #116]	; (800693c <HAL_PCD_MspInit+0xa0>)
 80068c8:	f043 0301 	orr.w	r3, r3, #1
 80068cc:	6313      	str	r3, [r2, #48]	; 0x30
 80068ce:	4b1b      	ldr	r3, [pc, #108]	; (800693c <HAL_PCD_MspInit+0xa0>)
 80068d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068d2:	f003 0301 	and.w	r3, r3, #1
 80068d6:	613b      	str	r3, [r7, #16]
 80068d8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80068da:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80068de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80068e0:	2302      	movs	r3, #2
 80068e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068e4:	2300      	movs	r3, #0
 80068e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80068e8:	2303      	movs	r3, #3
 80068ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80068ec:	230a      	movs	r3, #10
 80068ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80068f0:	f107 0314 	add.w	r3, r7, #20
 80068f4:	4619      	mov	r1, r3
 80068f6:	4812      	ldr	r0, [pc, #72]	; (8006940 <HAL_PCD_MspInit+0xa4>)
 80068f8:	f7fa f958 	bl	8000bac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80068fc:	4b0f      	ldr	r3, [pc, #60]	; (800693c <HAL_PCD_MspInit+0xa0>)
 80068fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006900:	4a0e      	ldr	r2, [pc, #56]	; (800693c <HAL_PCD_MspInit+0xa0>)
 8006902:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006906:	6353      	str	r3, [r2, #52]	; 0x34
 8006908:	2300      	movs	r3, #0
 800690a:	60fb      	str	r3, [r7, #12]
 800690c:	4b0b      	ldr	r3, [pc, #44]	; (800693c <HAL_PCD_MspInit+0xa0>)
 800690e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006910:	4a0a      	ldr	r2, [pc, #40]	; (800693c <HAL_PCD_MspInit+0xa0>)
 8006912:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006916:	6453      	str	r3, [r2, #68]	; 0x44
 8006918:	4b08      	ldr	r3, [pc, #32]	; (800693c <HAL_PCD_MspInit+0xa0>)
 800691a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800691c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006920:	60fb      	str	r3, [r7, #12]
 8006922:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006924:	2200      	movs	r2, #0
 8006926:	2100      	movs	r1, #0
 8006928:	2043      	movs	r0, #67	; 0x43
 800692a:	f7fa f908 	bl	8000b3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800692e:	2043      	movs	r0, #67	; 0x43
 8006930:	f7fa f921 	bl	8000b76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006934:	bf00      	nop
 8006936:	3728      	adds	r7, #40	; 0x28
 8006938:	46bd      	mov	sp, r7
 800693a:	bd80      	pop	{r7, pc}
 800693c:	40023800 	.word	0x40023800
 8006940:	40020000 	.word	0x40020000

08006944 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b082      	sub	sp, #8
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006958:	4619      	mov	r1, r3
 800695a:	4610      	mov	r0, r2
 800695c:	f7fe fb71 	bl	8005042 <USBD_LL_SetupStage>
}
 8006960:	bf00      	nop
 8006962:	3708      	adds	r7, #8
 8006964:	46bd      	mov	sp, r7
 8006966:	bd80      	pop	{r7, pc}

08006968 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b082      	sub	sp, #8
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
 8006970:	460b      	mov	r3, r1
 8006972:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800697a:	78fa      	ldrb	r2, [r7, #3]
 800697c:	6879      	ldr	r1, [r7, #4]
 800697e:	4613      	mov	r3, r2
 8006980:	00db      	lsls	r3, r3, #3
 8006982:	4413      	add	r3, r2
 8006984:	009b      	lsls	r3, r3, #2
 8006986:	440b      	add	r3, r1
 8006988:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800698c:	681a      	ldr	r2, [r3, #0]
 800698e:	78fb      	ldrb	r3, [r7, #3]
 8006990:	4619      	mov	r1, r3
 8006992:	f7fe fbab 	bl	80050ec <USBD_LL_DataOutStage>
}
 8006996:	bf00      	nop
 8006998:	3708      	adds	r7, #8
 800699a:	46bd      	mov	sp, r7
 800699c:	bd80      	pop	{r7, pc}

0800699e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800699e:	b580      	push	{r7, lr}
 80069a0:	b082      	sub	sp, #8
 80069a2:	af00      	add	r7, sp, #0
 80069a4:	6078      	str	r0, [r7, #4]
 80069a6:	460b      	mov	r3, r1
 80069a8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80069b0:	78fa      	ldrb	r2, [r7, #3]
 80069b2:	6879      	ldr	r1, [r7, #4]
 80069b4:	4613      	mov	r3, r2
 80069b6:	00db      	lsls	r3, r3, #3
 80069b8:	4413      	add	r3, r2
 80069ba:	009b      	lsls	r3, r3, #2
 80069bc:	440b      	add	r3, r1
 80069be:	334c      	adds	r3, #76	; 0x4c
 80069c0:	681a      	ldr	r2, [r3, #0]
 80069c2:	78fb      	ldrb	r3, [r7, #3]
 80069c4:	4619      	mov	r1, r3
 80069c6:	f7fe fc44 	bl	8005252 <USBD_LL_DataInStage>
}
 80069ca:	bf00      	nop
 80069cc:	3708      	adds	r7, #8
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bd80      	pop	{r7, pc}

080069d2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80069d2:	b580      	push	{r7, lr}
 80069d4:	b082      	sub	sp, #8
 80069d6:	af00      	add	r7, sp, #0
 80069d8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80069e0:	4618      	mov	r0, r3
 80069e2:	f7fe fd78 	bl	80054d6 <USBD_LL_SOF>
}
 80069e6:	bf00      	nop
 80069e8:	3708      	adds	r7, #8
 80069ea:	46bd      	mov	sp, r7
 80069ec:	bd80      	pop	{r7, pc}

080069ee <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80069ee:	b580      	push	{r7, lr}
 80069f0:	b084      	sub	sp, #16
 80069f2:	af00      	add	r7, sp, #0
 80069f4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80069f6:	2301      	movs	r3, #1
 80069f8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	68db      	ldr	r3, [r3, #12]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d102      	bne.n	8006a08 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8006a02:	2300      	movs	r3, #0
 8006a04:	73fb      	strb	r3, [r7, #15]
 8006a06:	e008      	b.n	8006a1a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	68db      	ldr	r3, [r3, #12]
 8006a0c:	2b02      	cmp	r3, #2
 8006a0e:	d102      	bne.n	8006a16 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8006a10:	2301      	movs	r3, #1
 8006a12:	73fb      	strb	r3, [r7, #15]
 8006a14:	e001      	b.n	8006a1a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8006a16:	f7f9 fe83 	bl	8000720 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006a20:	7bfa      	ldrb	r2, [r7, #15]
 8006a22:	4611      	mov	r1, r2
 8006a24:	4618      	mov	r0, r3
 8006a26:	f7fe fd18 	bl	800545a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006a30:	4618      	mov	r0, r3
 8006a32:	f7fe fcc0 	bl	80053b6 <USBD_LL_Reset>
}
 8006a36:	bf00      	nop
 8006a38:	3710      	adds	r7, #16
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bd80      	pop	{r7, pc}
	...

08006a40 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b082      	sub	sp, #8
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006a4e:	4618      	mov	r0, r3
 8006a50:	f7fe fd13 	bl	800547a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	687a      	ldr	r2, [r7, #4]
 8006a60:	6812      	ldr	r2, [r2, #0]
 8006a62:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006a66:	f043 0301 	orr.w	r3, r3, #1
 8006a6a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6a1b      	ldr	r3, [r3, #32]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d005      	beq.n	8006a80 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006a74:	4b04      	ldr	r3, [pc, #16]	; (8006a88 <HAL_PCD_SuspendCallback+0x48>)
 8006a76:	691b      	ldr	r3, [r3, #16]
 8006a78:	4a03      	ldr	r2, [pc, #12]	; (8006a88 <HAL_PCD_SuspendCallback+0x48>)
 8006a7a:	f043 0306 	orr.w	r3, r3, #6
 8006a7e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006a80:	bf00      	nop
 8006a82:	3708      	adds	r7, #8
 8006a84:	46bd      	mov	sp, r7
 8006a86:	bd80      	pop	{r7, pc}
 8006a88:	e000ed00 	.word	0xe000ed00

08006a8c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b082      	sub	sp, #8
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	f7fe fd03 	bl	80054a6 <USBD_LL_Resume>
}
 8006aa0:	bf00      	nop
 8006aa2:	3708      	adds	r7, #8
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bd80      	pop	{r7, pc}

08006aa8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b082      	sub	sp, #8
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
 8006ab0:	460b      	mov	r3, r1
 8006ab2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006aba:	78fa      	ldrb	r2, [r7, #3]
 8006abc:	4611      	mov	r1, r2
 8006abe:	4618      	mov	r0, r3
 8006ac0:	f7fe fd5b 	bl	800557a <USBD_LL_IsoOUTIncomplete>
}
 8006ac4:	bf00      	nop
 8006ac6:	3708      	adds	r7, #8
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	bd80      	pop	{r7, pc}

08006acc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b082      	sub	sp, #8
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
 8006ad4:	460b      	mov	r3, r1
 8006ad6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006ade:	78fa      	ldrb	r2, [r7, #3]
 8006ae0:	4611      	mov	r1, r2
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	f7fe fd17 	bl	8005516 <USBD_LL_IsoINIncomplete>
}
 8006ae8:	bf00      	nop
 8006aea:	3708      	adds	r7, #8
 8006aec:	46bd      	mov	sp, r7
 8006aee:	bd80      	pop	{r7, pc}

08006af0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b082      	sub	sp, #8
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006afe:	4618      	mov	r0, r3
 8006b00:	f7fe fd6d 	bl	80055de <USBD_LL_DevConnected>
}
 8006b04:	bf00      	nop
 8006b06:	3708      	adds	r7, #8
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	bd80      	pop	{r7, pc}

08006b0c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b082      	sub	sp, #8
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	f7fe fd6a 	bl	80055f4 <USBD_LL_DevDisconnected>
}
 8006b20:	bf00      	nop
 8006b22:	3708      	adds	r7, #8
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd80      	pop	{r7, pc}

08006b28 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b082      	sub	sp, #8
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	781b      	ldrb	r3, [r3, #0]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d13c      	bne.n	8006bb2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8006b38:	4a20      	ldr	r2, [pc, #128]	; (8006bbc <USBD_LL_Init+0x94>)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	4a1e      	ldr	r2, [pc, #120]	; (8006bbc <USBD_LL_Init+0x94>)
 8006b44:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006b48:	4b1c      	ldr	r3, [pc, #112]	; (8006bbc <USBD_LL_Init+0x94>)
 8006b4a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006b4e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8006b50:	4b1a      	ldr	r3, [pc, #104]	; (8006bbc <USBD_LL_Init+0x94>)
 8006b52:	2204      	movs	r2, #4
 8006b54:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006b56:	4b19      	ldr	r3, [pc, #100]	; (8006bbc <USBD_LL_Init+0x94>)
 8006b58:	2202      	movs	r2, #2
 8006b5a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006b5c:	4b17      	ldr	r3, [pc, #92]	; (8006bbc <USBD_LL_Init+0x94>)
 8006b5e:	2200      	movs	r2, #0
 8006b60:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006b62:	4b16      	ldr	r3, [pc, #88]	; (8006bbc <USBD_LL_Init+0x94>)
 8006b64:	2202      	movs	r2, #2
 8006b66:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006b68:	4b14      	ldr	r3, [pc, #80]	; (8006bbc <USBD_LL_Init+0x94>)
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8006b6e:	4b13      	ldr	r3, [pc, #76]	; (8006bbc <USBD_LL_Init+0x94>)
 8006b70:	2200      	movs	r2, #0
 8006b72:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006b74:	4b11      	ldr	r3, [pc, #68]	; (8006bbc <USBD_LL_Init+0x94>)
 8006b76:	2200      	movs	r2, #0
 8006b78:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8006b7a:	4b10      	ldr	r3, [pc, #64]	; (8006bbc <USBD_LL_Init+0x94>)
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006b80:	4b0e      	ldr	r3, [pc, #56]	; (8006bbc <USBD_LL_Init+0x94>)
 8006b82:	2200      	movs	r2, #0
 8006b84:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006b86:	480d      	ldr	r0, [pc, #52]	; (8006bbc <USBD_LL_Init+0x94>)
 8006b88:	f7fa f9dd 	bl	8000f46 <HAL_PCD_Init>
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d001      	beq.n	8006b96 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8006b92:	f7f9 fdc5 	bl	8000720 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8006b96:	2180      	movs	r1, #128	; 0x80
 8006b98:	4808      	ldr	r0, [pc, #32]	; (8006bbc <USBD_LL_Init+0x94>)
 8006b9a:	f7fb fc34 	bl	8002406 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8006b9e:	2240      	movs	r2, #64	; 0x40
 8006ba0:	2100      	movs	r1, #0
 8006ba2:	4806      	ldr	r0, [pc, #24]	; (8006bbc <USBD_LL_Init+0x94>)
 8006ba4:	f7fb fbe8 	bl	8002378 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006ba8:	2280      	movs	r2, #128	; 0x80
 8006baa:	2101      	movs	r1, #1
 8006bac:	4803      	ldr	r0, [pc, #12]	; (8006bbc <USBD_LL_Init+0x94>)
 8006bae:	f7fb fbe3 	bl	8002378 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8006bb2:	2300      	movs	r3, #0
}
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	3708      	adds	r7, #8
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	bd80      	pop	{r7, pc}
 8006bbc:	20001614 	.word	0x20001614

08006bc0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b084      	sub	sp, #16
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006bc8:	2300      	movs	r3, #0
 8006bca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006bcc:	2300      	movs	r3, #0
 8006bce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	f7fa fad2 	bl	8001180 <HAL_PCD_Start>
 8006bdc:	4603      	mov	r3, r0
 8006bde:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006be0:	7bfb      	ldrb	r3, [r7, #15]
 8006be2:	4618      	mov	r0, r3
 8006be4:	f000 f942 	bl	8006e6c <USBD_Get_USB_Status>
 8006be8:	4603      	mov	r3, r0
 8006bea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006bec:	7bbb      	ldrb	r3, [r7, #14]
}
 8006bee:	4618      	mov	r0, r3
 8006bf0:	3710      	adds	r7, #16
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	bd80      	pop	{r7, pc}

08006bf6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006bf6:	b580      	push	{r7, lr}
 8006bf8:	b084      	sub	sp, #16
 8006bfa:	af00      	add	r7, sp, #0
 8006bfc:	6078      	str	r0, [r7, #4]
 8006bfe:	4608      	mov	r0, r1
 8006c00:	4611      	mov	r1, r2
 8006c02:	461a      	mov	r2, r3
 8006c04:	4603      	mov	r3, r0
 8006c06:	70fb      	strb	r3, [r7, #3]
 8006c08:	460b      	mov	r3, r1
 8006c0a:	70bb      	strb	r3, [r7, #2]
 8006c0c:	4613      	mov	r3, r2
 8006c0e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006c10:	2300      	movs	r3, #0
 8006c12:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006c14:	2300      	movs	r3, #0
 8006c16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8006c1e:	78bb      	ldrb	r3, [r7, #2]
 8006c20:	883a      	ldrh	r2, [r7, #0]
 8006c22:	78f9      	ldrb	r1, [r7, #3]
 8006c24:	f7fa ffa3 	bl	8001b6e <HAL_PCD_EP_Open>
 8006c28:	4603      	mov	r3, r0
 8006c2a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006c2c:	7bfb      	ldrb	r3, [r7, #15]
 8006c2e:	4618      	mov	r0, r3
 8006c30:	f000 f91c 	bl	8006e6c <USBD_Get_USB_Status>
 8006c34:	4603      	mov	r3, r0
 8006c36:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006c38:	7bbb      	ldrb	r3, [r7, #14]
}
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	3710      	adds	r7, #16
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}

08006c42 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006c42:	b580      	push	{r7, lr}
 8006c44:	b084      	sub	sp, #16
 8006c46:	af00      	add	r7, sp, #0
 8006c48:	6078      	str	r0, [r7, #4]
 8006c4a:	460b      	mov	r3, r1
 8006c4c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006c52:	2300      	movs	r3, #0
 8006c54:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006c5c:	78fa      	ldrb	r2, [r7, #3]
 8006c5e:	4611      	mov	r1, r2
 8006c60:	4618      	mov	r0, r3
 8006c62:	f7fa ffec 	bl	8001c3e <HAL_PCD_EP_Close>
 8006c66:	4603      	mov	r3, r0
 8006c68:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006c6a:	7bfb      	ldrb	r3, [r7, #15]
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	f000 f8fd 	bl	8006e6c <USBD_Get_USB_Status>
 8006c72:	4603      	mov	r3, r0
 8006c74:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006c76:	7bbb      	ldrb	r3, [r7, #14]
}
 8006c78:	4618      	mov	r0, r3
 8006c7a:	3710      	adds	r7, #16
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	bd80      	pop	{r7, pc}

08006c80 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b084      	sub	sp, #16
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
 8006c88:	460b      	mov	r3, r1
 8006c8a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006c90:	2300      	movs	r3, #0
 8006c92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006c9a:	78fa      	ldrb	r2, [r7, #3]
 8006c9c:	4611      	mov	r1, r2
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	f7fb f8c4 	bl	8001e2c <HAL_PCD_EP_SetStall>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006ca8:	7bfb      	ldrb	r3, [r7, #15]
 8006caa:	4618      	mov	r0, r3
 8006cac:	f000 f8de 	bl	8006e6c <USBD_Get_USB_Status>
 8006cb0:	4603      	mov	r3, r0
 8006cb2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006cb4:	7bbb      	ldrb	r3, [r7, #14]
}
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	3710      	adds	r7, #16
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bd80      	pop	{r7, pc}

08006cbe <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006cbe:	b580      	push	{r7, lr}
 8006cc0:	b084      	sub	sp, #16
 8006cc2:	af00      	add	r7, sp, #0
 8006cc4:	6078      	str	r0, [r7, #4]
 8006cc6:	460b      	mov	r3, r1
 8006cc8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006cce:	2300      	movs	r3, #0
 8006cd0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006cd8:	78fa      	ldrb	r2, [r7, #3]
 8006cda:	4611      	mov	r1, r2
 8006cdc:	4618      	mov	r0, r3
 8006cde:	f7fb f909 	bl	8001ef4 <HAL_PCD_EP_ClrStall>
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006ce6:	7bfb      	ldrb	r3, [r7, #15]
 8006ce8:	4618      	mov	r0, r3
 8006cea:	f000 f8bf 	bl	8006e6c <USBD_Get_USB_Status>
 8006cee:	4603      	mov	r3, r0
 8006cf0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006cf2:	7bbb      	ldrb	r3, [r7, #14]
}
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	3710      	adds	r7, #16
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bd80      	pop	{r7, pc}

08006cfc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	b085      	sub	sp, #20
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
 8006d04:	460b      	mov	r3, r1
 8006d06:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006d0e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8006d10:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	da0b      	bge.n	8006d30 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006d18:	78fb      	ldrb	r3, [r7, #3]
 8006d1a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006d1e:	68f9      	ldr	r1, [r7, #12]
 8006d20:	4613      	mov	r3, r2
 8006d22:	00db      	lsls	r3, r3, #3
 8006d24:	4413      	add	r3, r2
 8006d26:	009b      	lsls	r3, r3, #2
 8006d28:	440b      	add	r3, r1
 8006d2a:	333e      	adds	r3, #62	; 0x3e
 8006d2c:	781b      	ldrb	r3, [r3, #0]
 8006d2e:	e00b      	b.n	8006d48 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006d30:	78fb      	ldrb	r3, [r7, #3]
 8006d32:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006d36:	68f9      	ldr	r1, [r7, #12]
 8006d38:	4613      	mov	r3, r2
 8006d3a:	00db      	lsls	r3, r3, #3
 8006d3c:	4413      	add	r3, r2
 8006d3e:	009b      	lsls	r3, r3, #2
 8006d40:	440b      	add	r3, r1
 8006d42:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8006d46:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006d48:	4618      	mov	r0, r3
 8006d4a:	3714      	adds	r7, #20
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d52:	4770      	bx	lr

08006d54 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b084      	sub	sp, #16
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
 8006d5c:	460b      	mov	r3, r1
 8006d5e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006d60:	2300      	movs	r3, #0
 8006d62:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006d64:	2300      	movs	r3, #0
 8006d66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006d6e:	78fa      	ldrb	r2, [r7, #3]
 8006d70:	4611      	mov	r1, r2
 8006d72:	4618      	mov	r0, r3
 8006d74:	f7fa fed6 	bl	8001b24 <HAL_PCD_SetAddress>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006d7c:	7bfb      	ldrb	r3, [r7, #15]
 8006d7e:	4618      	mov	r0, r3
 8006d80:	f000 f874 	bl	8006e6c <USBD_Get_USB_Status>
 8006d84:	4603      	mov	r3, r0
 8006d86:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006d88:	7bbb      	ldrb	r3, [r7, #14]
}
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	3710      	adds	r7, #16
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	bd80      	pop	{r7, pc}

08006d92 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006d92:	b580      	push	{r7, lr}
 8006d94:	b086      	sub	sp, #24
 8006d96:	af00      	add	r7, sp, #0
 8006d98:	60f8      	str	r0, [r7, #12]
 8006d9a:	607a      	str	r2, [r7, #4]
 8006d9c:	603b      	str	r3, [r7, #0]
 8006d9e:	460b      	mov	r3, r1
 8006da0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006da2:	2300      	movs	r3, #0
 8006da4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006da6:	2300      	movs	r3, #0
 8006da8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8006db0:	7af9      	ldrb	r1, [r7, #11]
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	687a      	ldr	r2, [r7, #4]
 8006db6:	f7fa ffef 	bl	8001d98 <HAL_PCD_EP_Transmit>
 8006dba:	4603      	mov	r3, r0
 8006dbc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006dbe:	7dfb      	ldrb	r3, [r7, #23]
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	f000 f853 	bl	8006e6c <USBD_Get_USB_Status>
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006dca:	7dbb      	ldrb	r3, [r7, #22]
}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	3718      	adds	r7, #24
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bd80      	pop	{r7, pc}

08006dd4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b086      	sub	sp, #24
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	60f8      	str	r0, [r7, #12]
 8006ddc:	607a      	str	r2, [r7, #4]
 8006dde:	603b      	str	r3, [r7, #0]
 8006de0:	460b      	mov	r3, r1
 8006de2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006de4:	2300      	movs	r3, #0
 8006de6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006de8:	2300      	movs	r3, #0
 8006dea:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8006df2:	7af9      	ldrb	r1, [r7, #11]
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	687a      	ldr	r2, [r7, #4]
 8006df8:	f7fa ff6b 	bl	8001cd2 <HAL_PCD_EP_Receive>
 8006dfc:	4603      	mov	r3, r0
 8006dfe:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006e00:	7dfb      	ldrb	r3, [r7, #23]
 8006e02:	4618      	mov	r0, r3
 8006e04:	f000 f832 	bl	8006e6c <USBD_Get_USB_Status>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006e0c:	7dbb      	ldrb	r3, [r7, #22]
}
 8006e0e:	4618      	mov	r0, r3
 8006e10:	3718      	adds	r7, #24
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bd80      	pop	{r7, pc}

08006e16 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006e16:	b580      	push	{r7, lr}
 8006e18:	b082      	sub	sp, #8
 8006e1a:	af00      	add	r7, sp, #0
 8006e1c:	6078      	str	r0, [r7, #4]
 8006e1e:	460b      	mov	r3, r1
 8006e20:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006e28:	78fa      	ldrb	r2, [r7, #3]
 8006e2a:	4611      	mov	r1, r2
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	f7fa ff9b 	bl	8001d68 <HAL_PCD_EP_GetRxCount>
 8006e32:	4603      	mov	r3, r0
}
 8006e34:	4618      	mov	r0, r3
 8006e36:	3708      	adds	r7, #8
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	bd80      	pop	{r7, pc}

08006e3c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b083      	sub	sp, #12
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8006e44:	4b03      	ldr	r3, [pc, #12]	; (8006e54 <USBD_static_malloc+0x18>)
}
 8006e46:	4618      	mov	r0, r3
 8006e48:	370c      	adds	r7, #12
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e50:	4770      	bx	lr
 8006e52:	bf00      	nop
 8006e54:	20001b20 	.word	0x20001b20

08006e58 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8006e58:	b480      	push	{r7}
 8006e5a:	b083      	sub	sp, #12
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]

}
 8006e60:	bf00      	nop
 8006e62:	370c      	adds	r7, #12
 8006e64:	46bd      	mov	sp, r7
 8006e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6a:	4770      	bx	lr

08006e6c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	b085      	sub	sp, #20
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	4603      	mov	r3, r0
 8006e74:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006e76:	2300      	movs	r3, #0
 8006e78:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006e7a:	79fb      	ldrb	r3, [r7, #7]
 8006e7c:	2b03      	cmp	r3, #3
 8006e7e:	d817      	bhi.n	8006eb0 <USBD_Get_USB_Status+0x44>
 8006e80:	a201      	add	r2, pc, #4	; (adr r2, 8006e88 <USBD_Get_USB_Status+0x1c>)
 8006e82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e86:	bf00      	nop
 8006e88:	08006e99 	.word	0x08006e99
 8006e8c:	08006e9f 	.word	0x08006e9f
 8006e90:	08006ea5 	.word	0x08006ea5
 8006e94:	08006eab 	.word	0x08006eab
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8006e98:	2300      	movs	r3, #0
 8006e9a:	73fb      	strb	r3, [r7, #15]
    break;
 8006e9c:	e00b      	b.n	8006eb6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006e9e:	2303      	movs	r3, #3
 8006ea0:	73fb      	strb	r3, [r7, #15]
    break;
 8006ea2:	e008      	b.n	8006eb6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006ea4:	2301      	movs	r3, #1
 8006ea6:	73fb      	strb	r3, [r7, #15]
    break;
 8006ea8:	e005      	b.n	8006eb6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006eaa:	2303      	movs	r3, #3
 8006eac:	73fb      	strb	r3, [r7, #15]
    break;
 8006eae:	e002      	b.n	8006eb6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8006eb0:	2303      	movs	r3, #3
 8006eb2:	73fb      	strb	r3, [r7, #15]
    break;
 8006eb4:	bf00      	nop
  }
  return usb_status;
 8006eb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eb8:	4618      	mov	r0, r3
 8006eba:	3714      	adds	r7, #20
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec2:	4770      	bx	lr

08006ec4 <__libc_init_array>:
 8006ec4:	b570      	push	{r4, r5, r6, lr}
 8006ec6:	4d0d      	ldr	r5, [pc, #52]	; (8006efc <__libc_init_array+0x38>)
 8006ec8:	4c0d      	ldr	r4, [pc, #52]	; (8006f00 <__libc_init_array+0x3c>)
 8006eca:	1b64      	subs	r4, r4, r5
 8006ecc:	10a4      	asrs	r4, r4, #2
 8006ece:	2600      	movs	r6, #0
 8006ed0:	42a6      	cmp	r6, r4
 8006ed2:	d109      	bne.n	8006ee8 <__libc_init_array+0x24>
 8006ed4:	4d0b      	ldr	r5, [pc, #44]	; (8006f04 <__libc_init_array+0x40>)
 8006ed6:	4c0c      	ldr	r4, [pc, #48]	; (8006f08 <__libc_init_array+0x44>)
 8006ed8:	f000 f820 	bl	8006f1c <_init>
 8006edc:	1b64      	subs	r4, r4, r5
 8006ede:	10a4      	asrs	r4, r4, #2
 8006ee0:	2600      	movs	r6, #0
 8006ee2:	42a6      	cmp	r6, r4
 8006ee4:	d105      	bne.n	8006ef2 <__libc_init_array+0x2e>
 8006ee6:	bd70      	pop	{r4, r5, r6, pc}
 8006ee8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006eec:	4798      	blx	r3
 8006eee:	3601      	adds	r6, #1
 8006ef0:	e7ee      	b.n	8006ed0 <__libc_init_array+0xc>
 8006ef2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ef6:	4798      	blx	r3
 8006ef8:	3601      	adds	r6, #1
 8006efa:	e7f2      	b.n	8006ee2 <__libc_init_array+0x1e>
 8006efc:	08006f94 	.word	0x08006f94
 8006f00:	08006f94 	.word	0x08006f94
 8006f04:	08006f94 	.word	0x08006f94
 8006f08:	08006f98 	.word	0x08006f98

08006f0c <memset>:
 8006f0c:	4402      	add	r2, r0
 8006f0e:	4603      	mov	r3, r0
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d100      	bne.n	8006f16 <memset+0xa>
 8006f14:	4770      	bx	lr
 8006f16:	f803 1b01 	strb.w	r1, [r3], #1
 8006f1a:	e7f9      	b.n	8006f10 <memset+0x4>

08006f1c <_init>:
 8006f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f1e:	bf00      	nop
 8006f20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f22:	bc08      	pop	{r3}
 8006f24:	469e      	mov	lr, r3
 8006f26:	4770      	bx	lr

08006f28 <_fini>:
 8006f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f2a:	bf00      	nop
 8006f2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f2e:	bc08      	pop	{r3}
 8006f30:	469e      	mov	lr, r3
 8006f32:	4770      	bx	lr
